
c:/Users/freva/Documents/Simulate2_code/DAM/target/3.0.0/electron/DAM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002710  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  08082730  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  20000000  08082734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000053c  20000078  20000078  00030078  2**3
                  ALLOC
  6 .module_info_suffix 00000028  080827a8  080827a8  000227a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080827d0  080827d0  000227d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0010ec31  00000000  00000000  000227d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001258b  00000000  00000000  00131405  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00019131  00000000  00000000  00143990  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002328  00000000  00000000  0015cac1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004648  00000000  00000000  0015ede9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002657d  00000000  00000000  00163431  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002a05a  00000000  00000000  001899ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b4624  00000000  00000000  001b3a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005c90  00000000  00000000  0026802c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080020:	4809      	ldr	r0, [pc, #36]	; (8080048 <module_user_pre_init+0x28>)
 8080022:	490a      	ldr	r1, [pc, #40]	; (808004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 8080024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080026:	4288      	cmp	r0, r1
 8080028:	d005      	beq.n	8080036 <module_user_pre_init+0x16>
 808002a:	4a09      	ldr	r2, [pc, #36]	; (8080050 <module_user_pre_init+0x30>)
 808002c:	4282      	cmp	r2, r0
 808002e:	d002      	beq.n	8080036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080030:	1a12      	subs	r2, r2, r0
 8080032:	f002 f9ed 	bl	8082410 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080036:	4807      	ldr	r0, [pc, #28]	; (8080054 <module_user_pre_init+0x34>)
 8080038:	4a07      	ldr	r2, [pc, #28]	; (8080058 <module_user_pre_init+0x38>)
 808003a:	2100      	movs	r1, #0
 808003c:	1a12      	subs	r2, r2, r0
 808003e:	f002 f9f5 	bl	808242c <memset>
    return &link_heap_start;
}
 8080042:	4806      	ldr	r0, [pc, #24]	; (808005c <module_user_pre_init+0x3c>)
 8080044:	bd08      	pop	{r3, pc}
 8080046:	bf00      	nop
 8080048:	20000000 	.word	0x20000000
 808004c:	08082734 	.word	0x08082734
 8080050:	20000074 	.word	0x20000074
 8080054:	20000078 	.word	0x20000078
 8080058:	200005b4 	.word	0x200005b4
 808005c:	200005b4 	.word	0x200005b4

08080060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080062:	f000 feb3 	bl	8080dcc <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080066:	2500      	movs	r5, #0
 8080068:	4e05      	ldr	r6, [pc, #20]	; (8080080 <module_user_init+0x20>)
 808006a:	4c06      	ldr	r4, [pc, #24]	; (8080084 <module_user_init+0x24>)
 808006c:	1ba4      	subs	r4, r4, r6
 808006e:	08a4      	lsrs	r4, r4, #2
 8080070:	42a5      	cmp	r5, r4
 8080072:	d100      	bne.n	8080076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 8080076:	f856 3b04 	ldr.w	r3, [r6], #4
 808007a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808007c:	3501      	adds	r5, #1
 808007e:	e7f7      	b.n	8080070 <module_user_init+0x10>
 8080080:	08082710 	.word	0x08082710
 8080084:	08082730 	.word	0x08082730

08080088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080088:	f000 b814 	b.w	80800b4 <setup>

0808008c <module_user_loop>:
}

void module_user_loop() {
 808008c:	b508      	push	{r3, lr}
    loop();
 808008e:	f000 f857 	bl	8080140 <loop>
    _post_loop();
}
 8080092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 8080096:	f000 be5b 	b.w	8080d50 <_post_loop>

0808009a <_Znaj>:
 808009a:	f000 bc57 	b.w	808094c <malloc>

0808009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 808009e:	f000 bc5d 	b.w	808095c <free>

080800a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a2:	7800      	ldrb	r0, [r0, #0]
 80800a4:	fab0 f080 	clz	r0, r0
 80800a8:	0940      	lsrs	r0, r0, #5
 80800aa:	4770      	bx	lr

080800ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800ac:	2301      	movs	r3, #1
 80800ae:	7003      	strb	r3, [r0, #0]
 80800b0:	4770      	bx	lr
	...

080800b4 <setup>:
#define LED_PIN D7

bool blinkState = false;

// setup() runs once, when the device is first turned on.
void setup() {
 80800b4:	b510      	push	{r4, lr}
  Wire.begin();
 80800b6:	f001 fa3b 	bl	8081530 <_Z19__fetch_global_Wirev>
 80800ba:	f001 f8fb 	bl	80812b4 <_ZN7TwoWire5beginEv>

  Serial.begin(38400);
 80800be:	f000 ff71 	bl	8080fa4 <_Z16_fetch_usbserialv>
 80800c2:	f44f 4116 	mov.w	r1, #38400	; 0x9600
 80800c6:	f000 ff53 	bl	8080f70 <_ZN9USBSerial5beginEl>

  Serial.println("Init I2C device...");
 80800ca:	f000 ff6b 	bl	8080fa4 <_Z16_fetch_usbserialv>
 80800ce:	490f      	ldr	r1, [pc, #60]	; (808010c <setup+0x58>)
 80800d0:	f000 fcc9 	bl	8080a66 <_ZN5Print7printlnEPKc>
  accelgyro.initialize();
 80800d4:	480e      	ldr	r0, [pc, #56]	; (8080110 <setup+0x5c>)
 80800d6:	f000 f972 	bl	80803be <_ZN7MPU605010initializeEv>

  Serial.println("testing MPU6050 connection...");
 80800da:	f000 ff63 	bl	8080fa4 <_Z16_fetch_usbserialv>
 80800de:	490d      	ldr	r1, [pc, #52]	; (8080114 <setup+0x60>)
 80800e0:	f000 fcc1 	bl	8080a66 <_ZN5Print7printlnEPKc>
  Serial.println(accelgyro.testConnection() ? "MPU6050 connection successful" : "MPU6050 connection failed");
 80800e4:	f000 ff5e 	bl	8080fa4 <_Z16_fetch_usbserialv>
 80800e8:	4604      	mov	r4, r0
 80800ea:	4809      	ldr	r0, [pc, #36]	; (8080110 <setup+0x5c>)
 80800ec:	f000 f98e 	bl	808040c <_ZN7MPU605014testConnectionEv>
 80800f0:	4a09      	ldr	r2, [pc, #36]	; (8080118 <setup+0x64>)
 80800f2:	490a      	ldr	r1, [pc, #40]	; (808011c <setup+0x68>)
 80800f4:	2800      	cmp	r0, #0
 80800f6:	bf18      	it	ne
 80800f8:	4611      	movne	r1, r2
 80800fa:	4620      	mov	r0, r4
 80800fc:	f000 fcb3 	bl	8080a66 <_ZN5Print7printlnEPKc>

  pinMode(LED_PIN, OUTPUT);

}
 8080100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pinMode(LED_PIN, OUTPUT);
 8080104:	2101      	movs	r1, #1
 8080106:	2007      	movs	r0, #7
 8080108:	f001 b9ca 	b.w	80814a0 <pinMode>
 808010c:	080824e0 	.word	0x080824e0
 8080110:	2000007c 	.word	0x2000007c
 8080114:	080824f3 	.word	0x080824f3
 8080118:	080824a8 	.word	0x080824a8
 808011c:	080824c6 	.word	0x080824c6

08080120 <_ZSt5atan2IiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
 8080120:	b570      	push	{r4, r5, r6, lr}
 8080122:	4606      	mov	r6, r0
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
 8080124:	4608      	mov	r0, r1
 8080126:	f001 fe03 	bl	8081d30 <__aeabi_i2d>
 808012a:	4604      	mov	r4, r0
 808012c:	460d      	mov	r5, r1
 808012e:	4630      	mov	r0, r6
 8080130:	f001 fdfe 	bl	8081d30 <__aeabi_i2d>
 8080134:	4622      	mov	r2, r4
 8080136:	462b      	mov	r3, r5
    }
 8080138:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return atan2(__type(__y), __type(__x));
 808013c:	f001 ba2a 	b.w	8081594 <atan2>

08080140 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 8080140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  // The core of your code will likely live here.
  accelgyro.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);

  xAng = map(ax, minVal, maxVal, -90, 90);
 8080144:	f04f 085a 	mov.w	r8, #90	; 0x5a
  accelgyro.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
 8080148:	4b57      	ldr	r3, [pc, #348]	; (80802a8 <loop+0x168>)
void loop() {
 808014a:	b085      	sub	sp, #20
  accelgyro.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
 808014c:	9302      	str	r3, [sp, #8]
 808014e:	4b57      	ldr	r3, [pc, #348]	; (80802ac <loop+0x16c>)
 8080150:	f8df 919c 	ldr.w	r9, [pc, #412]	; 80802f0 <loop+0x1b0>
 8080154:	4c56      	ldr	r4, [pc, #344]	; (80802b0 <loop+0x170>)
 8080156:	4d57      	ldr	r5, [pc, #348]	; (80802b4 <loop+0x174>)
 8080158:	9301      	str	r3, [sp, #4]
 808015a:	4b57      	ldr	r3, [pc, #348]	; (80802b8 <loop+0x178>)
  xAng = map(ax, minVal, maxVal, -90, 90);
 808015c:	4f57      	ldr	r7, [pc, #348]	; (80802bc <loop+0x17c>)
 808015e:	4e58      	ldr	r6, [pc, #352]	; (80802c0 <loop+0x180>)
  accelgyro.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
 8080160:	4622      	mov	r2, r4
 8080162:	4629      	mov	r1, r5
 8080164:	9300      	str	r3, [sp, #0]
 8080166:	4857      	ldr	r0, [pc, #348]	; (80802c4 <loop+0x184>)
 8080168:	464b      	mov	r3, r9
 808016a:	f000 f8e3 	bl	8080334 <_ZN7MPU605010getMotion6EPsS0_S0_S0_S0_S0_>
  xAng = map(ax, minVal, maxVal, -90, 90);
 808016e:	f8cd 8000 	str.w	r8, [sp]
 8080172:	683a      	ldr	r2, [r7, #0]
 8080174:	6831      	ldr	r1, [r6, #0]
 8080176:	f06f 0359 	mvn.w	r3, #89	; 0x59
 808017a:	f9b5 0000 	ldrsh.w	r0, [r5]
 808017e:	f000 fd79 	bl	8080c74 <_Z3mapiiiii>
 8080182:	4d51      	ldr	r5, [pc, #324]	; (80802c8 <loop+0x188>)
  yAng = map(ay, minVal, maxVal, -90, 90);
 8080184:	f06f 0359 	mvn.w	r3, #89	; 0x59
  xAng = map(ax, minVal, maxVal, -90, 90);
 8080188:	8028      	strh	r0, [r5, #0]
  yAng = map(ay, minVal, maxVal, -90, 90);
 808018a:	f8cd 8000 	str.w	r8, [sp]
 808018e:	683a      	ldr	r2, [r7, #0]
 8080190:	6831      	ldr	r1, [r6, #0]
 8080192:	f9b4 0000 	ldrsh.w	r0, [r4]
 8080196:	f000 fd6d 	bl	8080c74 <_Z3mapiiiii>
 808019a:	4c4c      	ldr	r4, [pc, #304]	; (80802cc <loop+0x18c>)
  zAng = map(az, minVal, maxVal, -90, 90);
 808019c:	f06f 0359 	mvn.w	r3, #89	; 0x59
  yAng = map(ay, minVal, maxVal, -90, 90);
 80801a0:	8020      	strh	r0, [r4, #0]
  zAng = map(az, minVal, maxVal, -90, 90);
 80801a2:	f8cd 8000 	str.w	r8, [sp]
 80801a6:	683a      	ldr	r2, [r7, #0]
 80801a8:	6831      	ldr	r1, [r6, #0]
 80801aa:	f9b9 0000 	ldrsh.w	r0, [r9]
 80801ae:	f000 fd61 	bl	8080c74 <_Z3mapiiiii>
 80801b2:	4e47      	ldr	r6, [pc, #284]	; (80802d0 <loop+0x190>)
 80801b4:	b201      	sxth	r1, r0

  x= RAD_TO_DEG * (atan2(-yAng, -zAng)+PI);
 80801b6:	f9b4 0000 	ldrsh.w	r0, [r4]
  zAng = map(az, minVal, maxVal, -90, 90);
 80801ba:	8031      	strh	r1, [r6, #0]
  x= RAD_TO_DEG * (atan2(-yAng, -zAng)+PI);
 80801bc:	4240      	negs	r0, r0
 80801be:	4249      	negs	r1, r1
 80801c0:	f7ff ffae 	bl	8080120 <_ZSt5atan2IiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80801c4:	a334      	add	r3, pc, #208	; (adr r3, 8080298 <loop+0x158>)
 80801c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80801ca:	f001 fc65 	bl	8081a98 <__adddf3>
 80801ce:	a334      	add	r3, pc, #208	; (adr r3, 80802a0 <loop+0x160>)
 80801d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80801d4:	f001 fe16 	bl	8081e04 <__aeabi_dmul>
 80801d8:	4f3e      	ldr	r7, [pc, #248]	; (80802d4 <loop+0x194>)
 80801da:	e9c7 0100 	strd	r0, r1, [r7]
  y= RAD_TO_DEG * (atan2(-xAng, -zAng)+PI);
 80801de:	f9b6 1000 	ldrsh.w	r1, [r6]
 80801e2:	f9b5 0000 	ldrsh.w	r0, [r5]
 80801e6:	4249      	negs	r1, r1
 80801e8:	4240      	negs	r0, r0
 80801ea:	f7ff ff99 	bl	8080120 <_ZSt5atan2IiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80801ee:	a32a      	add	r3, pc, #168	; (adr r3, 8080298 <loop+0x158>)
 80801f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80801f4:	f001 fc50 	bl	8081a98 <__adddf3>
 80801f8:	a329      	add	r3, pc, #164	; (adr r3, 80802a0 <loop+0x160>)
 80801fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80801fe:	f001 fe01 	bl	8081e04 <__aeabi_dmul>
 8080202:	4e35      	ldr	r6, [pc, #212]	; (80802d8 <loop+0x198>)
 8080204:	e9c6 0100 	strd	r0, r1, [r6]
  z= RAD_TO_DEG * (atan2(-yAng, -xAng)+PI);
 8080208:	f9b5 1000 	ldrsh.w	r1, [r5]
 808020c:	f9b4 0000 	ldrsh.w	r0, [r4]
 8080210:	4249      	negs	r1, r1
 8080212:	4240      	negs	r0, r0
 8080214:	f7ff ff84 	bl	8080120 <_ZSt5atan2IiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8080218:	a31f      	add	r3, pc, #124	; (adr r3, 8080298 <loop+0x158>)
 808021a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808021e:	f001 fc3b 	bl	8081a98 <__adddf3>
 8080222:	a31f      	add	r3, pc, #124	; (adr r3, 80802a0 <loop+0x160>)
 8080224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080228:	f001 fdec 	bl	8081e04 <__aeabi_dmul>

  Serial.print("AngleX= ");
  Serial.println(x);
 808022c:	2402      	movs	r4, #2
  z= RAD_TO_DEG * (atan2(-yAng, -xAng)+PI);
 808022e:	4d2b      	ldr	r5, [pc, #172]	; (80802dc <loop+0x19c>)
 8080230:	e9c5 0100 	strd	r0, r1, [r5]
  Serial.print("AngleX= ");
 8080234:	f000 feb6 	bl	8080fa4 <_Z16_fetch_usbserialv>
 8080238:	4929      	ldr	r1, [pc, #164]	; (80802e0 <loop+0x1a0>)
 808023a:	f000 fc01 	bl	8080a40 <_ZN5Print5printEPKc>
  Serial.println(x);
 808023e:	f000 feb1 	bl	8080fa4 <_Z16_fetch_usbserialv>
 8080242:	9400      	str	r4, [sp, #0]
 8080244:	e9d7 2300 	ldrd	r2, r3, [r7]
 8080248:	f000 fcf4 	bl	8080c34 <_ZN5Print7printlnEdi>
  
  Serial.print("AngleY= ");
 808024c:	f000 feaa 	bl	8080fa4 <_Z16_fetch_usbserialv>
 8080250:	4924      	ldr	r1, [pc, #144]	; (80802e4 <loop+0x1a4>)
 8080252:	f000 fbf5 	bl	8080a40 <_ZN5Print5printEPKc>
  Serial.println(y);
 8080256:	f000 fea5 	bl	8080fa4 <_Z16_fetch_usbserialv>
 808025a:	9400      	str	r4, [sp, #0]
 808025c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8080260:	f000 fce8 	bl	8080c34 <_ZN5Print7printlnEdi>
  
  Serial.print("AngleZ= ");
 8080264:	f000 fe9e 	bl	8080fa4 <_Z16_fetch_usbserialv>
 8080268:	491f      	ldr	r1, [pc, #124]	; (80802e8 <loop+0x1a8>)
 808026a:	f000 fbe9 	bl	8080a40 <_ZN5Print5printEPKc>
  Serial.println(z);
 808026e:	f000 fe99 	bl	8080fa4 <_Z16_fetch_usbserialv>
 8080272:	9400      	str	r4, [sp, #0]
 8080274:	e9d5 2300 	ldrd	r2, r3, [r5]
 8080278:	f000 fcdc 	bl	8080c34 <_ZN5Print7printlnEdi>
  Serial.println("-----------------------------------------");
 808027c:	f000 fe92 	bl	8080fa4 <_Z16_fetch_usbserialv>
 8080280:	491a      	ldr	r1, [pc, #104]	; (80802ec <loop+0x1ac>)
 8080282:	f000 fbf0 	bl	8080a66 <_ZN5Print7printlnEPKc>
  delay(400);
 8080286:	f44f 70c8 	mov.w	r0, #400	; 0x190

 808028a:	b005      	add	sp, #20
 808028c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  delay(400);
 8080290:	f000 bcfc 	b.w	8080c8c <delay>
 8080294:	f3af 8000 	nop.w
 8080298:	54442d18 	.word	0x54442d18
 808029c:	400921fb 	.word	0x400921fb
 80802a0:	1a63c1f8 	.word	0x1a63c1f8
 80802a4:	404ca5dc 	.word	0x404ca5dc
 80802a8:	20000096 	.word	0x20000096
 80802ac:	20000094 	.word	0x20000094
 80802b0:	2000008e 	.word	0x2000008e
 80802b4:	2000008c 	.word	0x2000008c
 80802b8:	20000092 	.word	0x20000092
 80802bc:	20000000 	.word	0x20000000
 80802c0:	20000004 	.word	0x20000004
 80802c4:	2000007c 	.word	0x2000007c
 80802c8:	200000a0 	.word	0x200000a0
 80802cc:	200000b0 	.word	0x200000b0
 80802d0:	200000c0 	.word	0x200000c0
 80802d4:	20000098 	.word	0x20000098
 80802d8:	200000a8 	.word	0x200000a8
 80802dc:	200000b8 	.word	0x200000b8
 80802e0:	08082511 	.word	0x08082511
 80802e4:	0808251a 	.word	0x0808251a
 80802e8:	08082523 	.word	0x08082523
 80802ec:	0808252c 	.word	0x0808252c
 80802f0:	20000090 	.word	0x20000090

080802f4 <_GLOBAL__sub_I_accelgyro>:
MPU6050 accelgyro;
 80802f4:	4801      	ldr	r0, [pc, #4]	; (80802fc <_GLOBAL__sub_I_accelgyro+0x8>)
 80802f6:	f000 b803 	b.w	8080300 <_ZN7MPU6050C1Ev>
 80802fa:	bf00      	nop
 80802fc:	2000007c 	.word	0x2000007c

08080300 <_ZN7MPU6050C1Ev>:

/** Default constructor, uses default I2C address.
 * @see MPU6050_DEFAULT_ADDRESS
 */
MPU6050::MPU6050() {
    devAddr = MPU6050_DEFAULT_ADDRESS;
 8080300:	2368      	movs	r3, #104	; 0x68
 8080302:	7003      	strb	r3, [r0, #0]
}
 8080304:	4770      	bx	lr

08080306 <_ZN7MPU605021setFullScaleGyroRangeEh>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050::setFullScaleGyroRange(uint8_t range) {
 8080306:	b507      	push	{r0, r1, r2, lr}
    I2Cdev::writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 8080308:	2302      	movs	r3, #2
 808030a:	2204      	movs	r2, #4
 808030c:	7800      	ldrb	r0, [r0, #0]
 808030e:	9100      	str	r1, [sp, #0]
 8080310:	211b      	movs	r1, #27
 8080312:	f000 f957 	bl	80805c4 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 8080316:	b003      	add	sp, #12
 8080318:	f85d fb04 	ldr.w	pc, [sp], #4

0808031c <_ZN7MPU605022setFullScaleAccelRangeEh>:
}
/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050::setFullScaleAccelRange(uint8_t range) {
 808031c:	b507      	push	{r0, r1, r2, lr}
    I2Cdev::writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
 808031e:	2302      	movs	r3, #2
 8080320:	2204      	movs	r2, #4
 8080322:	7800      	ldrb	r0, [r0, #0]
 8080324:	9100      	str	r1, [sp, #0]
 8080326:	211c      	movs	r1, #28
 8080328:	f000 f94c 	bl	80805c4 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 808032c:	b003      	add	sp, #12
 808032e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08080334 <_ZN7MPU605010getMotion6EPsS0_S0_S0_S0_S0_>:
 * @param gz 16-bit signed integer container for gyroscope Z-axis value
 * @see getAcceleration()
 * @see getRotation()
 * @see MPU6050_RA_ACCEL_XOUT_H
 */
void MPU6050::getMotion6(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
 8080334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8080336:	461d      	mov	r5, r3
    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer);
 8080338:	4603      	mov	r3, r0
void MPU6050::getMotion6(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
 808033a:	4604      	mov	r4, r0
 808033c:	460f      	mov	r7, r1
 808033e:	4616      	mov	r6, r2
    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer);
 8080340:	4a15      	ldr	r2, [pc, #84]	; (8080398 <_ZN7MPU605010getMotion6EPsS0_S0_S0_S0_S0_+0x64>)
 8080342:	f813 0b01 	ldrb.w	r0, [r3], #1
 8080346:	8812      	ldrh	r2, [r2, #0]
 8080348:	213b      	movs	r1, #59	; 0x3b
 808034a:	9200      	str	r2, [sp, #0]
 808034c:	220e      	movs	r2, #14
 808034e:	f000 f865 	bl	808041c <_ZN6I2Cdev9readBytesEhhhPht>
    *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
 8080352:	7862      	ldrb	r2, [r4, #1]
 8080354:	78a3      	ldrb	r3, [r4, #2]
 8080356:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808035a:	803b      	strh	r3, [r7, #0]
    *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
 808035c:	78e2      	ldrb	r2, [r4, #3]
 808035e:	7923      	ldrb	r3, [r4, #4]
 8080360:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8080364:	8033      	strh	r3, [r6, #0]
    *az = (((int16_t)buffer[4]) << 8) | buffer[5];
 8080366:	7962      	ldrb	r2, [r4, #5]
 8080368:	79a3      	ldrb	r3, [r4, #6]
 808036a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808036e:	802b      	strh	r3, [r5, #0]
    *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
 8080370:	7a62      	ldrb	r2, [r4, #9]
 8080372:	7aa3      	ldrb	r3, [r4, #10]
 8080374:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8080378:	9a08      	ldr	r2, [sp, #32]
 808037a:	8013      	strh	r3, [r2, #0]
    *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
 808037c:	7ae2      	ldrb	r2, [r4, #11]
 808037e:	7b23      	ldrb	r3, [r4, #12]
 8080380:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8080384:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8080386:	8013      	strh	r3, [r2, #0]
    *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
 8080388:	7b62      	ldrb	r2, [r4, #13]
 808038a:	7ba3      	ldrb	r3, [r4, #14]
 808038c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8080390:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8080392:	8013      	strh	r3, [r2, #0]
}
 8080394:	b003      	add	sp, #12
 8080396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8080398:	20000008 	.word	0x20000008

0808039c <_ZN7MPU605015setSleepEnabledEb>:
 * @param enabled New sleep mode enabled status
 * @see getSleepEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050::setSleepEnabled(bool enabled) {
 808039c:	460b      	mov	r3, r1
    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 808039e:	2206      	movs	r2, #6
 80803a0:	216b      	movs	r1, #107	; 0x6b
 80803a2:	7800      	ldrb	r0, [r0, #0]
 80803a4:	f000 b8ea 	b.w	808057c <_ZN6I2Cdev8writeBitEhhhh>

080803a8 <_ZN7MPU605014setClockSourceEh>:
 * @see getClockSource()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050::setClockSource(uint8_t source) {
 80803a8:	b507      	push	{r0, r1, r2, lr}
    I2Cdev::writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
 80803aa:	2303      	movs	r3, #3
 80803ac:	2202      	movs	r2, #2
 80803ae:	7800      	ldrb	r0, [r0, #0]
 80803b0:	9100      	str	r1, [sp, #0]
 80803b2:	216b      	movs	r1, #107	; 0x6b
 80803b4:	f000 f906 	bl	80805c4 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 80803b8:	b003      	add	sp, #12
 80803ba:	f85d fb04 	ldr.w	pc, [sp], #4

080803be <_ZN7MPU605010initializeEv>:
void MPU6050::initialize() {
 80803be:	b510      	push	{r4, lr}
 80803c0:	4604      	mov	r4, r0
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
 80803c2:	2101      	movs	r1, #1
 80803c4:	f7ff fff0 	bl	80803a8 <_ZN7MPU605014setClockSourceEh>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
 80803c8:	4620      	mov	r0, r4
 80803ca:	2100      	movs	r1, #0
 80803cc:	f7ff ff9b 	bl	8080306 <_ZN7MPU605021setFullScaleGyroRangeEh>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 80803d0:	4620      	mov	r0, r4
 80803d2:	2100      	movs	r1, #0
 80803d4:	f7ff ffa2 	bl	808031c <_ZN7MPU605022setFullScaleAccelRangeEh>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
 80803d8:	4620      	mov	r0, r4
}
 80803da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
 80803de:	2100      	movs	r1, #0
 80803e0:	f7ff bfdc 	b.w	808039c <_ZN7MPU605015setSleepEnabledEb>

080803e4 <_ZN7MPU605011getDeviceIDEv>:
 * @see MPU6050_RA_WHO_AM_I
 * @see MPU6050_WHO_AM_I_BIT
 * @see MPU6050_WHO_AM_I_LENGTH
 */
uint8_t MPU6050::getDeviceID() {
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
 80803e4:	4603      	mov	r3, r0
uint8_t MPU6050::getDeviceID() {
 80803e6:	b513      	push	{r0, r1, r4, lr}
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
 80803e8:	4a07      	ldr	r2, [pc, #28]	; (8080408 <_ZN7MPU605011getDeviceIDEv+0x24>)
uint8_t MPU6050::getDeviceID() {
 80803ea:	4604      	mov	r4, r0
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
 80803ec:	8812      	ldrh	r2, [r2, #0]
 80803ee:	f813 0b01 	ldrb.w	r0, [r3], #1
 80803f2:	2175      	movs	r1, #117	; 0x75
 80803f4:	e9cd 3200 	strd	r3, r2, [sp]
 80803f8:	2306      	movs	r3, #6
 80803fa:	461a      	mov	r2, r3
 80803fc:	f000 f877 	bl	80804ee <_ZN6I2Cdev8readBitsEhhhhPht>
    return buffer[0];
}
 8080400:	7860      	ldrb	r0, [r4, #1]
 8080402:	b002      	add	sp, #8
 8080404:	bd10      	pop	{r4, pc}
 8080406:	bf00      	nop
 8080408:	20000008 	.word	0x20000008

0808040c <_ZN7MPU605014testConnectionEv>:
bool MPU6050::testConnection() {
 808040c:	b508      	push	{r3, lr}
    return getDeviceID() == 0x34;
 808040e:	f7ff ffe9 	bl	80803e4 <_ZN7MPU605011getDeviceIDEv>
}
 8080412:	f1a0 0334 	sub.w	r3, r0, #52	; 0x34
 8080416:	4258      	negs	r0, r3
 8080418:	4158      	adcs	r0, r3
 808041a:	bd08      	pop	{r3, pc}

0808041c <_ZN6I2Cdev9readBytesEhhhPht>:
 * @param length Number of bytes to read
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
int8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout) {
 808041c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080420:	4616      	mov	r6, r2
 8080422:	469b      	mov	fp, r3
 8080424:	4607      	mov	r7, r0
 8080426:	468a      	mov	sl, r1
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
 8080428:	2500      	movs	r5, #0
int8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout) {
 808042a:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 808042e:	f000 f901 	bl	8080634 <HAL_Timer_Get_Milli_Seconds>
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
 8080432:	2e20      	cmp	r6, #32
 8080434:	4633      	mov	r3, r6
 8080436:	bfa8      	it	ge
 8080438:	2320      	movge	r3, #32
 808043a:	4681      	mov	r9, r0
    int8_t count = 0;
 808043c:	462c      	mov	r4, r5
 808043e:	9301      	str	r3, [sp, #4]
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
 8080440:	42b5      	cmp	r5, r6
 8080442:	d23a      	bcs.n	80804ba <_ZN6I2Cdev9readBytesEhhhPht+0x9e>
                Wire.beginTransmission(devAddr);
 8080444:	f001 f874 	bl	8081530 <_Z19__fetch_global_Wirev>
 8080448:	4639      	mov	r1, r7
 808044a:	f000 ff65 	bl	8081318 <_ZN7TwoWire17beginTransmissionEh>
                Wire.write(regAddr);
 808044e:	f001 f86f 	bl	8081530 <_Z19__fetch_global_Wirev>
 8080452:	6803      	ldr	r3, [r0, #0]
 8080454:	4651      	mov	r1, sl
 8080456:	689b      	ldr	r3, [r3, #8]
 8080458:	4798      	blx	r3
                Wire.endTransmission();
 808045a:	f001 f869 	bl	8081530 <_Z19__fetch_global_Wirev>
 808045e:	f000 ff63 	bl	8081328 <_ZN7TwoWire15endTransmissionEv>
                Wire.beginTransmission(devAddr);
 8080462:	f001 f865 	bl	8081530 <_Z19__fetch_global_Wirev>
 8080466:	4639      	mov	r1, r7
 8080468:	f000 ff56 	bl	8081318 <_ZN7TwoWire17beginTransmissionEh>
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
 808046c:	f001 f860 	bl	8081530 <_Z19__fetch_global_Wirev>
 8080470:	1b72      	subs	r2, r6, r5
 8080472:	2a20      	cmp	r2, #32
 8080474:	bfa8      	it	ge
 8080476:	2220      	movge	r2, #32
 8080478:	4639      	mov	r1, r7
 808047a:	b2d2      	uxtb	r2, r2
 808047c:	f000 ff49 	bl	8081312 <_ZN7TwoWire11requestFromEhj>
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
 8080480:	f001 f856 	bl	8081530 <_Z19__fetch_global_Wirev>
 8080484:	6803      	ldr	r3, [r0, #0]
 8080486:	691b      	ldr	r3, [r3, #16]
 8080488:	4798      	blx	r3
 808048a:	b190      	cbz	r0, 80804b2 <_ZN6I2Cdev9readBytesEhhhPht+0x96>
 808048c:	f1b8 0f00 	cmp.w	r8, #0
 8080490:	d109      	bne.n	80804a6 <_ZN6I2Cdev9readBytesEhhhPht+0x8a>
                    data[count] = Wire.read();
 8080492:	f001 f84d 	bl	8081530 <_Z19__fetch_global_Wirev>
 8080496:	6803      	ldr	r3, [r0, #0]
 8080498:	695b      	ldr	r3, [r3, #20]
 808049a:	4798      	blx	r3
 808049c:	f80b 0004 	strb.w	r0, [fp, r4]
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
 80804a0:	3401      	adds	r4, #1
 80804a2:	b264      	sxtb	r4, r4
 80804a4:	e7ec      	b.n	8080480 <_ZN6I2Cdev9readBytesEhhhPht+0x64>
 80804a6:	f000 f8c5 	bl	8080634 <HAL_Timer_Get_Milli_Seconds>
 80804aa:	eba0 0009 	sub.w	r0, r0, r9
 80804ae:	4540      	cmp	r0, r8
 80804b0:	d3ef      	bcc.n	8080492 <_ZN6I2Cdev9readBytesEhhhPht+0x76>
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
 80804b2:	9b01      	ldr	r3, [sp, #4]
 80804b4:	441d      	add	r5, r3
 80804b6:	b2ed      	uxtb	r5, r5
 80804b8:	e7c2      	b.n	8080440 <_ZN6I2Cdev9readBytesEhhhPht+0x24>
        }

    #endif

    // check for timeout
    if (timeout > 0 && millis() - t1 >= timeout && count < length) count = -1; // timeout
 80804ba:	f1b8 0f00 	cmp.w	r8, #0
 80804be:	d009      	beq.n	80804d4 <_ZN6I2Cdev9readBytesEhhhPht+0xb8>
 80804c0:	f000 f8b8 	bl	8080634 <HAL_Timer_Get_Milli_Seconds>
 80804c4:	eba0 0909 	sub.w	r9, r0, r9
 80804c8:	45c1      	cmp	r9, r8
 80804ca:	d303      	bcc.n	80804d4 <_ZN6I2Cdev9readBytesEhhhPht+0xb8>
 80804cc:	42b4      	cmp	r4, r6
 80804ce:	bfb8      	it	lt
 80804d0:	f04f 34ff 	movlt.w	r4, #4294967295
        Serial.print(count, DEC);
        Serial.println(" read).");
    #endif

    return count;
}
 80804d4:	4620      	mov	r0, r4
 80804d6:	b003      	add	sp, #12
 80804d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080804dc <_ZN6I2Cdev8readByteEhhPht>:
int8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout) {
 80804dc:	b507      	push	{r0, r1, r2, lr}
    return readBytes(devAddr, regAddr, 1, data, timeout);
 80804de:	9300      	str	r3, [sp, #0]
 80804e0:	4613      	mov	r3, r2
 80804e2:	2201      	movs	r2, #1
 80804e4:	f7ff ff9a 	bl	808041c <_ZN6I2Cdev9readBytesEhhhPht>
}
 80804e8:	b003      	add	sp, #12
 80804ea:	f85d fb04 	ldr.w	pc, [sp], #4

080804ee <_ZN6I2Cdev8readBitsEhhhhPht>:
int8_t I2Cdev::readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data, uint16_t timeout) {
 80804ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80804f0:	4614      	mov	r4, r2
 80804f2:	461d      	mov	r5, r3
    if ((count = readByte(devAddr, regAddr, &b, timeout)) != 0) {
 80804f4:	f10d 0207 	add.w	r2, sp, #7
 80804f8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80804fc:	f7ff ffee 	bl	80804dc <_ZN6I2Cdev8readByteEhhPht>
 8080500:	b158      	cbz	r0, 808051a <_ZN6I2Cdev8readBitsEhhhhPht+0x2c>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 8080502:	2301      	movs	r3, #1
 8080504:	1b62      	subs	r2, r4, r5
 8080506:	40ab      	lsls	r3, r5
 8080508:	3201      	adds	r2, #1
        b &= mask;
 808050a:	f89d 1007 	ldrb.w	r1, [sp, #7]
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 808050e:	3b01      	subs	r3, #1
 8080510:	4093      	lsls	r3, r2
        b >>= (bitStart - length + 1);
 8080512:	400b      	ands	r3, r1
 8080514:	4113      	asrs	r3, r2
 8080516:	9a06      	ldr	r2, [sp, #24]
 8080518:	7013      	strb	r3, [r2, #0]
}
 808051a:	b003      	add	sp, #12
 808051c:	bd30      	pop	{r4, r5, pc}

0808051e <_ZN6I2Cdev10writeBytesEhhhPh>:
 * @param regAddr First register address to write to
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* data) {
 808051e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080520:	4607      	mov	r7, r0
 8080522:	4615      	mov	r5, r2
 8080524:	461c      	mov	r4, r3
 8080526:	460e      	mov	r6, r1
        Serial.print(regAddr, HEX);
        Serial.print("...");
    #endif
    uint8_t status = 0;
	#if defined (PARTICLE)
        Wire.beginTransmission(devAddr);
 8080528:	f001 f802 	bl	8081530 <_Z19__fetch_global_Wirev>
 808052c:	4639      	mov	r1, r7
 808052e:	f000 fef3 	bl	8081318 <_ZN7TwoWire17beginTransmissionEh>
        Wire.write((uint8_t) regAddr); // send address
 8080532:	f000 fffd 	bl	8081530 <_Z19__fetch_global_Wirev>
 8080536:	6803      	ldr	r3, [r0, #0]
 8080538:	4631      	mov	r1, r6
 808053a:	689b      	ldr	r3, [r3, #8]
 808053c:	4798      	blx	r3
        Wire.write((uint8_t) regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length; i++) {
 808053e:	4425      	add	r5, r4
 8080540:	42ac      	cmp	r4, r5
 8080542:	d007      	beq.n	8080554 <_ZN6I2Cdev10writeBytesEhhhPh+0x36>
        #ifdef I2CDEV_SERIAL_DEBUG
            Serial.print(data[i], HEX);
            if (i + 1 < length) Serial.print(" ");
        #endif
		#if defined (PARTICLE)
            Wire.write((uint8_t) data[i]);
 8080544:	f000 fff4 	bl	8081530 <_Z19__fetch_global_Wirev>
 8080548:	6803      	ldr	r3, [r0, #0]
 808054a:	f814 1b01 	ldrb.w	r1, [r4], #1
 808054e:	689b      	ldr	r3, [r3, #8]
 8080550:	4798      	blx	r3
    for (uint8_t i = 0; i < length; i++) {
 8080552:	e7f5      	b.n	8080540 <_ZN6I2Cdev10writeBytesEhhhPh+0x22>
        #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
            Fastwire::write((uint8_t) data[i]);
        #endif
    }
	#if defined (PARTICLE)
        status = Wire.endTransmission();
 8080554:	f000 ffec 	bl	8081530 <_Z19__fetch_global_Wirev>
 8080558:	f000 fee6 	bl	8081328 <_ZN7TwoWire15endTransmissionEv>
    #endif
    #ifdef I2CDEV_SERIAL_DEBUG
        Serial.println(". Done.");
    #endif
    return status == 0;
}
 808055c:	fab0 f080 	clz	r0, r0
 8080560:	0940      	lsrs	r0, r0, #5
 8080562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08080564 <_ZN6I2Cdev9writeByteEhhh>:
bool I2Cdev::writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data) {
 8080564:	b507      	push	{r0, r1, r2, lr}
 8080566:	f88d 2007 	strb.w	r2, [sp, #7]
    return writeBytes(devAddr, regAddr, 1, &data);
 808056a:	f10d 0307 	add.w	r3, sp, #7
 808056e:	2201      	movs	r2, #1
 8080570:	f7ff ffd5 	bl	808051e <_ZN6I2Cdev10writeBytesEhhhPh>
}
 8080574:	b003      	add	sp, #12
 8080576:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808057c <_ZN6I2Cdev8writeBitEhhhh>:
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
 808057c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8080580:	4690      	mov	r8, r2
 8080582:	2401      	movs	r4, #1
 8080584:	461f      	mov	r7, r3
    readByte(devAddr, regAddr, &b);
 8080586:	4b0e      	ldr	r3, [pc, #56]	; (80805c0 <_ZN6I2Cdev8writeBitEhhhh+0x44>)
 8080588:	f10d 0207 	add.w	r2, sp, #7
 808058c:	881b      	ldrh	r3, [r3, #0]
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
 808058e:	4605      	mov	r5, r0
 8080590:	460e      	mov	r6, r1
    readByte(devAddr, regAddr, &b);
 8080592:	f7ff ffa3 	bl	80804dc <_ZN6I2Cdev8readByteEhhPht>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 8080596:	fa04 f208 	lsl.w	r2, r4, r8
 808059a:	b252      	sxtb	r2, r2
 808059c:	f89d 4007 	ldrb.w	r4, [sp, #7]
 80805a0:	b157      	cbz	r7, 80805b8 <_ZN6I2Cdev8writeBitEhhhh+0x3c>
 80805a2:	4322      	orrs	r2, r4
 80805a4:	b2d2      	uxtb	r2, r2
    return writeByte(devAddr, regAddr, b);
 80805a6:	4631      	mov	r1, r6
 80805a8:	4628      	mov	r0, r5
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 80805aa:	f88d 2007 	strb.w	r2, [sp, #7]
    return writeByte(devAddr, regAddr, b);
 80805ae:	f7ff ffd9 	bl	8080564 <_ZN6I2Cdev9writeByteEhhh>
}
 80805b2:	b002      	add	sp, #8
 80805b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 80805b8:	ea24 0202 	bic.w	r2, r4, r2
 80805bc:	e7f3      	b.n	80805a6 <_ZN6I2Cdev8writeBitEhhhh+0x2a>
 80805be:	bf00      	nop
 80805c0:	20000008 	.word	0x20000008

080805c4 <_ZN6I2Cdev9writeBitsEhhhhh>:
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
 80805c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80805c6:	461f      	mov	r7, r3
    if (readByte(devAddr, regAddr, &b) != 0) {
 80805c8:	4b11      	ldr	r3, [pc, #68]	; (8080610 <_ZN6I2Cdev9writeBitsEhhhhh+0x4c>)
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
 80805ca:	4616      	mov	r6, r2
    if (readByte(devAddr, regAddr, &b) != 0) {
 80805cc:	881b      	ldrh	r3, [r3, #0]
 80805ce:	f10d 0207 	add.w	r2, sp, #7
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
 80805d2:	4604      	mov	r4, r0
 80805d4:	460d      	mov	r5, r1
    if (readByte(devAddr, regAddr, &b) != 0) {
 80805d6:	f7ff ff81 	bl	80804dc <_ZN6I2Cdev8readByteEhhPht>
 80805da:	b1b8      	cbz	r0, 808060c <_ZN6I2Cdev9writeBitsEhhhhh+0x48>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 80805dc:	2301      	movs	r3, #1
        data <<= (bitStart - length + 1); // shift data into correct position
 80805de:	f89d 1020 	ldrb.w	r1, [sp, #32]
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 80805e2:	1bf2      	subs	r2, r6, r7
 80805e4:	40bb      	lsls	r3, r7
 80805e6:	3201      	adds	r2, #1
 80805e8:	3b01      	subs	r3, #1
 80805ea:	4093      	lsls	r3, r2
        data <<= (bitStart - length + 1); // shift data into correct position
 80805ec:	fa01 f202 	lsl.w	r2, r1, r2
        b &= ~(mask); // zero all important bits in existing byte
 80805f0:	f89d 1007 	ldrb.w	r1, [sp, #7]
        data <<= (bitStart - length + 1); // shift data into correct position
 80805f4:	b2d2      	uxtb	r2, r2
        b &= ~(mask); // zero all important bits in existing byte
 80805f6:	ea21 0103 	bic.w	r1, r1, r3
        data &= mask; // zero all non-important bits in data
 80805fa:	4013      	ands	r3, r2
        b |= data; // combine data with existing byte
 80805fc:	ea41 0203 	orr.w	r2, r1, r3
        return writeByte(devAddr, regAddr, b);
 8080600:	4620      	mov	r0, r4
 8080602:	4629      	mov	r1, r5
        b |= data; // combine data with existing byte
 8080604:	f88d 2007 	strb.w	r2, [sp, #7]
        return writeByte(devAddr, regAddr, b);
 8080608:	f7ff ffac 	bl	8080564 <_ZN6I2Cdev9writeByteEhhh>
}
 808060c:	b003      	add	sp, #12
 808060e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8080610:	20000008 	.word	0x20000008

08080614 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8080614:	b508      	push	{r3, lr}
 8080616:	4b02      	ldr	r3, [pc, #8]	; (8080620 <HAL_Pin_Mode+0xc>)
 8080618:	681b      	ldr	r3, [r3, #0]
 808061a:	689b      	ldr	r3, [r3, #8]
 808061c:	9301      	str	r3, [sp, #4]
 808061e:	bd08      	pop	{r3, pc}
 8080620:	080401b0 	.word	0x080401b0

08080624 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8080624:	b508      	push	{r3, lr}
 8080626:	4b02      	ldr	r3, [pc, #8]	; (8080630 <HAL_RNG_GetRandomNumber+0xc>)
 8080628:	681b      	ldr	r3, [r3, #0]
 808062a:	685b      	ldr	r3, [r3, #4]
 808062c:	9301      	str	r3, [sp, #4]
 808062e:	bd08      	pop	{r3, pc}
 8080630:	0804019c 	.word	0x0804019c

08080634 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8080634:	b508      	push	{r3, lr}
 8080636:	4b02      	ldr	r3, [pc, #8]	; (8080640 <HAL_Timer_Get_Milli_Seconds+0xc>)
 8080638:	681b      	ldr	r3, [r3, #0]
 808063a:	695b      	ldr	r3, [r3, #20]
 808063c:	9301      	str	r3, [sp, #4]
 808063e:	bd08      	pop	{r3, pc}
 8080640:	0804019c 	.word	0x0804019c

08080644 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 8080644:	b508      	push	{r3, lr}
 8080646:	4b02      	ldr	r3, [pc, #8]	; (8080650 <os_mutex_recursive_create+0xc>)
 8080648:	681b      	ldr	r3, [r3, #0]
 808064a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808064c:	9301      	str	r3, [sp, #4]
 808064e:	bd08      	pop	{r3, pc}
 8080650:	080401d0 	.word	0x080401d0

08080654 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 8080654:	b508      	push	{r3, lr}
 8080656:	4b02      	ldr	r3, [pc, #8]	; (8080660 <os_mutex_recursive_destroy+0xc>)
 8080658:	681b      	ldr	r3, [r3, #0]
 808065a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808065c:	9301      	str	r3, [sp, #4]
 808065e:	bd08      	pop	{r3, pc}
 8080660:	080401d0 	.word	0x080401d0

08080664 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 8080664:	b508      	push	{r3, lr}
 8080666:	4b02      	ldr	r3, [pc, #8]	; (8080670 <hal_usart_init+0xc>)
 8080668:	681b      	ldr	r3, [r3, #0]
 808066a:	699b      	ldr	r3, [r3, #24]
 808066c:	9301      	str	r3, [sp, #4]
 808066e:	bd08      	pop	{r3, pc}
 8080670:	080401c4 	.word	0x080401c4

08080674 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 8080674:	b508      	push	{r3, lr}
 8080676:	4b02      	ldr	r3, [pc, #8]	; (8080680 <hal_usart_write+0xc>)
 8080678:	681b      	ldr	r3, [r3, #0]
 808067a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808067c:	9301      	str	r3, [sp, #4]
 808067e:	bd08      	pop	{r3, pc}
 8080680:	080401c4 	.word	0x080401c4

08080684 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 8080684:	b508      	push	{r3, lr}
 8080686:	4b02      	ldr	r3, [pc, #8]	; (8080690 <hal_usart_available+0xc>)
 8080688:	681b      	ldr	r3, [r3, #0]
 808068a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808068c:	9301      	str	r3, [sp, #4]
 808068e:	bd08      	pop	{r3, pc}
 8080690:	080401c4 	.word	0x080401c4

08080694 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 8080694:	b508      	push	{r3, lr}
 8080696:	4b02      	ldr	r3, [pc, #8]	; (80806a0 <hal_usart_read+0xc>)
 8080698:	681b      	ldr	r3, [r3, #0]
 808069a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808069c:	9301      	str	r3, [sp, #4]
 808069e:	bd08      	pop	{r3, pc}
 80806a0:	080401c4 	.word	0x080401c4

080806a4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80806a4:	b508      	push	{r3, lr}
 80806a6:	4b02      	ldr	r3, [pc, #8]	; (80806b0 <hal_usart_peek+0xc>)
 80806a8:	681b      	ldr	r3, [r3, #0]
 80806aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80806ac:	9301      	str	r3, [sp, #4]
 80806ae:	bd08      	pop	{r3, pc}
 80806b0:	080401c4 	.word	0x080401c4

080806b4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80806b4:	b508      	push	{r3, lr}
 80806b6:	4b02      	ldr	r3, [pc, #8]	; (80806c0 <hal_usart_flush+0xc>)
 80806b8:	681b      	ldr	r3, [r3, #0]
 80806ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80806bc:	9301      	str	r3, [sp, #4]
 80806be:	bd08      	pop	{r3, pc}
 80806c0:	080401c4 	.word	0x080401c4

080806c4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80806c4:	b508      	push	{r3, lr}
 80806c6:	4b02      	ldr	r3, [pc, #8]	; (80806d0 <hal_usart_is_enabled+0xc>)
 80806c8:	681b      	ldr	r3, [r3, #0]
 80806ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80806cc:	9301      	str	r3, [sp, #4]
 80806ce:	bd08      	pop	{r3, pc}
 80806d0:	080401c4 	.word	0x080401c4

080806d4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80806d4:	b508      	push	{r3, lr}
 80806d6:	4b02      	ldr	r3, [pc, #8]	; (80806e0 <hal_usart_available_data_for_write+0xc>)
 80806d8:	681b      	ldr	r3, [r3, #0]
 80806da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80806dc:	9301      	str	r3, [sp, #4]
 80806de:	bd08      	pop	{r3, pc}
 80806e0:	080401c4 	.word	0x080401c4

080806e4 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 80806e4:	b508      	push	{r3, lr}
 80806e6:	4b02      	ldr	r3, [pc, #8]	; (80806f0 <hal_i2c_begin+0xc>)
 80806e8:	681b      	ldr	r3, [r3, #0]
 80806ea:	68db      	ldr	r3, [r3, #12]
 80806ec:	9301      	str	r3, [sp, #4]
 80806ee:	bd08      	pop	{r3, pc}
 80806f0:	080401ac 	.word	0x080401ac

080806f4 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 80806f4:	b508      	push	{r3, lr}
 80806f6:	4b02      	ldr	r3, [pc, #8]	; (8080700 <hal_i2c_begin_transmission+0xc>)
 80806f8:	681b      	ldr	r3, [r3, #0]
 80806fa:	699b      	ldr	r3, [r3, #24]
 80806fc:	9301      	str	r3, [sp, #4]
 80806fe:	bd08      	pop	{r3, pc}
 8080700:	080401ac 	.word	0x080401ac

08080704 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 8080704:	b508      	push	{r3, lr}
 8080706:	4b02      	ldr	r3, [pc, #8]	; (8080710 <hal_i2c_end_transmission+0xc>)
 8080708:	681b      	ldr	r3, [r3, #0]
 808070a:	69db      	ldr	r3, [r3, #28]
 808070c:	9301      	str	r3, [sp, #4]
 808070e:	bd08      	pop	{r3, pc}
 8080710:	080401ac 	.word	0x080401ac

08080714 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 8080714:	b508      	push	{r3, lr}
 8080716:	4b02      	ldr	r3, [pc, #8]	; (8080720 <hal_i2c_write+0xc>)
 8080718:	681b      	ldr	r3, [r3, #0]
 808071a:	6a1b      	ldr	r3, [r3, #32]
 808071c:	9301      	str	r3, [sp, #4]
 808071e:	bd08      	pop	{r3, pc}
 8080720:	080401ac 	.word	0x080401ac

08080724 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 8080724:	b508      	push	{r3, lr}
 8080726:	4b02      	ldr	r3, [pc, #8]	; (8080730 <hal_i2c_available+0xc>)
 8080728:	681b      	ldr	r3, [r3, #0]
 808072a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808072c:	9301      	str	r3, [sp, #4]
 808072e:	bd08      	pop	{r3, pc}
 8080730:	080401ac 	.word	0x080401ac

08080734 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 8080734:	b508      	push	{r3, lr}
 8080736:	4b02      	ldr	r3, [pc, #8]	; (8080740 <hal_i2c_read+0xc>)
 8080738:	681b      	ldr	r3, [r3, #0]
 808073a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808073c:	9301      	str	r3, [sp, #4]
 808073e:	bd08      	pop	{r3, pc}
 8080740:	080401ac 	.word	0x080401ac

08080744 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 8080744:	b508      	push	{r3, lr}
 8080746:	4b02      	ldr	r3, [pc, #8]	; (8080750 <hal_i2c_peek+0xc>)
 8080748:	681b      	ldr	r3, [r3, #0]
 808074a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808074c:	9301      	str	r3, [sp, #4]
 808074e:	bd08      	pop	{r3, pc}
 8080750:	080401ac 	.word	0x080401ac

08080754 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 8080754:	b508      	push	{r3, lr}
 8080756:	4b02      	ldr	r3, [pc, #8]	; (8080760 <hal_i2c_flush+0xc>)
 8080758:	681b      	ldr	r3, [r3, #0]
 808075a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808075c:	9301      	str	r3, [sp, #4]
 808075e:	bd08      	pop	{r3, pc}
 8080760:	080401ac 	.word	0x080401ac

08080764 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 8080764:	b508      	push	{r3, lr}
 8080766:	4b02      	ldr	r3, [pc, #8]	; (8080770 <hal_i2c_is_enabled+0xc>)
 8080768:	681b      	ldr	r3, [r3, #0]
 808076a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808076c:	9301      	str	r3, [sp, #4]
 808076e:	bd08      	pop	{r3, pc}
 8080770:	080401ac 	.word	0x080401ac

08080774 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 8080774:	b508      	push	{r3, lr}
 8080776:	4b02      	ldr	r3, [pc, #8]	; (8080780 <hal_i2c_init+0xc>)
 8080778:	681b      	ldr	r3, [r3, #0]
 808077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808077c:	9301      	str	r3, [sp, #4]
 808077e:	bd08      	pop	{r3, pc}
 8080780:	080401ac 	.word	0x080401ac

08080784 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 8080784:	b508      	push	{r3, lr}
 8080786:	4b02      	ldr	r3, [pc, #8]	; (8080790 <hal_i2c_request_ex+0xc>)
 8080788:	681b      	ldr	r3, [r3, #0]
 808078a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 808078c:	9301      	str	r3, [sp, #4]
 808078e:	bd08      	pop	{r3, pc}
 8080790:	080401ac 	.word	0x080401ac

08080794 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 8080794:	b508      	push	{r3, lr}
 8080796:	4b02      	ldr	r3, [pc, #8]	; (80807a0 <hal_spi_init+0xc>)
 8080798:	681b      	ldr	r3, [r3, #0]
 808079a:	69db      	ldr	r3, [r3, #28]
 808079c:	9301      	str	r3, [sp, #4]
 808079e:	bd08      	pop	{r3, pc}
 80807a0:	080401b4 	.word	0x080401b4

080807a4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80807a4:	b508      	push	{r3, lr}
 80807a6:	4b02      	ldr	r3, [pc, #8]	; (80807b0 <hal_spi_is_enabled+0xc>)
 80807a8:	681b      	ldr	r3, [r3, #0]
 80807aa:	6a1b      	ldr	r3, [r3, #32]
 80807ac:	9301      	str	r3, [sp, #4]
 80807ae:	bd08      	pop	{r3, pc}
 80807b0:	080401b4 	.word	0x080401b4

080807b4 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80807b4:	b508      	push	{r3, lr}
 80807b6:	4b02      	ldr	r3, [pc, #8]	; (80807c0 <inet_gethostbyname+0xc>)
 80807b8:	681b      	ldr	r3, [r3, #0]
 80807ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80807bc:	9301      	str	r3, [sp, #4]
 80807be:	bd08      	pop	{r3, pc}
 80807c0:	08060020 	.word	0x08060020

080807c4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80807c4:	b508      	push	{r3, lr}
 80807c6:	4b02      	ldr	r3, [pc, #8]	; (80807d0 <HAL_USB_USART_Init+0xc>)
 80807c8:	681b      	ldr	r3, [r3, #0]
 80807ca:	681b      	ldr	r3, [r3, #0]
 80807cc:	9301      	str	r3, [sp, #4]
 80807ce:	bd08      	pop	{r3, pc}
 80807d0:	0806001c 	.word	0x0806001c

080807d4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80807d4:	b508      	push	{r3, lr}
 80807d6:	4b02      	ldr	r3, [pc, #8]	; (80807e0 <HAL_USB_USART_Begin+0xc>)
 80807d8:	681b      	ldr	r3, [r3, #0]
 80807da:	685b      	ldr	r3, [r3, #4]
 80807dc:	9301      	str	r3, [sp, #4]
 80807de:	bd08      	pop	{r3, pc}
 80807e0:	0806001c 	.word	0x0806001c

080807e4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80807e4:	b508      	push	{r3, lr}
 80807e6:	4b02      	ldr	r3, [pc, #8]	; (80807f0 <HAL_USB_USART_Available_Data+0xc>)
 80807e8:	681b      	ldr	r3, [r3, #0]
 80807ea:	691b      	ldr	r3, [r3, #16]
 80807ec:	9301      	str	r3, [sp, #4]
 80807ee:	bd08      	pop	{r3, pc}
 80807f0:	0806001c 	.word	0x0806001c

080807f4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80807f4:	b508      	push	{r3, lr}
 80807f6:	4b02      	ldr	r3, [pc, #8]	; (8080800 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80807f8:	681b      	ldr	r3, [r3, #0]
 80807fa:	695b      	ldr	r3, [r3, #20]
 80807fc:	9301      	str	r3, [sp, #4]
 80807fe:	bd08      	pop	{r3, pc}
 8080800:	0806001c 	.word	0x0806001c

08080804 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8080804:	b508      	push	{r3, lr}
 8080806:	4b02      	ldr	r3, [pc, #8]	; (8080810 <HAL_USB_USART_Receive_Data+0xc>)
 8080808:	681b      	ldr	r3, [r3, #0]
 808080a:	699b      	ldr	r3, [r3, #24]
 808080c:	9301      	str	r3, [sp, #4]
 808080e:	bd08      	pop	{r3, pc}
 8080810:	0806001c 	.word	0x0806001c

08080814 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8080814:	b508      	push	{r3, lr}
 8080816:	4b02      	ldr	r3, [pc, #8]	; (8080820 <HAL_USB_USART_Send_Data+0xc>)
 8080818:	681b      	ldr	r3, [r3, #0]
 808081a:	69db      	ldr	r3, [r3, #28]
 808081c:	9301      	str	r3, [sp, #4]
 808081e:	bd08      	pop	{r3, pc}
 8080820:	0806001c 	.word	0x0806001c

08080824 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8080824:	b508      	push	{r3, lr}
 8080826:	4b02      	ldr	r3, [pc, #8]	; (8080830 <HAL_USB_USART_Flush_Data+0xc>)
 8080828:	681b      	ldr	r3, [r3, #0]
 808082a:	6a1b      	ldr	r3, [r3, #32]
 808082c:	9301      	str	r3, [sp, #4]
 808082e:	bd08      	pop	{r3, pc}
 8080830:	0806001c 	.word	0x0806001c

08080834 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8080834:	b508      	push	{r3, lr}
 8080836:	4b02      	ldr	r3, [pc, #8]	; (8080840 <set_system_mode+0xc>)
 8080838:	681b      	ldr	r3, [r3, #0]
 808083a:	685b      	ldr	r3, [r3, #4]
 808083c:	9301      	str	r3, [sp, #4]
 808083e:	bd08      	pop	{r3, pc}
 8080840:	080401a4 	.word	0x080401a4

08080844 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8080844:	b508      	push	{r3, lr}
 8080846:	4b02      	ldr	r3, [pc, #8]	; (8080850 <system_delay_ms+0xc>)
 8080848:	681b      	ldr	r3, [r3, #0]
 808084a:	695b      	ldr	r3, [r3, #20]
 808084c:	9301      	str	r3, [sp, #4]
 808084e:	bd08      	pop	{r3, pc}
 8080850:	080401a4 	.word	0x080401a4

08080854 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8080854:	b508      	push	{r3, lr}
 8080856:	4b03      	ldr	r3, [pc, #12]	; (8080864 <system_ctrl_set_app_request_handler+0x10>)
 8080858:	681b      	ldr	r3, [r3, #0]
 808085a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808085e:	9301      	str	r3, [sp, #4]
 8080860:	bd08      	pop	{r3, pc}
 8080862:	0000      	.short	0x0000
 8080864:	080401a4 	.word	0x080401a4

08080868 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8080868:	b508      	push	{r3, lr}
 808086a:	4b03      	ldr	r3, [pc, #12]	; (8080878 <system_ctrl_set_result+0x10>)
 808086c:	681b      	ldr	r3, [r3, #0]
 808086e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8080872:	9301      	str	r3, [sp, #4]
 8080874:	bd08      	pop	{r3, pc}
 8080876:	0000      	.short	0x0000
 8080878:	080401a4 	.word	0x080401a4

0808087c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 808087c:	b508      	push	{r3, lr}
 808087e:	4b02      	ldr	r3, [pc, #8]	; (8080888 <network_connect+0xc>)
 8080880:	681b      	ldr	r3, [r3, #0]
 8080882:	685b      	ldr	r3, [r3, #4]
 8080884:	9301      	str	r3, [sp, #4]
 8080886:	bd08      	pop	{r3, pc}
 8080888:	080401c8 	.word	0x080401c8

0808088c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 808088c:	b508      	push	{r3, lr}
 808088e:	4b02      	ldr	r3, [pc, #8]	; (8080898 <network_connecting+0xc>)
 8080890:	681b      	ldr	r3, [r3, #0]
 8080892:	689b      	ldr	r3, [r3, #8]
 8080894:	9301      	str	r3, [sp, #4]
 8080896:	bd08      	pop	{r3, pc}
 8080898:	080401c8 	.word	0x080401c8

0808089c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 808089c:	b508      	push	{r3, lr}
 808089e:	4b02      	ldr	r3, [pc, #8]	; (80808a8 <network_disconnect+0xc>)
 80808a0:	681b      	ldr	r3, [r3, #0]
 80808a2:	68db      	ldr	r3, [r3, #12]
 80808a4:	9301      	str	r3, [sp, #4]
 80808a6:	bd08      	pop	{r3, pc}
 80808a8:	080401c8 	.word	0x080401c8

080808ac <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80808ac:	b508      	push	{r3, lr}
 80808ae:	4b02      	ldr	r3, [pc, #8]	; (80808b8 <network_ready+0xc>)
 80808b0:	681b      	ldr	r3, [r3, #0]
 80808b2:	691b      	ldr	r3, [r3, #16]
 80808b4:	9301      	str	r3, [sp, #4]
 80808b6:	bd08      	pop	{r3, pc}
 80808b8:	080401c8 	.word	0x080401c8

080808bc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80808bc:	b508      	push	{r3, lr}
 80808be:	4b02      	ldr	r3, [pc, #8]	; (80808c8 <network_on+0xc>)
 80808c0:	681b      	ldr	r3, [r3, #0]
 80808c2:	695b      	ldr	r3, [r3, #20]
 80808c4:	9301      	str	r3, [sp, #4]
 80808c6:	bd08      	pop	{r3, pc}
 80808c8:	080401c8 	.word	0x080401c8

080808cc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80808cc:	b508      	push	{r3, lr}
 80808ce:	4b02      	ldr	r3, [pc, #8]	; (80808d8 <network_off+0xc>)
 80808d0:	681b      	ldr	r3, [r3, #0]
 80808d2:	699b      	ldr	r3, [r3, #24]
 80808d4:	9301      	str	r3, [sp, #4]
 80808d6:	bd08      	pop	{r3, pc}
 80808d8:	080401c8 	.word	0x080401c8

080808dc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80808dc:	b508      	push	{r3, lr}
 80808de:	4b02      	ldr	r3, [pc, #8]	; (80808e8 <network_listen+0xc>)
 80808e0:	681b      	ldr	r3, [r3, #0]
 80808e2:	69db      	ldr	r3, [r3, #28]
 80808e4:	9301      	str	r3, [sp, #4]
 80808e6:	bd08      	pop	{r3, pc}
 80808e8:	080401c8 	.word	0x080401c8

080808ec <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80808ec:	b508      	push	{r3, lr}
 80808ee:	4b02      	ldr	r3, [pc, #8]	; (80808f8 <network_listening+0xc>)
 80808f0:	681b      	ldr	r3, [r3, #0]
 80808f2:	6a1b      	ldr	r3, [r3, #32]
 80808f4:	9301      	str	r3, [sp, #4]
 80808f6:	bd08      	pop	{r3, pc}
 80808f8:	080401c8 	.word	0x080401c8

080808fc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80808fc:	b508      	push	{r3, lr}
 80808fe:	4b02      	ldr	r3, [pc, #8]	; (8080908 <network_set_listen_timeout+0xc>)
 8080900:	681b      	ldr	r3, [r3, #0]
 8080902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080904:	9301      	str	r3, [sp, #4]
 8080906:	bd08      	pop	{r3, pc}
 8080908:	080401c8 	.word	0x080401c8

0808090c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 808090c:	b508      	push	{r3, lr}
 808090e:	4b02      	ldr	r3, [pc, #8]	; (8080918 <network_get_listen_timeout+0xc>)
 8080910:	681b      	ldr	r3, [r3, #0]
 8080912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080914:	9301      	str	r3, [sp, #4]
 8080916:	bd08      	pop	{r3, pc}
 8080918:	080401c8 	.word	0x080401c8

0808091c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 808091c:	b508      	push	{r3, lr}
 808091e:	4b02      	ldr	r3, [pc, #8]	; (8080928 <network_is_on+0xc>)
 8080920:	681b      	ldr	r3, [r3, #0]
 8080922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8080924:	9301      	str	r3, [sp, #4]
 8080926:	bd08      	pop	{r3, pc}
 8080928:	080401c8 	.word	0x080401c8

0808092c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 808092c:	b508      	push	{r3, lr}
 808092e:	4b02      	ldr	r3, [pc, #8]	; (8080938 <network_is_off+0xc>)
 8080930:	681b      	ldr	r3, [r3, #0]
 8080932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8080934:	9301      	str	r3, [sp, #4]
 8080936:	bd08      	pop	{r3, pc}
 8080938:	080401c8 	.word	0x080401c8

0808093c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 808093c:	b508      	push	{r3, lr}
 808093e:	4b02      	ldr	r3, [pc, #8]	; (8080948 <spark_set_random_seed_from_cloud_handler+0xc>)
 8080940:	681b      	ldr	r3, [r3, #0]
 8080942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8080944:	9301      	str	r3, [sp, #4]
 8080946:	bd08      	pop	{r3, pc}
 8080948:	080401cc 	.word	0x080401cc

0808094c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 808094c:	b508      	push	{r3, lr}
 808094e:	4b02      	ldr	r3, [pc, #8]	; (8080958 <malloc+0xc>)
 8080950:	681b      	ldr	r3, [r3, #0]
 8080952:	681b      	ldr	r3, [r3, #0]
 8080954:	9301      	str	r3, [sp, #4]
 8080956:	bd08      	pop	{r3, pc}
 8080958:	080401a0 	.word	0x080401a0

0808095c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 808095c:	b508      	push	{r3, lr}
 808095e:	4b02      	ldr	r3, [pc, #8]	; (8080968 <free+0xc>)
 8080960:	681b      	ldr	r3, [r3, #0]
 8080962:	685b      	ldr	r3, [r3, #4]
 8080964:	9301      	str	r3, [sp, #4]
 8080966:	bd08      	pop	{r3, pc}
 8080968:	080401a0 	.word	0x080401a0

0808096c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 808096c:	b508      	push	{r3, lr}
 808096e:	4b02      	ldr	r3, [pc, #8]	; (8080978 <newlib_impure_ptr_callback+0xc>)
 8080970:	681b      	ldr	r3, [r3, #0]
 8080972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8080974:	9301      	str	r3, [sp, #4]
 8080976:	bd08      	pop	{r3, pc}
 8080978:	080401a0 	.word	0x080401a0

0808097c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 808097c:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 808097e:	2600      	movs	r6, #0
 8080980:	4604      	mov	r4, r0
 8080982:	460d      	mov	r5, r1
 8080984:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 8080988:	f7ff fe5c 	bl	8080644 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 808098c:	4628      	mov	r0, r5
    _spi = spi;
 808098e:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 8080990:	f7ff ff00 	bl	8080794 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 8080994:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 8080996:	6066      	str	r6, [r4, #4]
}
 8080998:	bd70      	pop	{r4, r5, r6, pc}

0808099a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 808099a:	b510      	push	{r4, lr}
 808099c:	4604      	mov	r4, r0
        if (wakeupSource_) {
 808099e:	6800      	ldr	r0, [r0, #0]
 80809a0:	b118      	cbz	r0, 80809aa <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 80809a2:	f7ff ffdb 	bl	808095c <free>
            wakeupSource_ = nullptr;
 80809a6:	2300      	movs	r3, #0
 80809a8:	6023      	str	r3, [r4, #0]
        }
    }
 80809aa:	bd10      	pop	{r4, pc}

080809ac <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80809ac:	b510      	push	{r4, lr}
 80809ae:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 80809b0:	f7ff fff3 	bl	808099a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 80809b4:	4620      	mov	r0, r4
 80809b6:	bd10      	pop	{r4, pc}

080809b8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80809b8:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80809ba:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80809bc:	b510      	push	{r4, lr}
 80809be:	4b08      	ldr	r3, [pc, #32]	; (80809e0 <_GLOBAL__sub_I_System+0x28>)
 80809c0:	4c08      	ldr	r4, [pc, #32]	; (80809e4 <_GLOBAL__sub_I_System+0x2c>)
 80809c2:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80809c4:	4b08      	ldr	r3, [pc, #32]	; (80809e8 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80809c6:	6020      	str	r0, [r4, #0]
 80809c8:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80809ca:	71a0      	strb	r0, [r4, #6]
 80809cc:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80809ce:	f7ff ff31 	bl	8080834 <set_system_mode>
SystemClass System;
 80809d2:	4620      	mov	r0, r4
 80809d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80809d8:	4a04      	ldr	r2, [pc, #16]	; (80809ec <_GLOBAL__sub_I_System+0x34>)
 80809da:	4905      	ldr	r1, [pc, #20]	; (80809f0 <_GLOBAL__sub_I_System+0x38>)
 80809dc:	f000 bdd0 	b.w	8081580 <__aeabi_atexit>
 80809e0:	200000d0 	.word	0x200000d0
 80809e4:	200000c4 	.word	0x200000c4
 80809e8:	ffff0000 	.word	0xffff0000
 80809ec:	20000078 	.word	0x20000078
 80809f0:	080809ad 	.word	0x080809ad

080809f4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80809f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80809f6:	4606      	mov	r6, r0
 80809f8:	460d      	mov	r5, r1
  size_t n = 0;
 80809fa:	2400      	movs	r4, #0
 80809fc:	188f      	adds	r7, r1, r2
  while (size--) {
 80809fe:	42bd      	cmp	r5, r7
 8080a00:	d00c      	beq.n	8080a1c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8080a02:	6833      	ldr	r3, [r6, #0]
 8080a04:	4630      	mov	r0, r6
 8080a06:	689b      	ldr	r3, [r3, #8]
 8080a08:	f815 1b01 	ldrb.w	r1, [r5], #1
 8080a0c:	4798      	blx	r3
     if (chunk>=0)
 8080a0e:	1e03      	subs	r3, r0, #0
 8080a10:	db01      	blt.n	8080a16 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8080a12:	441c      	add	r4, r3
  while (size--) {
 8080a14:	e7f3      	b.n	80809fe <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8080a16:	2c00      	cmp	r4, #0
 8080a18:	bf08      	it	eq
 8080a1a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 8080a1c:	4620      	mov	r0, r4
 8080a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08080a20 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8080a20:	b570      	push	{r4, r5, r6, lr}
 8080a22:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8080a24:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8080a26:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 8080a28:	b149      	cbz	r1, 8080a3e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8080a2a:	f001 fd2b 	bl	8082484 <strlen>
 8080a2e:	682b      	ldr	r3, [r5, #0]
 8080a30:	4602      	mov	r2, r0
 8080a32:	4621      	mov	r1, r4
 8080a34:	4628      	mov	r0, r5
    }
 8080a36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 8080a3a:	68db      	ldr	r3, [r3, #12]
 8080a3c:	4718      	bx	r3
    }
 8080a3e:	bd70      	pop	{r4, r5, r6, pc}

08080a40 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 8080a40:	b508      	push	{r3, lr}
  return write(str);
 8080a42:	f7ff ffed 	bl	8080a20 <_ZN5Print5writeEPKc>
}
 8080a46:	bd08      	pop	{r3, pc}

08080a48 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 8080a48:	6803      	ldr	r3, [r0, #0]
 8080a4a:	689b      	ldr	r3, [r3, #8]
 8080a4c:	4718      	bx	r3

08080a4e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8080a4e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8080a50:	210d      	movs	r1, #13
{
 8080a52:	4605      	mov	r5, r0
  size_t n = print('\r');
 8080a54:	f7ff fff8 	bl	8080a48 <_ZN5Print5printEc>
  n += print('\n');
 8080a58:	210a      	movs	r1, #10
  size_t n = print('\r');
 8080a5a:	4604      	mov	r4, r0
  n += print('\n');
 8080a5c:	4628      	mov	r0, r5
 8080a5e:	f7ff fff3 	bl	8080a48 <_ZN5Print5printEc>
  return n;
}
 8080a62:	4420      	add	r0, r4
 8080a64:	bd38      	pop	{r3, r4, r5, pc}

08080a66 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8080a66:	b538      	push	{r3, r4, r5, lr}
 8080a68:	4605      	mov	r5, r0
  return write(str);
 8080a6a:	f7ff ffd9 	bl	8080a20 <_ZN5Print5writeEPKc>
 8080a6e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 8080a70:	4628      	mov	r0, r5
 8080a72:	f7ff ffec 	bl	8080a4e <_ZN5Print7printlnEv>
  return n;
}
 8080a76:	4420      	add	r0, r4
 8080a78:	bd38      	pop	{r3, r4, r5, pc}

08080a7a <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8080a7a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8080a7c:	2a01      	cmp	r2, #1
 8080a7e:	bf98      	it	ls
 8080a80:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 8080a82:	b530      	push	{r4, r5, lr}
 8080a84:	b08b      	sub	sp, #44	; 0x2c
 8080a86:	460c      	mov	r4, r1
  *str = '\0';
 8080a88:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 8080a8c:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 8080a8e:	4625      	mov	r5, r4
 8080a90:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 8080a94:	fb04 5312 	mls	r3, r4, r2, r5
 8080a98:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8080a9a:	2b09      	cmp	r3, #9
 8080a9c:	bf94      	ite	ls
 8080a9e:	3330      	addls	r3, #48	; 0x30
 8080aa0:	3337      	addhi	r3, #55	; 0x37
 8080aa2:	b2db      	uxtb	r3, r3
  } while(n);
 8080aa4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8080aa6:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 8080aaa:	d9f0      	bls.n	8080a8e <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 8080aac:	f7ff ffb8 	bl	8080a20 <_ZN5Print5writeEPKc>
}
 8080ab0:	b00b      	add	sp, #44	; 0x2c
 8080ab2:	bd30      	pop	{r4, r5, pc}

08080ab4 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 8080ab4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080ab8:	4605      	mov	r5, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 8080aba:	4619      	mov	r1, r3
 8080abc:	4610      	mov	r0, r2
{
 8080abe:	4692      	mov	sl, r2
 8080ac0:	461f      	mov	r7, r3
 8080ac2:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
  if (isnan(number)) return print("nan");
 8080ac6:	f001 fc37 	bl	8082338 <__aeabi_dcmpun>
 8080aca:	b140      	cbz	r0, 8080ade <_ZN5Print10printFloatEdh+0x2a>
  return write(str);
 8080acc:	4950      	ldr	r1, [pc, #320]	; (8080c10 <_ZN5Print10printFloatEdh+0x15c>)
 8080ace:	4628      	mov	r0, r5
 8080ad0:	f7ff ffa6 	bl	8080a20 <_ZN5Print5writeEPKc>
 8080ad4:	4604      	mov	r4, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 8080ad6:	4620      	mov	r0, r4
 8080ad8:	b003      	add	sp, #12
 8080ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 8080ade:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 8080ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8080ae6:	4650      	mov	r0, sl
 8080ae8:	4621      	mov	r1, r4
 8080aea:	4b4a      	ldr	r3, [pc, #296]	; (8080c14 <_ZN5Print10printFloatEdh+0x160>)
 8080aec:	f001 fc24 	bl	8082338 <__aeabi_dcmpun>
 8080af0:	b948      	cbnz	r0, 8080b06 <_ZN5Print10printFloatEdh+0x52>
 8080af2:	f04f 32ff 	mov.w	r2, #4294967295
 8080af6:	4650      	mov	r0, sl
 8080af8:	4621      	mov	r1, r4
 8080afa:	4b46      	ldr	r3, [pc, #280]	; (8080c14 <_ZN5Print10printFloatEdh+0x160>)
 8080afc:	f001 fbfe 	bl	80822fc <__aeabi_dcmple>
 8080b00:	b908      	cbnz	r0, 8080b06 <_ZN5Print10printFloatEdh+0x52>
  return write(str);
 8080b02:	4945      	ldr	r1, [pc, #276]	; (8080c18 <_ZN5Print10printFloatEdh+0x164>)
 8080b04:	e7e3      	b.n	8080ace <_ZN5Print10printFloatEdh+0x1a>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 8080b06:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8080b0a:	4650      	mov	r0, sl
 8080b0c:	4639      	mov	r1, r7
 8080b0e:	4b43      	ldr	r3, [pc, #268]	; (8080c1c <_ZN5Print10printFloatEdh+0x168>)
 8080b10:	f001 fc08 	bl	8082324 <__aeabi_dcmpgt>
 8080b14:	b108      	cbz	r0, 8080b1a <_ZN5Print10printFloatEdh+0x66>
  return write(str);
 8080b16:	4942      	ldr	r1, [pc, #264]	; (8080c20 <_ZN5Print10printFloatEdh+0x16c>)
 8080b18:	e7d9      	b.n	8080ace <_ZN5Print10printFloatEdh+0x1a>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 8080b1a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8080b1e:	4650      	mov	r0, sl
 8080b20:	4639      	mov	r1, r7
 8080b22:	4b40      	ldr	r3, [pc, #256]	; (8080c24 <_ZN5Print10printFloatEdh+0x170>)
 8080b24:	f001 fbe0 	bl	80822e8 <__aeabi_dcmplt>
 8080b28:	2800      	cmp	r0, #0
 8080b2a:	d1f4      	bne.n	8080b16 <_ZN5Print10printFloatEdh+0x62>
  if (number < 0.0)
 8080b2c:	2200      	movs	r2, #0
 8080b2e:	2300      	movs	r3, #0
 8080b30:	4650      	mov	r0, sl
 8080b32:	4639      	mov	r1, r7
 8080b34:	f001 fbd8 	bl	80822e8 <__aeabi_dcmplt>
 8080b38:	4604      	mov	r4, r0
 8080b3a:	b130      	cbz	r0, 8080b4a <_ZN5Print10printFloatEdh+0x96>
     n += print('-');
 8080b3c:	212d      	movs	r1, #45	; 0x2d
 8080b3e:	4628      	mov	r0, r5
 8080b40:	f7ff ff82 	bl	8080a48 <_ZN5Print5printEc>
 8080b44:	4604      	mov	r4, r0
     number = -number;
 8080b46:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
  size_t n = 0;
 8080b4a:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 8080b4e:	2000      	movs	r0, #0
    rounding /= 10.0;
 8080b50:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 8080b54:	4934      	ldr	r1, [pc, #208]	; (8080c28 <_ZN5Print10printFloatEdh+0x174>)
    rounding /= 10.0;
 8080b56:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8080c30 <_ZN5Print10printFloatEdh+0x17c>
  for (uint8_t i=0; i<digits; ++i)
 8080b5a:	fa5f f38b 	uxtb.w	r3, fp
 8080b5e:	429e      	cmp	r6, r3
 8080b60:	d906      	bls.n	8080b70 <_ZN5Print10printFloatEdh+0xbc>
    rounding /= 10.0;
 8080b62:	4642      	mov	r2, r8
 8080b64:	464b      	mov	r3, r9
 8080b66:	f001 fa77 	bl	8082058 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 8080b6a:	f10b 0b01 	add.w	fp, fp, #1
 8080b6e:	e7f4      	b.n	8080b5a <_ZN5Print10printFloatEdh+0xa6>
  number += rounding;
 8080b70:	463b      	mov	r3, r7
 8080b72:	4652      	mov	r2, sl
 8080b74:	f000 ff90 	bl	8081a98 <__adddf3>
 8080b78:	4689      	mov	r9, r1
 8080b7a:	4680      	mov	r8, r0
  unsigned long int_part = (unsigned long)number;
 8080b7c:	f001 fc1a 	bl	80823b4 <__aeabi_d2uiz>
 8080b80:	4607      	mov	r7, r0
  double remainder = number - (double)int_part;
 8080b82:	f001 f8c5 	bl	8081d10 <__aeabi_ui2d>
 8080b86:	4602      	mov	r2, r0
 8080b88:	460b      	mov	r3, r1
 8080b8a:	4640      	mov	r0, r8
 8080b8c:	4649      	mov	r1, r9
 8080b8e:	f000 ff81 	bl	8081a94 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 8080b92:	220a      	movs	r2, #10
 8080b94:	4680      	mov	r8, r0
 8080b96:	4689      	mov	r9, r1
 8080b98:	4628      	mov	r0, r5
 8080b9a:	4639      	mov	r1, r7
 8080b9c:	f7ff ff6d 	bl	8080a7a <_ZN5Print11printNumberEmh>
  n += print(int_part);
 8080ba0:	4404      	add	r4, r0
  if (digits > 0) {
 8080ba2:	b126      	cbz	r6, 8080bae <_ZN5Print10printFloatEdh+0xfa>
  return write(str);
 8080ba4:	4628      	mov	r0, r5
 8080ba6:	4921      	ldr	r1, [pc, #132]	; (8080c2c <_ZN5Print10printFloatEdh+0x178>)
 8080ba8:	f7ff ff3a 	bl	8080a20 <_ZN5Print5writeEPKc>
    n += print(".");
 8080bac:	4404      	add	r4, r0
    remainder *= 10.0;
 8080bae:	f04f 0a00 	mov.w	sl, #0
 8080bb2:	f8df b07c 	ldr.w	fp, [pc, #124]	; 8080c30 <_ZN5Print10printFloatEdh+0x17c>
  while (digits-- > 0)
 8080bb6:	3e01      	subs	r6, #1
 8080bb8:	b2f6      	uxtb	r6, r6
 8080bba:	2eff      	cmp	r6, #255	; 0xff
 8080bbc:	d08b      	beq.n	8080ad6 <_ZN5Print10printFloatEdh+0x22>
    remainder *= 10.0;
 8080bbe:	4652      	mov	r2, sl
 8080bc0:	465b      	mov	r3, fp
 8080bc2:	4640      	mov	r0, r8
 8080bc4:	4649      	mov	r1, r9
 8080bc6:	f001 f91d 	bl	8081e04 <__aeabi_dmul>
 8080bca:	4680      	mov	r8, r0
 8080bcc:	4689      	mov	r9, r1
    int toPrint = int(remainder);
 8080bce:	f001 fbc9 	bl	8082364 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 8080bd2:	1e07      	subs	r7, r0, #0
 8080bd4:	da19      	bge.n	8080c0a <_ZN5Print10printFloatEdh+0x156>
            t = print('-');
 8080bd6:	212d      	movs	r1, #45	; 0x2d
 8080bd8:	4628      	mov	r0, r5
 8080bda:	f7ff ff35 	bl	8080a48 <_ZN5Print5printEc>
 8080bde:	4603      	mov	r3, r0
            val = -n;
 8080be0:	4279      	negs	r1, r7
        return printNumber(val, base) + t;
 8080be2:	220a      	movs	r2, #10
 8080be4:	4628      	mov	r0, r5
 8080be6:	9301      	str	r3, [sp, #4]
 8080be8:	f7ff ff47 	bl	8080a7a <_ZN5Print11printNumberEmh>
 8080bec:	9b01      	ldr	r3, [sp, #4]
 8080bee:	4403      	add	r3, r0
    remainder -= toPrint;
 8080bf0:	4638      	mov	r0, r7
    n += print(toPrint);
 8080bf2:	441c      	add	r4, r3
    remainder -= toPrint;
 8080bf4:	f001 f89c 	bl	8081d30 <__aeabi_i2d>
 8080bf8:	4602      	mov	r2, r0
 8080bfa:	460b      	mov	r3, r1
 8080bfc:	4640      	mov	r0, r8
 8080bfe:	4649      	mov	r1, r9
 8080c00:	f000 ff48 	bl	8081a94 <__aeabi_dsub>
 8080c04:	4680      	mov	r8, r0
 8080c06:	4689      	mov	r9, r1
  while (digits-- > 0)
 8080c08:	e7d5      	b.n	8080bb6 <_ZN5Print10printFloatEdh+0x102>
            val = n;
 8080c0a:	4639      	mov	r1, r7
        size_t t = 0;
 8080c0c:	2300      	movs	r3, #0
 8080c0e:	e7e8      	b.n	8080be2 <_ZN5Print10printFloatEdh+0x12e>
 8080c10:	08082556 	.word	0x08082556
 8080c14:	7fefffff 	.word	0x7fefffff
 8080c18:	0808255a 	.word	0x0808255a
 8080c1c:	41efffff 	.word	0x41efffff
 8080c20:	0808255e 	.word	0x0808255e
 8080c24:	c1efffff 	.word	0xc1efffff
 8080c28:	3fe00000 	.word	0x3fe00000
 8080c2c:	080824f1 	.word	0x080824f1
 8080c30:	40240000 	.word	0x40240000

08080c34 <_ZN5Print7printlnEdi>:
{
 8080c34:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return printFloat(n, digits);
 8080c36:	f89d 1018 	ldrb.w	r1, [sp, #24]
{
 8080c3a:	4605      	mov	r5, r0
  return printFloat(n, digits);
 8080c3c:	9100      	str	r1, [sp, #0]
 8080c3e:	f7ff ff39 	bl	8080ab4 <_ZN5Print10printFloatEdh>
 8080c42:	4604      	mov	r4, r0
  n += println();
 8080c44:	4628      	mov	r0, r5
 8080c46:	f7ff ff02 	bl	8080a4e <_ZN5Print7printlnEv>
}
 8080c4a:	4420      	add	r0, r4
 8080c4c:	b003      	add	sp, #12
 8080c4e:	bd30      	pop	{r4, r5, pc}

08080c50 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8080c50:	4b01      	ldr	r3, [pc, #4]	; (8080c58 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8080c52:	4a02      	ldr	r2, [pc, #8]	; (8080c5c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8080c54:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 8080c56:	4770      	bx	lr
 8080c58:	200000d4 	.word	0x200000d4
 8080c5c:	08082562 	.word	0x08082562

08080c60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8080c60:	4b02      	ldr	r3, [pc, #8]	; (8080c6c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8080c62:	681a      	ldr	r2, [r3, #0]
 8080c64:	4b02      	ldr	r3, [pc, #8]	; (8080c70 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8080c66:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 8080c68:	4770      	bx	lr
 8080c6a:	bf00      	nop
 8080c6c:	2000000c 	.word	0x2000000c
 8080c70:	200000d8 	.word	0x200000d8

08080c74 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
 8080c74:	428a      	cmp	r2, r1
{
 8080c76:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
 8080c78:	d007      	beq.n	8080c8a <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
 8080c7a:	9c02      	ldr	r4, [sp, #8]
 8080c7c:	1a40      	subs	r0, r0, r1
 8080c7e:	1ae4      	subs	r4, r4, r3
 8080c80:	4360      	muls	r0, r4
 8080c82:	1a52      	subs	r2, r2, r1
 8080c84:	fb90 f0f2 	sdiv	r0, r0, r2
 8080c88:	4418      	add	r0, r3
}
 8080c8a:	bd10      	pop	{r4, pc}

08080c8c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8080c8c:	2100      	movs	r1, #0
 8080c8e:	f7ff bdd9 	b.w	8080844 <system_delay_ms>

08080c92 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8080c92:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8080c94:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 8080c96:	4604      	mov	r4, r0
      if (_M_manager)
 8080c98:	b113      	cbz	r3, 8080ca0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8080c9a:	2203      	movs	r2, #3
 8080c9c:	4601      	mov	r1, r0
 8080c9e:	4798      	blx	r3
    }
 8080ca0:	4620      	mov	r0, r4
 8080ca2:	bd10      	pop	{r4, pc}

08080ca4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8080ca4:	b510      	push	{r4, lr}
 8080ca6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080ca8:	f7ff fff3 	bl	8080c92 <_ZNSt14_Function_baseD1Ev>
 8080cac:	4620      	mov	r0, r4
 8080cae:	bd10      	pop	{r4, pc}

08080cb0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 8080cb0:	2300      	movs	r3, #0
 8080cb2:	4803      	ldr	r0, [pc, #12]	; (8080cc0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8080cb4:	4a03      	ldr	r2, [pc, #12]	; (8080cc4 <_GLOBAL__sub_I_RGB+0x14>)
 8080cb6:	4904      	ldr	r1, [pc, #16]	; (8080cc8 <_GLOBAL__sub_I_RGB+0x18>)
 8080cb8:	6083      	str	r3, [r0, #8]
 8080cba:	f000 bc61 	b.w	8081580 <__aeabi_atexit>
 8080cbe:	bf00      	nop
 8080cc0:	200000dc 	.word	0x200000dc
 8080cc4:	20000078 	.word	0x20000078
 8080cc8:	08080ca5 	.word	0x08080ca5

08080ccc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 8080ccc:	4b01      	ldr	r3, [pc, #4]	; (8080cd4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 8080cce:	6018      	str	r0, [r3, #0]
    }, nullptr);
 8080cd0:	4770      	bx	lr
 8080cd2:	bf00      	nop
 8080cd4:	20000010 	.word	0x20000010

08080cd8 <serialEventRun>:
{
 8080cd8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8080cda:	4b17      	ldr	r3, [pc, #92]	; (8080d38 <serialEventRun+0x60>)
 8080cdc:	b143      	cbz	r3, 8080cf0 <serialEventRun+0x18>
 8080cde:	f000 f961 	bl	8080fa4 <_Z16_fetch_usbserialv>
 8080ce2:	6803      	ldr	r3, [r0, #0]
 8080ce4:	691b      	ldr	r3, [r3, #16]
 8080ce6:	4798      	blx	r3
 8080ce8:	2800      	cmp	r0, #0
 8080cea:	dd01      	ble.n	8080cf0 <serialEventRun+0x18>
        serialEvent();
 8080cec:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 8080cf0:	4b12      	ldr	r3, [pc, #72]	; (8080d3c <serialEventRun+0x64>)
 8080cf2:	b143      	cbz	r3, 8080d06 <serialEventRun+0x2e>
 8080cf4:	f000 fa78 	bl	80811e8 <_Z22__fetch_global_Serial1v>
 8080cf8:	6803      	ldr	r3, [r0, #0]
 8080cfa:	691b      	ldr	r3, [r3, #16]
 8080cfc:	4798      	blx	r3
 8080cfe:	2800      	cmp	r0, #0
 8080d00:	dd01      	ble.n	8080d06 <serialEventRun+0x2e>
        serialEvent1();
 8080d02:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 8080d06:	4b0e      	ldr	r3, [pc, #56]	; (8080d40 <serialEventRun+0x68>)
 8080d08:	b10b      	cbz	r3, 8080d0e <serialEventRun+0x36>
 8080d0a:	f3af 8000 	nop.w
    if (serialEventRun4) serialEventRun4();
 8080d0e:	4b0d      	ldr	r3, [pc, #52]	; (8080d44 <serialEventRun+0x6c>)
 8080d10:	b10b      	cbz	r3, 8080d16 <serialEventRun+0x3e>
 8080d12:	f3af 8000 	nop.w
    if (serialEventRun5) serialEventRun5();
 8080d16:	4b0c      	ldr	r3, [pc, #48]	; (8080d48 <serialEventRun+0x70>)
 8080d18:	b10b      	cbz	r3, 8080d1e <serialEventRun+0x46>
 8080d1a:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8080d1e:	4b0b      	ldr	r3, [pc, #44]	; (8080d4c <serialEventRun+0x74>)
 8080d20:	b143      	cbz	r3, 8080d34 <serialEventRun+0x5c>
 8080d22:	f000 f97d 	bl	8081020 <_Z17_fetch_usbserial1v>
 8080d26:	6803      	ldr	r3, [r0, #0]
 8080d28:	691b      	ldr	r3, [r3, #16]
 8080d2a:	4798      	blx	r3
 8080d2c:	2800      	cmp	r0, #0
 8080d2e:	dd01      	ble.n	8080d34 <serialEventRun+0x5c>
        usbSerialEvent1();
 8080d30:	f3af 8000 	nop.w
}
 8080d34:	bd08      	pop	{r3, pc}
 8080d36:	bf00      	nop
	...

08080d50 <_post_loop>:
{
 8080d50:	b508      	push	{r3, lr}
	serialEventRun();
 8080d52:	f7ff ffc1 	bl	8080cd8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8080d56:	f7ff fc6d 	bl	8080634 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8080d5a:	4b01      	ldr	r3, [pc, #4]	; (8080d60 <_post_loop+0x10>)
 8080d5c:	6018      	str	r0, [r3, #0]
}
 8080d5e:	bd08      	pop	{r3, pc}
 8080d60:	20000590 	.word	0x20000590

08080d64 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8080d64:	4802      	ldr	r0, [pc, #8]	; (8080d70 <_Z33system_initialize_user_backup_ramv+0xc>)
 8080d66:	4a03      	ldr	r2, [pc, #12]	; (8080d74 <_Z33system_initialize_user_backup_ramv+0x10>)
 8080d68:	4903      	ldr	r1, [pc, #12]	; (8080d78 <_Z33system_initialize_user_backup_ramv+0x14>)
 8080d6a:	1a12      	subs	r2, r2, r0
 8080d6c:	f001 bb50 	b.w	8082410 <memcpy>
 8080d70:	40024000 	.word	0x40024000
 8080d74:	40024004 	.word	0x40024004
 8080d78:	08082730 	.word	0x08082730

08080d7c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8080d7c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8080d7e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8080d80:	461a      	mov	r2, r3
 8080d82:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8080d86:	9300      	str	r3, [sp, #0]
 8080d88:	f7ff fd6e 	bl	8080868 <system_ctrl_set_result>
}
 8080d8c:	b003      	add	sp, #12
 8080d8e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08080d94 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 8080d94:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8080d96:	8843      	ldrh	r3, [r0, #2]
 8080d98:	2b0a      	cmp	r3, #10
 8080d9a:	d008      	beq.n	8080dae <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8080d9c:	2b50      	cmp	r3, #80	; 0x50
 8080d9e:	d10b      	bne.n	8080db8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 8080da0:	4b09      	ldr	r3, [pc, #36]	; (8080dc8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8080da2:	681b      	ldr	r3, [r3, #0]
 8080da4:	b14b      	cbz	r3, 8080dba <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 8080da6:	b003      	add	sp, #12
 8080da8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 8080dac:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 8080dae:	f7ff ffe5 	bl	8080d7c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 8080db2:	b003      	add	sp, #12
 8080db4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8080db8:	2300      	movs	r3, #0
 8080dba:	461a      	mov	r2, r3
 8080dbc:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8080dc0:	9300      	str	r3, [sp, #0]
 8080dc2:	f7ff fd51 	bl	8080868 <system_ctrl_set_result>
}
 8080dc6:	e7f4      	b.n	8080db2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 8080dc8:	200000f0 	.word	0x200000f0

08080dcc <module_user_init_hook>:
{
 8080dcc:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8080dce:	4c12      	ldr	r4, [pc, #72]	; (8080e18 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 8080dd0:	2100      	movs	r1, #0
 8080dd2:	4812      	ldr	r0, [pc, #72]	; (8080e1c <module_user_init_hook+0x50>)
 8080dd4:	f7ff fdca 	bl	808096c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8080dd8:	4d11      	ldr	r5, [pc, #68]	; (8080e20 <module_user_init_hook+0x54>)
 8080dda:	6823      	ldr	r3, [r4, #0]
 8080ddc:	42ab      	cmp	r3, r5
 8080dde:	bf0c      	ite	eq
 8080de0:	2201      	moveq	r2, #1
 8080de2:	2200      	movne	r2, #0
 8080de4:	4b0f      	ldr	r3, [pc, #60]	; (8080e24 <module_user_init_hook+0x58>)
 8080de6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8080de8:	d002      	beq.n	8080df0 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 8080dea:	f7ff ffbb 	bl	8080d64 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8080dee:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8080df0:	f7ff fc18 	bl	8080624 <HAL_RNG_GetRandomNumber>
 8080df4:	4604      	mov	r4, r0
    srand(seed);
 8080df6:	f001 fb21 	bl	808243c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8080dfa:	4b0b      	ldr	r3, [pc, #44]	; (8080e28 <module_user_init_hook+0x5c>)
 8080dfc:	b113      	cbz	r3, 8080e04 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 8080dfe:	4620      	mov	r0, r4
 8080e00:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8080e04:	2100      	movs	r1, #0
 8080e06:	4808      	ldr	r0, [pc, #32]	; (8080e28 <module_user_init_hook+0x5c>)
 8080e08:	f7ff fd98 	bl	808093c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8080e0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8080e10:	2100      	movs	r1, #0
 8080e12:	4806      	ldr	r0, [pc, #24]	; (8080e2c <module_user_init_hook+0x60>)
 8080e14:	f7ff bd1e 	b.w	8080854 <system_ctrl_set_app_request_handler>
 8080e18:	40024000 	.word	0x40024000
 8080e1c:	08080ccd 	.word	0x08080ccd
 8080e20:	9a271c1e 	.word	0x9a271c1e
 8080e24:	200000ec 	.word	0x200000ec
 8080e28:	00000000 	.word	0x00000000
 8080e2c:	08080d95 	.word	0x08080d95

08080e30 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8080e30:	4770      	bx	lr

08080e32 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8080e32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080e34:	460e      	mov	r6, r1
 8080e36:	2400      	movs	r4, #0
 8080e38:	f100 0708 	add.w	r7, r0, #8
 8080e3c:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 8080e3e:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 8080e42:	220a      	movs	r2, #10
 8080e44:	4630      	mov	r0, r6
 8080e46:	f7ff fe18 	bl	8080a7a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8080e4a:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8080e4c:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 8080e4e:	d101      	bne.n	8080e54 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 8080e50:	4620      	mov	r0, r4
 8080e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 8080e54:	2c00      	cmp	r4, #0
 8080e56:	d0f2      	beq.n	8080e3e <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8080e58:	212e      	movs	r1, #46	; 0x2e
 8080e5a:	4630      	mov	r0, r6
 8080e5c:	f7ff fdf4 	bl	8080a48 <_ZN5Print5printEc>
 8080e60:	4404      	add	r4, r0
 8080e62:	e7ec      	b.n	8080e3e <_ZNK9IPAddress7printToER5Print+0xc>

08080e64 <_ZN9IPAddressD0Ev>:
 8080e64:	b510      	push	{r4, lr}
 8080e66:	4604      	mov	r4, r0
 8080e68:	2108      	movs	r1, #8
 8080e6a:	f000 fb8e 	bl	808158a <_ZdlPvj>
 8080e6e:	4620      	mov	r0, r4
 8080e70:	bd10      	pop	{r4, pc}
	...

08080e74 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 8080e74:	4a02      	ldr	r2, [pc, #8]	; (8080e80 <_ZN9IPAddressC1Ev+0xc>)
 8080e76:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8080e78:	2200      	movs	r2, #0
 8080e7a:	6042      	str	r2, [r0, #4]
}
 8080e7c:	4770      	bx	lr
 8080e7e:	bf00      	nop
 8080e80:	0808258c 	.word	0x0808258c

08080e84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 8080e84:	4a02      	ldr	r2, [pc, #8]	; (8080e90 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8080e86:	6002      	str	r2, [r0, #0]
    memcpy(&this->address, &address, sizeof(address));
 8080e88:	680a      	ldr	r2, [r1, #0]
 8080e8a:	6042      	str	r2, [r0, #4]
}
 8080e8c:	4770      	bx	lr
 8080e8e:	bf00      	nop
 8080e90:	0808258c 	.word	0x0808258c

08080e94 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 8080e94:	4a01      	ldr	r2, [pc, #4]	; (8080e9c <_ZN9IPAddressC1Em+0x8>)
    address.ipv4 = addr;
 8080e96:	e9c0 2100 	strd	r2, r1, [r0]
}
 8080e9a:	4770      	bx	lr
 8080e9c:	0808258c 	.word	0x0808258c

08080ea0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 8080ea0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8080ea2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8080ea6:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8080eaa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8080eae:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 8080eb2:	6044      	str	r4, [r0, #4]
}
 8080eb4:	bd10      	pop	{r4, pc}
	...

08080eb8 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8080eb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080eba:	4d04      	ldr	r5, [pc, #16]	; (8080ecc <_ZN9IPAddressC1Ehhhh+0x14>)
 8080ebc:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8080ebe:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8080ec2:	9500      	str	r5, [sp, #0]
 8080ec4:	f7ff ffec 	bl	8080ea0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8080ec8:	b003      	add	sp, #12
 8080eca:	bd30      	pop	{r4, r5, pc}
 8080ecc:	0808258c 	.word	0x0808258c

08080ed0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8080ed0:	7441      	strb	r1, [r0, #17]
}
 8080ed2:	4770      	bx	lr

08080ed4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8080ed4:	4770      	bx	lr

08080ed6 <_ZN9USBSerial4readEv>:
{
 8080ed6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8080ed8:	2100      	movs	r1, #0
 8080eda:	7c00      	ldrb	r0, [r0, #16]
 8080edc:	f7ff fc92 	bl	8080804 <HAL_USB_USART_Receive_Data>
}
 8080ee0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8080ee4:	bd08      	pop	{r3, pc}

08080ee6 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 8080ee6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8080ee8:	2101      	movs	r1, #1
 8080eea:	7c00      	ldrb	r0, [r0, #16]
 8080eec:	f7ff fc8a 	bl	8080804 <HAL_USB_USART_Receive_Data>
}
 8080ef0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8080ef4:	bd08      	pop	{r3, pc}

08080ef6 <_ZN9USBSerial17availableForWriteEv>:
{
 8080ef6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8080ef8:	7c00      	ldrb	r0, [r0, #16]
 8080efa:	f7ff fc7b 	bl	80807f4 <HAL_USB_USART_Available_Data_For_Write>
}
 8080efe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8080f02:	bd08      	pop	{r3, pc}

08080f04 <_ZN9USBSerial9availableEv>:
{
 8080f04:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8080f06:	7c00      	ldrb	r0, [r0, #16]
 8080f08:	f7ff fc6c 	bl	80807e4 <HAL_USB_USART_Available_Data>
}
 8080f0c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8080f10:	bd08      	pop	{r3, pc}

08080f12 <_ZN9USBSerial5writeEh>:
{
 8080f12:	b538      	push	{r3, r4, r5, lr}
 8080f14:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8080f16:	7c00      	ldrb	r0, [r0, #16]
{
 8080f18:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8080f1a:	f7ff fc6b 	bl	80807f4 <HAL_USB_USART_Available_Data_For_Write>
 8080f1e:	2800      	cmp	r0, #0
 8080f20:	dc01      	bgt.n	8080f26 <_ZN9USBSerial5writeEh+0x14>
 8080f22:	7c60      	ldrb	r0, [r4, #17]
 8080f24:	b128      	cbz	r0, 8080f32 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8080f26:	4629      	mov	r1, r5
 8080f28:	7c20      	ldrb	r0, [r4, #16]
 8080f2a:	f7ff fc73 	bl	8080814 <HAL_USB_USART_Send_Data>
 8080f2e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 8080f32:	bd38      	pop	{r3, r4, r5, pc}

08080f34 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 8080f34:	7c00      	ldrb	r0, [r0, #16]
 8080f36:	f7ff bc75 	b.w	8080824 <HAL_USB_USART_Flush_Data>

08080f3a <_ZN9USBSerialD0Ev>:
 8080f3a:	b510      	push	{r4, lr}
 8080f3c:	4604      	mov	r4, r0
 8080f3e:	2114      	movs	r1, #20
 8080f40:	f000 fb23 	bl	808158a <_ZdlPvj>
 8080f44:	4620      	mov	r0, r4
 8080f46:	bd10      	pop	{r4, pc}

08080f48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8080f48:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8080f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080f4e:	4604      	mov	r4, r0
 8080f50:	4608      	mov	r0, r1
 8080f52:	2100      	movs	r1, #0
 8080f54:	e9c4 1301 	strd	r1, r3, [r4, #4]
 8080f58:	4b04      	ldr	r3, [pc, #16]	; (8080f6c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 8080f5a:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8080f5c:	6023      	str	r3, [r4, #0]
  _blocking = true;
 8080f5e:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 8080f60:	4611      	mov	r1, r2
  _blocking = true;
 8080f62:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 8080f64:	f7ff fc2e 	bl	80807c4 <HAL_USB_USART_Init>
}
 8080f68:	4620      	mov	r0, r4
 8080f6a:	bd10      	pop	{r4, pc}
 8080f6c:	080825a0 	.word	0x080825a0

08080f70 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 8080f70:	2200      	movs	r2, #0
 8080f72:	7c00      	ldrb	r0, [r0, #16]
 8080f74:	f7ff bc2e 	b.w	80807d4 <HAL_USB_USART_Begin>

08080f78 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8080f78:	b510      	push	{r4, lr}
 8080f7a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8080f7c:	2214      	movs	r2, #20
 8080f7e:	2100      	movs	r1, #0
 8080f80:	f001 fa54 	bl	808242c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8080f84:	4b05      	ldr	r3, [pc, #20]	; (8080f9c <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8080f86:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 8080f88:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8080f8a:	4b05      	ldr	r3, [pc, #20]	; (8080fa0 <_Z19acquireSerialBufferv+0x28>)
 8080f8c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8080f8e:	f240 1301 	movw	r3, #257	; 0x101
 8080f92:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8080f94:	2381      	movs	r3, #129	; 0x81
 8080f96:	8223      	strh	r3, [r4, #16]
}
 8080f98:	bd10      	pop	{r4, pc}
 8080f9a:	bf00      	nop
 8080f9c:	20000124 	.word	0x20000124
 8080fa0:	20000225 	.word	0x20000225

08080fa4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8080fa4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8080fa6:	4d0f      	ldr	r5, [pc, #60]	; (8080fe4 <_Z16_fetch_usbserialv+0x40>)
{
 8080fa8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8080faa:	a801      	add	r0, sp, #4
 8080fac:	f7ff ffe4 	bl	8080f78 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8080fb0:	7829      	ldrb	r1, [r5, #0]
 8080fb2:	f3bf 8f5b 	dmb	ish
 8080fb6:	f011 0401 	ands.w	r4, r1, #1
 8080fba:	d110      	bne.n	8080fde <_Z16_fetch_usbserialv+0x3a>
 8080fbc:	4628      	mov	r0, r5
 8080fbe:	f7ff f870 	bl	80800a2 <__cxa_guard_acquire>
 8080fc2:	b160      	cbz	r0, 8080fde <_Z16_fetch_usbserialv+0x3a>
 8080fc4:	4621      	mov	r1, r4
 8080fc6:	aa01      	add	r2, sp, #4
 8080fc8:	4807      	ldr	r0, [pc, #28]	; (8080fe8 <_Z16_fetch_usbserialv+0x44>)
 8080fca:	f7ff ffbd 	bl	8080f48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8080fce:	4628      	mov	r0, r5
 8080fd0:	f7ff f86c 	bl	80800ac <__cxa_guard_release>
 8080fd4:	4a05      	ldr	r2, [pc, #20]	; (8080fec <_Z16_fetch_usbserialv+0x48>)
 8080fd6:	4906      	ldr	r1, [pc, #24]	; (8080ff0 <_Z16_fetch_usbserialv+0x4c>)
 8080fd8:	4803      	ldr	r0, [pc, #12]	; (8080fe8 <_Z16_fetch_usbserialv+0x44>)
 8080fda:	f000 fad1 	bl	8081580 <__aeabi_atexit>
	return _usbserial;
}
 8080fde:	4802      	ldr	r0, [pc, #8]	; (8080fe8 <_Z16_fetch_usbserialv+0x44>)
 8080fe0:	b007      	add	sp, #28
 8080fe2:	bd30      	pop	{r4, r5, pc}
 8080fe4:	200000f4 	.word	0x200000f4
 8080fe8:	200000fc 	.word	0x200000fc
 8080fec:	20000078 	.word	0x20000078
 8080ff0:	08080ed5 	.word	0x08080ed5

08080ff4 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8080ff4:	b510      	push	{r4, lr}
 8080ff6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8080ff8:	2214      	movs	r2, #20
 8080ffa:	2100      	movs	r1, #0
 8080ffc:	f001 fa16 	bl	808242c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8081000:	4b05      	ldr	r3, [pc, #20]	; (8081018 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8081002:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 8081004:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8081006:	4b05      	ldr	r3, [pc, #20]	; (808101c <_Z23acquireUSBSerial1Bufferv+0x28>)
 8081008:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808100a:	f240 1301 	movw	r3, #257	; 0x101
 808100e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8081010:	2381      	movs	r3, #129	; 0x81
 8081012:	8223      	strh	r3, [r4, #16]
}
 8081014:	bd10      	pop	{r4, pc}
 8081016:	bf00      	nop
 8081018:	200002a6 	.word	0x200002a6
 808101c:	200003a7 	.word	0x200003a7

08081020 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8081020:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8081022:	4c0f      	ldr	r4, [pc, #60]	; (8081060 <_Z17_fetch_usbserial1v+0x40>)
{
 8081024:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8081026:	a801      	add	r0, sp, #4
 8081028:	f7ff ffe4 	bl	8080ff4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808102c:	7823      	ldrb	r3, [r4, #0]
 808102e:	f3bf 8f5b 	dmb	ish
 8081032:	07db      	lsls	r3, r3, #31
 8081034:	d410      	bmi.n	8081058 <_Z17_fetch_usbserial1v+0x38>
 8081036:	4620      	mov	r0, r4
 8081038:	f7ff f833 	bl	80800a2 <__cxa_guard_acquire>
 808103c:	b160      	cbz	r0, 8081058 <_Z17_fetch_usbserial1v+0x38>
 808103e:	2101      	movs	r1, #1
 8081040:	aa01      	add	r2, sp, #4
 8081042:	4808      	ldr	r0, [pc, #32]	; (8081064 <_Z17_fetch_usbserial1v+0x44>)
 8081044:	f7ff ff80 	bl	8080f48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8081048:	4620      	mov	r0, r4
 808104a:	f7ff f82f 	bl	80800ac <__cxa_guard_release>
 808104e:	4a06      	ldr	r2, [pc, #24]	; (8081068 <_Z17_fetch_usbserial1v+0x48>)
 8081050:	4906      	ldr	r1, [pc, #24]	; (808106c <_Z17_fetch_usbserial1v+0x4c>)
 8081052:	4804      	ldr	r0, [pc, #16]	; (8081064 <_Z17_fetch_usbserial1v+0x44>)
 8081054:	f000 fa94 	bl	8081580 <__aeabi_atexit>
  return _usbserial1;
}
 8081058:	4802      	ldr	r0, [pc, #8]	; (8081064 <_Z17_fetch_usbserial1v+0x44>)
 808105a:	b006      	add	sp, #24
 808105c:	bd10      	pop	{r4, pc}
 808105e:	bf00      	nop
 8081060:	200000f8 	.word	0x200000f8
 8081064:	20000110 	.word	0x20000110
 8081068:	20000078 	.word	0x20000078
 808106c:	08080ed5 	.word	0x08080ed5

08081070 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8081070:	2200      	movs	r2, #0
 8081072:	6840      	ldr	r0, [r0, #4]
 8081074:	4611      	mov	r1, r2
 8081076:	f7ff bc19 	b.w	80808ac <network_ready>

0808107a <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808107a:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        HAL_IPAddress ip = {0};
 808107c:	2600      	movs	r6, #0
    IPAddress resolve(const char* name)
 808107e:	b085      	sub	sp, #20
 8081080:	4604      	mov	r4, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8081082:	4610      	mov	r0, r2
    IPAddress resolve(const char* name)
 8081084:	460f      	mov	r7, r1
 8081086:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 8081088:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808108a:	f001 f9fb 	bl	8082484 <strlen>
 808108e:	687b      	ldr	r3, [r7, #4]
 8081090:	b281      	uxth	r1, r0
 8081092:	9600      	str	r6, [sp, #0]
 8081094:	4628      	mov	r0, r5
 8081096:	aa03      	add	r2, sp, #12
 8081098:	f7ff fb8c 	bl	80807b4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808109c:	b130      	cbz	r0, 80810ac <_ZN5spark13CellularClass7resolveEPKc+0x32>
 808109e:	4631      	mov	r1, r6
 80810a0:	4620      	mov	r0, r4
 80810a2:	f7ff fef7 	bl	8080e94 <_ZN9IPAddressC1Em>
    }
 80810a6:	4620      	mov	r0, r4
 80810a8:	b005      	add	sp, #20
 80810aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80810ac:	4620      	mov	r0, r4
 80810ae:	a903      	add	r1, sp, #12
 80810b0:	f7ff fee8 	bl	8080e84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80810b4:	e7f7      	b.n	80810a6 <_ZN5spark13CellularClass7resolveEPKc+0x2c>

080810b6 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80810b6:	2200      	movs	r2, #0
 80810b8:	6840      	ldr	r0, [r0, #4]
 80810ba:	4611      	mov	r1, r2
 80810bc:	f7ff bc16 	b.w	80808ec <network_listening>

080810c0 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80810c0:	2200      	movs	r2, #0
 80810c2:	6840      	ldr	r0, [r0, #4]
 80810c4:	4611      	mov	r1, r2
 80810c6:	f7ff bc21 	b.w	808090c <network_get_listen_timeout>

080810ca <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80810ca:	2200      	movs	r2, #0
 80810cc:	6840      	ldr	r0, [r0, #4]
 80810ce:	f7ff bc15 	b.w	80808fc <network_set_listen_timeout>

080810d2 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80810d2:	2200      	movs	r2, #0
 80810d4:	6840      	ldr	r0, [r0, #4]
 80810d6:	f081 0101 	eor.w	r1, r1, #1
 80810da:	f7ff bbff 	b.w	80808dc <network_listen>

080810de <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80810de:	2300      	movs	r3, #0
 80810e0:	6840      	ldr	r0, [r0, #4]
 80810e2:	461a      	mov	r2, r3
 80810e4:	4619      	mov	r1, r3
 80810e6:	f7ff bbf1 	b.w	80808cc <network_off>

080810ea <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80810ea:	2300      	movs	r3, #0
 80810ec:	6840      	ldr	r0, [r0, #4]
 80810ee:	461a      	mov	r2, r3
 80810f0:	4619      	mov	r1, r3
 80810f2:	f7ff bbe3 	b.w	80808bc <network_on>

080810f6 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80810f6:	2200      	movs	r2, #0
 80810f8:	6840      	ldr	r0, [r0, #4]
 80810fa:	4611      	mov	r1, r2
 80810fc:	f7ff bbc6 	b.w	808088c <network_connecting>

08081100 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8081100:	2200      	movs	r2, #0
 8081102:	2102      	movs	r1, #2
 8081104:	6840      	ldr	r0, [r0, #4]
 8081106:	f7ff bbc9 	b.w	808089c <network_disconnect>

0808110a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 808110a:	2300      	movs	r3, #0
 808110c:	6840      	ldr	r0, [r0, #4]
 808110e:	461a      	mov	r2, r3
 8081110:	f7ff bbb4 	b.w	808087c <network_connect>

08081114 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8081114:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8081116:	2428      	movs	r4, #40	; 0x28
 8081118:	4b07      	ldr	r3, [pc, #28]	; (8081138 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 808111a:	4622      	mov	r2, r4
 808111c:	4618      	mov	r0, r3
 808111e:	2100      	movs	r1, #0
 8081120:	f001 f984 	bl	808242c <memset>
        cid = -1;
 8081124:	f04f 32ff 	mov.w	r2, #4294967295
 8081128:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 808112a:	2204      	movs	r2, #4
 808112c:	4b03      	ldr	r3, [pc, #12]	; (808113c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 808112e:	8004      	strh	r4, [r0, #0]
 8081130:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8081132:	4a03      	ldr	r2, [pc, #12]	; (8081140 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 8081134:	601a      	str	r2, [r3, #0]
 8081136:	bd10      	pop	{r4, pc}
 8081138:	20000430 	.word	0x20000430
 808113c:	20000428 	.word	0x20000428
 8081140:	080825d0 	.word	0x080825d0

08081144 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 8081144:	4770      	bx	lr

08081146 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8081146:	7441      	strb	r1, [r0, #17]
}
 8081148:	4770      	bx	lr

0808114a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 808114a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 808114c:	7c00      	ldrb	r0, [r0, #16]
 808114e:	f7ff fac1 	bl	80806d4 <hal_usart_available_data_for_write>
}
 8081152:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8081156:	bd08      	pop	{r3, pc}

08081158 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 8081158:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 808115a:	7c00      	ldrb	r0, [r0, #16]
 808115c:	f7ff fa92 	bl	8080684 <hal_usart_available>
}
 8081160:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8081164:	bd08      	pop	{r3, pc}

08081166 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 8081166:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 8081168:	7c00      	ldrb	r0, [r0, #16]
 808116a:	f7ff fa9b 	bl	80806a4 <hal_usart_peek>
}
 808116e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8081172:	bd08      	pop	{r3, pc}

08081174 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 8081174:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 8081176:	7c00      	ldrb	r0, [r0, #16]
 8081178:	f7ff fa8c 	bl	8080694 <hal_usart_read>
}
 808117c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8081180:	bd08      	pop	{r3, pc}

08081182 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 8081182:	7c00      	ldrb	r0, [r0, #16]
 8081184:	f7ff ba96 	b.w	80806b4 <hal_usart_flush>

08081188 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8081188:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 808118a:	7c46      	ldrb	r6, [r0, #17]
{
 808118c:	4604      	mov	r4, r0
 808118e:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8081190:	b12e      	cbz	r6, 808119e <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 8081192:	4629      	mov	r1, r5
 8081194:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8081196:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 808119a:	f7ff ba6b 	b.w	8080674 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 808119e:	7c00      	ldrb	r0, [r0, #16]
 80811a0:	f7ff fa98 	bl	80806d4 <hal_usart_available_data_for_write>
 80811a4:	2800      	cmp	r0, #0
 80811a6:	dcf4      	bgt.n	8081192 <_ZN11USARTSerial5writeEh+0xa>
}
 80811a8:	4630      	mov	r0, r6
 80811aa:	bd70      	pop	{r4, r5, r6, pc}

080811ac <_ZN11USARTSerialD0Ev>:
 80811ac:	b510      	push	{r4, lr}
 80811ae:	4604      	mov	r4, r0
 80811b0:	2114      	movs	r1, #20
 80811b2:	f000 f9ea 	bl	808158a <_ZdlPvj>
 80811b6:	4620      	mov	r0, r4
 80811b8:	bd10      	pop	{r4, pc}
	...

080811bc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80811bc:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80811c0:	b510      	push	{r4, lr}
 80811c2:	4604      	mov	r4, r0
 80811c4:	4608      	mov	r0, r1
 80811c6:	4611      	mov	r1, r2
 80811c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80811cc:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80811d0:	4a04      	ldr	r2, [pc, #16]	; (80811e4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80811d2:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80811d4:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80811d6:	2201      	movs	r2, #1
 80811d8:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80811da:	461a      	mov	r2, r3
 80811dc:	f7ff fa42 	bl	8080664 <hal_usart_init>
}
 80811e0:	4620      	mov	r0, r4
 80811e2:	bd10      	pop	{r4, pc}
 80811e4:	0808260c 	.word	0x0808260c

080811e8 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80811e8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80811ea:	4d0d      	ldr	r5, [pc, #52]	; (8081220 <_Z22__fetch_global_Serial1v+0x38>)
 80811ec:	7829      	ldrb	r1, [r5, #0]
 80811ee:	f3bf 8f5b 	dmb	ish
 80811f2:	f011 0401 	ands.w	r4, r1, #1
 80811f6:	d111      	bne.n	808121c <_Z22__fetch_global_Serial1v+0x34>
 80811f8:	4628      	mov	r0, r5
 80811fa:	f7fe ff52 	bl	80800a2 <__cxa_guard_acquire>
 80811fe:	b168      	cbz	r0, 808121c <_Z22__fetch_global_Serial1v+0x34>
 8081200:	4621      	mov	r1, r4
 8081202:	4a08      	ldr	r2, [pc, #32]	; (8081224 <_Z22__fetch_global_Serial1v+0x3c>)
 8081204:	4b08      	ldr	r3, [pc, #32]	; (8081228 <_Z22__fetch_global_Serial1v+0x40>)
 8081206:	4809      	ldr	r0, [pc, #36]	; (808122c <_Z22__fetch_global_Serial1v+0x44>)
 8081208:	f7ff ffd8 	bl	80811bc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 808120c:	4628      	mov	r0, r5
 808120e:	f7fe ff4d 	bl	80800ac <__cxa_guard_release>
 8081212:	4a07      	ldr	r2, [pc, #28]	; (8081230 <_Z22__fetch_global_Serial1v+0x48>)
 8081214:	4907      	ldr	r1, [pc, #28]	; (8081234 <_Z22__fetch_global_Serial1v+0x4c>)
 8081216:	4805      	ldr	r0, [pc, #20]	; (808122c <_Z22__fetch_global_Serial1v+0x44>)
 8081218:	f000 f9b2 	bl	8081580 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 808121c:	4803      	ldr	r0, [pc, #12]	; (808122c <_Z22__fetch_global_Serial1v+0x44>)
 808121e:	bd38      	pop	{r3, r4, r5, pc}
 8081220:	20000458 	.word	0x20000458
 8081224:	2000045c 	.word	0x2000045c
 8081228:	200004e0 	.word	0x200004e0
 808122c:	20000564 	.word	0x20000564
 8081230:	20000078 	.word	0x20000078
 8081234:	08081145 	.word	0x08081145

08081238 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 8081238:	4770      	bx	lr

0808123a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 808123a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808123c:	4606      	mov	r6, r0
 808123e:	4615      	mov	r5, r2
 8081240:	460c      	mov	r4, r1
 8081242:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8081244:	42bc      	cmp	r4, r7
 8081246:	d006      	beq.n	8081256 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8081248:	6833      	ldr	r3, [r6, #0]
 808124a:	4630      	mov	r0, r6
 808124c:	689b      	ldr	r3, [r3, #8]
 808124e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8081252:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 8081254:	e7f6      	b.n	8081244 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 8081256:	4628      	mov	r0, r5
 8081258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808125a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 808125a:	2200      	movs	r2, #0
 808125c:	7c00      	ldrb	r0, [r0, #16]
 808125e:	f7ff ba59 	b.w	8080714 <hal_i2c_write>

08081262 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 8081262:	2100      	movs	r1, #0
 8081264:	7c00      	ldrb	r0, [r0, #16]
 8081266:	f7ff ba5d 	b.w	8080724 <hal_i2c_available>

0808126a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 808126a:	2100      	movs	r1, #0
 808126c:	7c00      	ldrb	r0, [r0, #16]
 808126e:	f7ff ba61 	b.w	8080734 <hal_i2c_read>

08081272 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 8081272:	2100      	movs	r1, #0
 8081274:	7c00      	ldrb	r0, [r0, #16]
 8081276:	f7ff ba65 	b.w	8080744 <hal_i2c_peek>

0808127a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 808127a:	2100      	movs	r1, #0
 808127c:	7c00      	ldrb	r0, [r0, #16]
 808127e:	f7ff ba69 	b.w	8080754 <hal_i2c_flush>

08081282 <_ZN7TwoWireD0Ev>:
 8081282:	b510      	push	{r4, lr}
 8081284:	4604      	mov	r4, r0
 8081286:	2114      	movs	r1, #20
 8081288:	f000 f97f 	bl	808158a <_ZdlPvj>
 808128c:	4620      	mov	r0, r4
 808128e:	bd10      	pop	{r4, pc}

08081290 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 8081290:	b510      	push	{r4, lr}
 8081292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8081296:	4604      	mov	r4, r0
 8081298:	4608      	mov	r0, r1
 808129a:	2100      	movs	r1, #0
 808129c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80812a0:	4b03      	ldr	r3, [pc, #12]	; (80812b0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80812a2:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80812a4:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80812a6:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80812a8:	f7ff fa64 	bl	8080774 <hal_i2c_init>
}
 80812ac:	4620      	mov	r0, r4
 80812ae:	bd10      	pop	{r4, pc}
 80812b0:	0808263c 	.word	0x0808263c

080812b4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80812b4:	2300      	movs	r3, #0
 80812b6:	7c00      	ldrb	r0, [r0, #16]
 80812b8:	461a      	mov	r2, r3
 80812ba:	4619      	mov	r1, r3
 80812bc:	f7ff ba12 	b.w	80806e4 <hal_i2c_begin>

080812c0 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 80812c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 80812c2:	2200      	movs	r2, #0
 80812c4:	2314      	movs	r3, #20
 80812c6:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80812ca:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 80812ce:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 80812d0:	7c00      	ldrb	r0, [r0, #16]
 80812d2:	f88d 3008 	strb.w	r3, [sp, #8]
 80812d6:	684b      	ldr	r3, [r1, #4]
 80812d8:	9303      	str	r3, [sp, #12]
 80812da:	68cb      	ldr	r3, [r1, #12]
 80812dc:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 80812de:	7a0b      	ldrb	r3, [r1, #8]
 80812e0:	a901      	add	r1, sp, #4
 80812e2:	9305      	str	r3, [sp, #20]
 80812e4:	f7ff fa4e 	bl	8080784 <hal_i2c_request_ex>
}
 80812e8:	b007      	add	sp, #28
 80812ea:	f85d fb04 	ldr.w	pc, [sp], #4

080812ee <_ZN7TwoWire11requestFromEhjh>:
{
 80812ee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 80812f0:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80812f2:	f88d 1000 	strb.w	r1, [sp]
 80812f6:	f04f 0164 	mov.w	r1, #100	; 0x64
 80812fa:	bf18      	it	ne
 80812fc:	2301      	movne	r3, #1
 80812fe:	9103      	str	r1, [sp, #12]
 8081300:	4669      	mov	r1, sp
    size_ = size;
 8081302:	9201      	str	r2, [sp, #4]
 8081304:	f88d 3008 	strb.w	r3, [sp, #8]
 8081308:	f7ff ffda 	bl	80812c0 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 808130c:	b005      	add	sp, #20
 808130e:	f85d fb04 	ldr.w	pc, [sp], #4

08081312 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 8081312:	2301      	movs	r3, #1
 8081314:	f7ff bfeb 	b.w	80812ee <_ZN7TwoWire11requestFromEhjh>

08081318 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 8081318:	2200      	movs	r2, #0
 808131a:	7c00      	ldrb	r0, [r0, #16]
 808131c:	f7ff b9ea 	b.w	80806f4 <hal_i2c_begin_transmission>

08081320 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 8081320:	2200      	movs	r2, #0
 8081322:	7c00      	ldrb	r0, [r0, #16]
 8081324:	f7ff b9ee 	b.w	8080704 <hal_i2c_end_transmission>

08081328 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 8081328:	2101      	movs	r1, #1
 808132a:	f7ff bff9 	b.w	8081320 <_ZN7TwoWire15endTransmissionEh>

0808132e <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 808132e:	2300      	movs	r3, #0
 8081330:	6840      	ldr	r0, [r0, #4]
 8081332:	461a      	mov	r2, r3
 8081334:	f7ff baa2 	b.w	808087c <network_connect>

08081338 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8081338:	2200      	movs	r2, #0
 808133a:	2102      	movs	r1, #2
 808133c:	6840      	ldr	r0, [r0, #4]
 808133e:	f7ff baad 	b.w	808089c <network_disconnect>

08081342 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8081342:	2200      	movs	r2, #0
 8081344:	6840      	ldr	r0, [r0, #4]
 8081346:	4611      	mov	r1, r2
 8081348:	f7ff baa0 	b.w	808088c <network_connecting>

0808134c <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 808134c:	2200      	movs	r2, #0
 808134e:	6840      	ldr	r0, [r0, #4]
 8081350:	4611      	mov	r1, r2
 8081352:	f7ff baab 	b.w	80808ac <network_ready>

08081356 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8081356:	2300      	movs	r3, #0
 8081358:	6840      	ldr	r0, [r0, #4]
 808135a:	461a      	mov	r2, r3
 808135c:	4619      	mov	r1, r3
 808135e:	f7ff baad 	b.w	80808bc <network_on>

08081362 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8081362:	2300      	movs	r3, #0
 8081364:	6840      	ldr	r0, [r0, #4]
 8081366:	461a      	mov	r2, r3
 8081368:	4619      	mov	r1, r3
 808136a:	f7ff baaf 	b.w	80808cc <network_off>

0808136e <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 808136e:	2100      	movs	r1, #0
 8081370:	6840      	ldr	r0, [r0, #4]
 8081372:	f7ff bad3 	b.w	808091c <network_is_on>

08081376 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 8081376:	2100      	movs	r1, #0
 8081378:	6840      	ldr	r0, [r0, #4]
 808137a:	f7ff bad7 	b.w	808092c <network_is_off>

0808137e <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 808137e:	2200      	movs	r2, #0
 8081380:	6840      	ldr	r0, [r0, #4]
 8081382:	f081 0101 	eor.w	r1, r1, #1
 8081386:	f7ff baa9 	b.w	80808dc <network_listen>

0808138a <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 808138a:	2200      	movs	r2, #0
 808138c:	6840      	ldr	r0, [r0, #4]
 808138e:	f7ff bab5 	b.w	80808fc <network_set_listen_timeout>

08081392 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8081392:	2200      	movs	r2, #0
 8081394:	6840      	ldr	r0, [r0, #4]
 8081396:	4611      	mov	r1, r2
 8081398:	f7ff bab8 	b.w	808090c <network_get_listen_timeout>

0808139c <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 808139c:	2200      	movs	r2, #0
 808139e:	6840      	ldr	r0, [r0, #4]
 80813a0:	4611      	mov	r1, r2
 80813a2:	f7ff baa3 	b.w	80808ec <network_listening>
	...

080813a8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80813a8:	b570      	push	{r4, r5, r6, lr}
 80813aa:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 80813ac:	2600      	movs	r6, #0
 80813ae:	b086      	sub	sp, #24
 80813b0:	4604      	mov	r4, r0
    IPAddress addr;
 80813b2:	a804      	add	r0, sp, #16
 80813b4:	f7ff fd5e 	bl	8080e74 <_ZN9IPAddressC1Ev>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80813b8:	4628      	mov	r0, r5
        HAL_IPAddress ip = {0};
 80813ba:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80813bc:	f001 f862 	bl	8082484 <strlen>
 80813c0:	4b0a      	ldr	r3, [pc, #40]	; (80813ec <_ZN5spark12NetworkClass7resolveEPKc+0x44>)
 80813c2:	9600      	str	r6, [sp, #0]
 80813c4:	b281      	uxth	r1, r0
 80813c6:	685b      	ldr	r3, [r3, #4]
 80813c8:	4628      	mov	r0, r5
 80813ca:	aa03      	add	r2, sp, #12
 80813cc:	f7ff f9f2 	bl	80807b4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80813d0:	b130      	cbz	r0, 80813e0 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 80813d2:	4631      	mov	r1, r6
 80813d4:	4620      	mov	r0, r4
 80813d6:	f7ff fd5d 	bl	8080e94 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80813da:	4620      	mov	r0, r4
 80813dc:	b006      	add	sp, #24
 80813de:	bd70      	pop	{r4, r5, r6, pc}
 80813e0:	4620      	mov	r0, r4
 80813e2:	a903      	add	r1, sp, #12
 80813e4:	f7ff fd4e 	bl	8080e84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80813e8:	e7f7      	b.n	80813da <_ZN5spark12NetworkClass7resolveEPKc+0x32>
 80813ea:	bf00      	nop
 80813ec:	20000428 	.word	0x20000428

080813f0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80813f0:	4b02      	ldr	r3, [pc, #8]	; (80813fc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80813f2:	4a03      	ldr	r2, [pc, #12]	; (8081400 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80813f4:	601a      	str	r2, [r3, #0]
 80813f6:	2200      	movs	r2, #0
 80813f8:	605a      	str	r2, [r3, #4]

} // spark
 80813fa:	4770      	bx	lr
 80813fc:	20000578 	.word	0x20000578
 8081400:	08082664 	.word	0x08082664

08081404 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 8081404:	b510      	push	{r4, lr}
 8081406:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 8081408:	6880      	ldr	r0, [r0, #8]
 808140a:	b108      	cbz	r0, 8081410 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 808140c:	f7ff f922 	bl	8080654 <os_mutex_recursive_destroy>
 8081410:	4620      	mov	r0, r4
 8081412:	bd10      	pop	{r4, pc}

08081414 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 8081414:	282e      	cmp	r0, #46	; 0x2e
bool pinAvailable(uint16_t pin) {
 8081416:	b570      	push	{r4, r5, r6, lr}
 8081418:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 808141a:	d901      	bls.n	8081420 <pinAvailable+0xc>
    return false;
 808141c:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 808141e:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 8081420:	f1a0 030d 	sub.w	r3, r0, #13
 8081424:	2b02      	cmp	r3, #2
 8081426:	d90b      	bls.n	8081440 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 8081428:	2801      	cmp	r0, #1
 808142a:	d826      	bhi.n	808147a <pinAvailable+0x66>
 808142c:	f000 f880 	bl	8081530 <_Z19__fetch_global_Wirev>
 8081430:	2100      	movs	r1, #0
 8081432:	7c00      	ldrb	r0, [r0, #16]
 8081434:	f7ff f996 	bl	8080764 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 8081438:	f080 0001 	eor.w	r0, r0, #1
 808143c:	b2c0      	uxtb	r0, r0
 808143e:	e7ee      	b.n	808141e <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 8081440:	4e13      	ldr	r6, [pc, #76]	; (8081490 <pinAvailable+0x7c>)
 8081442:	7831      	ldrb	r1, [r6, #0]
 8081444:	f3bf 8f5b 	dmb	ish
 8081448:	f011 0501 	ands.w	r5, r1, #1
 808144c:	d10f      	bne.n	808146e <pinAvailable+0x5a>
 808144e:	4630      	mov	r0, r6
 8081450:	f7fe fe27 	bl	80800a2 <__cxa_guard_acquire>
 8081454:	b158      	cbz	r0, 808146e <pinAvailable+0x5a>
 8081456:	4629      	mov	r1, r5
 8081458:	480e      	ldr	r0, [pc, #56]	; (8081494 <pinAvailable+0x80>)
 808145a:	f7ff fa8f 	bl	808097c <_ZN8SPIClassC1E19hal_spi_interface_t>
 808145e:	4630      	mov	r0, r6
 8081460:	f7fe fe24 	bl	80800ac <__cxa_guard_release>
 8081464:	4a0c      	ldr	r2, [pc, #48]	; (8081498 <pinAvailable+0x84>)
 8081466:	490d      	ldr	r1, [pc, #52]	; (808149c <pinAvailable+0x88>)
 8081468:	480a      	ldr	r0, [pc, #40]	; (8081494 <pinAvailable+0x80>)
 808146a:	f000 f889 	bl	8081580 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 808146e:	4b09      	ldr	r3, [pc, #36]	; (8081494 <pinAvailable+0x80>)
 8081470:	7818      	ldrb	r0, [r3, #0]
 8081472:	f7ff f997 	bl	80807a4 <hal_spi_is_enabled>
 8081476:	2800      	cmp	r0, #0
 8081478:	d1d0      	bne.n	808141c <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 808147a:	3c12      	subs	r4, #18
 808147c:	2c01      	cmp	r4, #1
 808147e:	d805      	bhi.n	808148c <pinAvailable+0x78>
 8081480:	f7ff feb2 	bl	80811e8 <_Z22__fetch_global_Serial1v>
 8081484:	7c00      	ldrb	r0, [r0, #16]
 8081486:	f7ff f91d 	bl	80806c4 <hal_usart_is_enabled>
 808148a:	e7d5      	b.n	8081438 <pinAvailable+0x24>
  return true; // 'pin' is available
 808148c:	2001      	movs	r0, #1
 808148e:	e7c6      	b.n	808141e <pinAvailable+0xa>
 8081490:	20000580 	.word	0x20000580
 8081494:	20000584 	.word	0x20000584
 8081498:	20000078 	.word	0x20000078
 808149c:	08081405 	.word	0x08081405

080814a0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80814a0:	282e      	cmp	r0, #46	; 0x2e
{
 80814a2:	b538      	push	{r3, r4, r5, lr}
 80814a4:	4604      	mov	r4, r0
 80814a6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80814a8:	d80a      	bhi.n	80814c0 <pinMode+0x20>
 80814aa:	29ff      	cmp	r1, #255	; 0xff
 80814ac:	d008      	beq.n	80814c0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80814ae:	f7ff ffb1 	bl	8081414 <pinAvailable>
 80814b2:	b128      	cbz	r0, 80814c0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80814b4:	4629      	mov	r1, r5
 80814b6:	4620      	mov	r0, r4
}
 80814b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80814bc:	f7ff b8aa 	b.w	8080614 <HAL_Pin_Mode>
}
 80814c0:	bd38      	pop	{r3, r4, r5, pc}
	...

080814c4 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80814c4:	2300      	movs	r3, #0
 80814c6:	b513      	push	{r0, r1, r4, lr}
 80814c8:	4c07      	ldr	r4, [pc, #28]	; (80814e8 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80814ca:	461a      	mov	r2, r3
 80814cc:	4619      	mov	r1, r3
 80814ce:	4620      	mov	r0, r4
 80814d0:	9300      	str	r3, [sp, #0]
 80814d2:	f7ff fcf1 	bl	8080eb8 <_ZN9IPAddressC1Ehhhh>
 80814d6:	4620      	mov	r0, r4
 80814d8:	4a04      	ldr	r2, [pc, #16]	; (80814ec <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80814da:	4905      	ldr	r1, [pc, #20]	; (80814f0 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80814dc:	b002      	add	sp, #8
 80814de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80814e2:	f000 b84d 	b.w	8081580 <__aeabi_atexit>
 80814e6:	bf00      	nop
 80814e8:	20000594 	.word	0x20000594
 80814ec:	20000078 	.word	0x20000078
 80814f0:	08080e31 	.word	0x08080e31

080814f4 <_ZN12_GLOBAL__N_117defaultWireConfigEv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80814f4:	2300      	movs	r3, #0
hal_i2c_config_t defaultWireConfig() {
 80814f6:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80814f8:	2520      	movs	r5, #32
 80814fa:	8043      	strh	r3, [r0, #2]
 80814fc:	2314      	movs	r3, #20
		.size = sizeof(hal_i2c_config_t),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80814fe:	4e08      	ldr	r6, [pc, #32]	; (8081520 <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x2c>)
hal_i2c_config_t defaultWireConfig() {
 8081500:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 8081502:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8081504:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 8081506:	6085      	str	r5, [r0, #8]
 8081508:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808150a:	4628      	mov	r0, r5
 808150c:	f000 f83f 	bl	808158e <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8081510:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8081512:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8081514:	4628      	mov	r0, r5
 8081516:	f000 f83a 	bl	808158e <_ZnajRKSt9nothrow_t>
	};
 808151a:	60e0      	str	r0, [r4, #12]

	return config;
}
 808151c:	4620      	mov	r0, r4
 808151e:	bd70      	pop	{r4, r5, r6, pc}
 8081520:	08082698 	.word	0x08082698

08081524 <_Z17acquireWireBufferv>:

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 8081524:	b510      	push	{r4, lr}
 8081526:	4604      	mov	r4, r0
	return defaultWireConfig();
 8081528:	f7ff ffe4 	bl	80814f4 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
 808152c:	4620      	mov	r0, r4
 808152e:	bd10      	pop	{r4, pc}

08081530 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 8081530:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8081532:	4d0f      	ldr	r5, [pc, #60]	; (8081570 <_Z19__fetch_global_Wirev+0x40>)
{
 8081534:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8081536:	7829      	ldrb	r1, [r5, #0]
 8081538:	f3bf 8f5b 	dmb	ish
 808153c:	f011 0401 	ands.w	r4, r1, #1
 8081540:	d113      	bne.n	808156a <_Z19__fetch_global_Wirev+0x3a>
 8081542:	4628      	mov	r0, r5
 8081544:	f7fe fdad 	bl	80800a2 <__cxa_guard_acquire>
 8081548:	b178      	cbz	r0, 808156a <_Z19__fetch_global_Wirev+0x3a>
 808154a:	a801      	add	r0, sp, #4
 808154c:	f7ff ffea 	bl	8081524 <_Z17acquireWireBufferv>
 8081550:	4621      	mov	r1, r4
 8081552:	aa01      	add	r2, sp, #4
 8081554:	4807      	ldr	r0, [pc, #28]	; (8081574 <_Z19__fetch_global_Wirev+0x44>)
 8081556:	f7ff fe9b 	bl	8081290 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 808155a:	4628      	mov	r0, r5
 808155c:	f7fe fda6 	bl	80800ac <__cxa_guard_release>
 8081560:	4a05      	ldr	r2, [pc, #20]	; (8081578 <_Z19__fetch_global_Wirev+0x48>)
 8081562:	4906      	ldr	r1, [pc, #24]	; (808157c <_Z19__fetch_global_Wirev+0x4c>)
 8081564:	4803      	ldr	r0, [pc, #12]	; (8081574 <_Z19__fetch_global_Wirev+0x44>)
 8081566:	f000 f80b 	bl	8081580 <__aeabi_atexit>
	return wire;
}
 808156a:	4802      	ldr	r0, [pc, #8]	; (8081574 <_Z19__fetch_global_Wirev+0x44>)
 808156c:	b007      	add	sp, #28
 808156e:	bd30      	pop	{r4, r5, pc}
 8081570:	2000059c 	.word	0x2000059c
 8081574:	200005a0 	.word	0x200005a0
 8081578:	20000078 	.word	0x20000078
 808157c:	08081239 	.word	0x08081239

08081580 <__aeabi_atexit>:
 8081580:	460b      	mov	r3, r1
 8081582:	4601      	mov	r1, r0
 8081584:	4618      	mov	r0, r3
 8081586:	f000 bf35 	b.w	80823f4 <__cxa_atexit>

0808158a <_ZdlPvj>:
 808158a:	f7fe bd88 	b.w	808009e <_ZdlPv>

0808158e <_ZnajRKSt9nothrow_t>:
 808158e:	f7fe bd84 	b.w	808009a <_Znaj>
	...

08081594 <atan2>:
 8081594:	f000 b800 	b.w	8081598 <__ieee754_atan2>

08081598 <__ieee754_atan2>:
 8081598:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808159c:	461f      	mov	r7, r3
 808159e:	4253      	negs	r3, r2
 80815a0:	4e5f      	ldr	r6, [pc, #380]	; (8081720 <__ieee754_atan2+0x188>)
 80815a2:	4313      	orrs	r3, r2
 80815a4:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
 80815a8:	ea49 73d3 	orr.w	r3, r9, r3, lsr #31
 80815ac:	42b3      	cmp	r3, r6
 80815ae:	4694      	mov	ip, r2
 80815b0:	460d      	mov	r5, r1
 80815b2:	4686      	mov	lr, r0
 80815b4:	d83b      	bhi.n	808162e <__ieee754_atan2+0x96>
 80815b6:	4244      	negs	r4, r0
 80815b8:	4304      	orrs	r4, r0
 80815ba:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 80815be:	ea4a 74d4 	orr.w	r4, sl, r4, lsr #31
 80815c2:	42b4      	cmp	r4, r6
 80815c4:	4603      	mov	r3, r0
 80815c6:	468b      	mov	fp, r1
 80815c8:	d831      	bhi.n	808162e <__ieee754_atan2+0x96>
 80815ca:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80815ce:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80815d2:	4314      	orrs	r4, r2
 80815d4:	d03b      	beq.n	808164e <__ieee754_atan2+0xb6>
 80815d6:	17bc      	asrs	r4, r7, #30
 80815d8:	f004 0402 	and.w	r4, r4, #2
 80815dc:	ea5a 0303 	orrs.w	r3, sl, r3
 80815e0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80815e4:	d02b      	beq.n	808163e <__ieee754_atan2+0xa6>
 80815e6:	ea59 0302 	orrs.w	r3, r9, r2
 80815ea:	d034      	beq.n	8081656 <__ieee754_atan2+0xbe>
 80815ec:	45b1      	cmp	r9, r6
 80815ee:	d045      	beq.n	808167c <__ieee754_atan2+0xe4>
 80815f0:	45b2      	cmp	sl, r6
 80815f2:	d030      	beq.n	8081656 <__ieee754_atan2+0xbe>
 80815f4:	ebaa 0909 	sub.w	r9, sl, r9
 80815f8:	f1b9 7f74 	cmp.w	r9, #63963136	; 0x3d00000
 80815fc:	ea4f 5329 	mov.w	r3, r9, asr #20
 8081600:	da38      	bge.n	8081674 <__ieee754_atan2+0xdc>
 8081602:	2f00      	cmp	r7, #0
 8081604:	da46      	bge.n	8081694 <__ieee754_atan2+0xfc>
 8081606:	333c      	adds	r3, #60	; 0x3c
 8081608:	da44      	bge.n	8081694 <__ieee754_atan2+0xfc>
 808160a:	2000      	movs	r0, #0
 808160c:	2100      	movs	r1, #0
 808160e:	2c01      	cmp	r4, #1
 8081610:	d058      	beq.n	80816c4 <__ieee754_atan2+0x12c>
 8081612:	2c02      	cmp	r4, #2
 8081614:	d049      	beq.n	80816aa <__ieee754_atan2+0x112>
 8081616:	b184      	cbz	r4, 808163a <__ieee754_atan2+0xa2>
 8081618:	a335      	add	r3, pc, #212	; (adr r3, 80816f0 <__ieee754_atan2+0x158>)
 808161a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808161e:	f000 fa39 	bl	8081a94 <__aeabi_dsub>
 8081622:	a335      	add	r3, pc, #212	; (adr r3, 80816f8 <__ieee754_atan2+0x160>)
 8081624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081628:	f000 fa34 	bl	8081a94 <__aeabi_dsub>
 808162c:	e005      	b.n	808163a <__ieee754_atan2+0xa2>
 808162e:	4672      	mov	r2, lr
 8081630:	4660      	mov	r0, ip
 8081632:	462b      	mov	r3, r5
 8081634:	4639      	mov	r1, r7
 8081636:	f000 fa2f 	bl	8081a98 <__adddf3>
 808163a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808163e:	2c02      	cmp	r4, #2
 8081640:	d010      	beq.n	8081664 <__ieee754_atan2+0xcc>
 8081642:	2c03      	cmp	r4, #3
 8081644:	d1f9      	bne.n	808163a <__ieee754_atan2+0xa2>
 8081646:	a12e      	add	r1, pc, #184	; (adr r1, 8081700 <__ieee754_atan2+0x168>)
 8081648:	e9d1 0100 	ldrd	r0, r1, [r1]
 808164c:	e7f5      	b.n	808163a <__ieee754_atan2+0xa2>
 808164e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081652:	f000 b86d 	b.w	8081730 <atan>
 8081656:	f1bb 0f00 	cmp.w	fp, #0
 808165a:	db07      	blt.n	808166c <__ieee754_atan2+0xd4>
 808165c:	a12a      	add	r1, pc, #168	; (adr r1, 8081708 <__ieee754_atan2+0x170>)
 808165e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8081662:	e7ea      	b.n	808163a <__ieee754_atan2+0xa2>
 8081664:	a124      	add	r1, pc, #144	; (adr r1, 80816f8 <__ieee754_atan2+0x160>)
 8081666:	e9d1 0100 	ldrd	r0, r1, [r1]
 808166a:	e7e6      	b.n	808163a <__ieee754_atan2+0xa2>
 808166c:	a128      	add	r1, pc, #160	; (adr r1, 8081710 <__ieee754_atan2+0x178>)
 808166e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8081672:	e7e2      	b.n	808163a <__ieee754_atan2+0xa2>
 8081674:	a124      	add	r1, pc, #144	; (adr r1, 8081708 <__ieee754_atan2+0x170>)
 8081676:	e9d1 0100 	ldrd	r0, r1, [r1]
 808167a:	e7c8      	b.n	808160e <__ieee754_atan2+0x76>
 808167c:	45ca      	cmp	sl, r9
 808167e:	f104 34ff 	add.w	r4, r4, #4294967295
 8081682:	d023      	beq.n	80816cc <__ieee754_atan2+0x134>
 8081684:	2c02      	cmp	r4, #2
 8081686:	d829      	bhi.n	80816dc <__ieee754_atan2+0x144>
 8081688:	4b26      	ldr	r3, [pc, #152]	; (8081724 <__ieee754_atan2+0x18c>)
 808168a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 808168e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8081692:	e7d2      	b.n	808163a <__ieee754_atan2+0xa2>
 8081694:	4662      	mov	r2, ip
 8081696:	4670      	mov	r0, lr
 8081698:	463b      	mov	r3, r7
 808169a:	4629      	mov	r1, r5
 808169c:	f000 fcdc 	bl	8082058 <__aeabi_ddiv>
 80816a0:	f000 f9f0 	bl	8081a84 <fabs>
 80816a4:	f000 f844 	bl	8081730 <atan>
 80816a8:	e7b1      	b.n	808160e <__ieee754_atan2+0x76>
 80816aa:	a311      	add	r3, pc, #68	; (adr r3, 80816f0 <__ieee754_atan2+0x158>)
 80816ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80816b0:	f000 f9f0 	bl	8081a94 <__aeabi_dsub>
 80816b4:	4602      	mov	r2, r0
 80816b6:	460b      	mov	r3, r1
 80816b8:	a10f      	add	r1, pc, #60	; (adr r1, 80816f8 <__ieee754_atan2+0x160>)
 80816ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80816be:	f000 f9e9 	bl	8081a94 <__aeabi_dsub>
 80816c2:	e7ba      	b.n	808163a <__ieee754_atan2+0xa2>
 80816c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80816c8:	4619      	mov	r1, r3
 80816ca:	e7b6      	b.n	808163a <__ieee754_atan2+0xa2>
 80816cc:	2c02      	cmp	r4, #2
 80816ce:	d808      	bhi.n	80816e2 <__ieee754_atan2+0x14a>
 80816d0:	4b15      	ldr	r3, [pc, #84]	; (8081728 <__ieee754_atan2+0x190>)
 80816d2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80816d6:	e9d4 0100 	ldrd	r0, r1, [r4]
 80816da:	e7ae      	b.n	808163a <__ieee754_atan2+0xa2>
 80816dc:	2000      	movs	r0, #0
 80816de:	2100      	movs	r1, #0
 80816e0:	e7ab      	b.n	808163a <__ieee754_atan2+0xa2>
 80816e2:	a10d      	add	r1, pc, #52	; (adr r1, 8081718 <__ieee754_atan2+0x180>)
 80816e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80816e8:	e7a7      	b.n	808163a <__ieee754_atan2+0xa2>
 80816ea:	bf00      	nop
 80816ec:	f3af 8000 	nop.w
 80816f0:	33145c07 	.word	0x33145c07
 80816f4:	3ca1a626 	.word	0x3ca1a626
 80816f8:	54442d18 	.word	0x54442d18
 80816fc:	400921fb 	.word	0x400921fb
 8081700:	54442d18 	.word	0x54442d18
 8081704:	c00921fb 	.word	0xc00921fb
 8081708:	54442d18 	.word	0x54442d18
 808170c:	3ff921fb 	.word	0x3ff921fb
 8081710:	54442d18 	.word	0x54442d18
 8081714:	bff921fb 	.word	0xbff921fb
 8081718:	54442d18 	.word	0x54442d18
 808171c:	3fe921fb 	.word	0x3fe921fb
 8081720:	7ff00000 	.word	0x7ff00000
 8081724:	080826b8 	.word	0x080826b8
 8081728:	080826a0 	.word	0x080826a0
 808172c:	00000000 	.word	0x00000000

08081730 <atan>:
 8081730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081734:	4bc6      	ldr	r3, [pc, #792]	; (8081a50 <atan+0x320>)
 8081736:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 808173a:	b083      	sub	sp, #12
 808173c:	429e      	cmp	r6, r3
 808173e:	4604      	mov	r4, r0
 8081740:	468a      	mov	sl, r1
 8081742:	9101      	str	r1, [sp, #4]
 8081744:	dd11      	ble.n	808176a <atan+0x3a>
 8081746:	4bc3      	ldr	r3, [pc, #780]	; (8081a54 <atan+0x324>)
 8081748:	429e      	cmp	r6, r3
 808174a:	f300 80b8 	bgt.w	80818be <atan+0x18e>
 808174e:	f000 80b3 	beq.w	80818b8 <atan+0x188>
 8081752:	4bc1      	ldr	r3, [pc, #772]	; (8081a58 <atan+0x328>)
 8081754:	4ac1      	ldr	r2, [pc, #772]	; (8081a5c <atan+0x32c>)
 8081756:	4cc2      	ldr	r4, [pc, #776]	; (8081a60 <atan+0x330>)
 8081758:	f1ba 0f00 	cmp.w	sl, #0
 808175c:	bfd8      	it	le
 808175e:	4613      	movle	r3, r2
 8081760:	4620      	mov	r0, r4
 8081762:	4619      	mov	r1, r3
 8081764:	b003      	add	sp, #12
 8081766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808176a:	4bbe      	ldr	r3, [pc, #760]	; (8081a64 <atan+0x334>)
 808176c:	429e      	cmp	r6, r3
 808176e:	f300 80c1 	bgt.w	80818f4 <atan+0x1c4>
 8081772:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8081776:	429e      	cmp	r6, r3
 8081778:	f340 80ae 	ble.w	80818d8 <atan+0x1a8>
 808177c:	f04f 3bff 	mov.w	fp, #4294967295
 8081780:	9b01      	ldr	r3, [sp, #4]
 8081782:	4622      	mov	r2, r4
 8081784:	4619      	mov	r1, r3
 8081786:	4620      	mov	r0, r4
 8081788:	f000 fb3c 	bl	8081e04 <__aeabi_dmul>
 808178c:	4602      	mov	r2, r0
 808178e:	460b      	mov	r3, r1
 8081790:	4680      	mov	r8, r0
 8081792:	4689      	mov	r9, r1
 8081794:	f000 fb36 	bl	8081e04 <__aeabi_dmul>
 8081798:	a395      	add	r3, pc, #596	; (adr r3, 80819f0 <atan+0x2c0>)
 808179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808179e:	4606      	mov	r6, r0
 80817a0:	460f      	mov	r7, r1
 80817a2:	f000 fb2f 	bl	8081e04 <__aeabi_dmul>
 80817a6:	a394      	add	r3, pc, #592	; (adr r3, 80819f8 <atan+0x2c8>)
 80817a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80817ac:	f000 f974 	bl	8081a98 <__adddf3>
 80817b0:	4632      	mov	r2, r6
 80817b2:	463b      	mov	r3, r7
 80817b4:	f000 fb26 	bl	8081e04 <__aeabi_dmul>
 80817b8:	a391      	add	r3, pc, #580	; (adr r3, 8081a00 <atan+0x2d0>)
 80817ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80817be:	f000 f96b 	bl	8081a98 <__adddf3>
 80817c2:	4632      	mov	r2, r6
 80817c4:	463b      	mov	r3, r7
 80817c6:	f000 fb1d 	bl	8081e04 <__aeabi_dmul>
 80817ca:	a38f      	add	r3, pc, #572	; (adr r3, 8081a08 <atan+0x2d8>)
 80817cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80817d0:	f000 f962 	bl	8081a98 <__adddf3>
 80817d4:	4632      	mov	r2, r6
 80817d6:	463b      	mov	r3, r7
 80817d8:	f000 fb14 	bl	8081e04 <__aeabi_dmul>
 80817dc:	a38c      	add	r3, pc, #560	; (adr r3, 8081a10 <atan+0x2e0>)
 80817de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80817e2:	f000 f959 	bl	8081a98 <__adddf3>
 80817e6:	4632      	mov	r2, r6
 80817e8:	463b      	mov	r3, r7
 80817ea:	f000 fb0b 	bl	8081e04 <__aeabi_dmul>
 80817ee:	a38a      	add	r3, pc, #552	; (adr r3, 8081a18 <atan+0x2e8>)
 80817f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80817f4:	f000 f950 	bl	8081a98 <__adddf3>
 80817f8:	4642      	mov	r2, r8
 80817fa:	464b      	mov	r3, r9
 80817fc:	f000 fb02 	bl	8081e04 <__aeabi_dmul>
 8081800:	a387      	add	r3, pc, #540	; (adr r3, 8081a20 <atan+0x2f0>)
 8081802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081806:	4680      	mov	r8, r0
 8081808:	4689      	mov	r9, r1
 808180a:	4630      	mov	r0, r6
 808180c:	4639      	mov	r1, r7
 808180e:	f000 faf9 	bl	8081e04 <__aeabi_dmul>
 8081812:	a385      	add	r3, pc, #532	; (adr r3, 8081a28 <atan+0x2f8>)
 8081814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081818:	f000 f93c 	bl	8081a94 <__aeabi_dsub>
 808181c:	4632      	mov	r2, r6
 808181e:	463b      	mov	r3, r7
 8081820:	f000 faf0 	bl	8081e04 <__aeabi_dmul>
 8081824:	a382      	add	r3, pc, #520	; (adr r3, 8081a30 <atan+0x300>)
 8081826:	e9d3 2300 	ldrd	r2, r3, [r3]
 808182a:	f000 f933 	bl	8081a94 <__aeabi_dsub>
 808182e:	4632      	mov	r2, r6
 8081830:	463b      	mov	r3, r7
 8081832:	f000 fae7 	bl	8081e04 <__aeabi_dmul>
 8081836:	a380      	add	r3, pc, #512	; (adr r3, 8081a38 <atan+0x308>)
 8081838:	e9d3 2300 	ldrd	r2, r3, [r3]
 808183c:	f000 f92a 	bl	8081a94 <__aeabi_dsub>
 8081840:	4632      	mov	r2, r6
 8081842:	463b      	mov	r3, r7
 8081844:	f000 fade 	bl	8081e04 <__aeabi_dmul>
 8081848:	a37d      	add	r3, pc, #500	; (adr r3, 8081a40 <atan+0x310>)
 808184a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808184e:	f000 f921 	bl	8081a94 <__aeabi_dsub>
 8081852:	4632      	mov	r2, r6
 8081854:	463b      	mov	r3, r7
 8081856:	f000 fad5 	bl	8081e04 <__aeabi_dmul>
 808185a:	f1bb 3fff 	cmp.w	fp, #4294967295
 808185e:	4602      	mov	r2, r0
 8081860:	460b      	mov	r3, r1
 8081862:	d06e      	beq.n	8081942 <atan+0x212>
 8081864:	4640      	mov	r0, r8
 8081866:	4649      	mov	r1, r9
 8081868:	f000 f916 	bl	8081a98 <__adddf3>
 808186c:	4e7e      	ldr	r6, [pc, #504]	; (8081a68 <atan+0x338>)
 808186e:	4622      	mov	r2, r4
 8081870:	9b01      	ldr	r3, [sp, #4]
 8081872:	f000 fac7 	bl	8081e04 <__aeabi_dmul>
 8081876:	4b7d      	ldr	r3, [pc, #500]	; (8081a6c <atan+0x33c>)
 8081878:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
 808187c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8081880:	449b      	add	fp, r3
 8081882:	e9db 2300 	ldrd	r2, r3, [fp]
 8081886:	f000 f905 	bl	8081a94 <__aeabi_dsub>
 808188a:	4622      	mov	r2, r4
 808188c:	9b01      	ldr	r3, [sp, #4]
 808188e:	f000 f901 	bl	8081a94 <__aeabi_dsub>
 8081892:	460b      	mov	r3, r1
 8081894:	4602      	mov	r2, r0
 8081896:	e9d6 0100 	ldrd	r0, r1, [r6]
 808189a:	f000 f8fb 	bl	8081a94 <__aeabi_dsub>
 808189e:	f1ba 0f00 	cmp.w	sl, #0
 80818a2:	4604      	mov	r4, r0
 80818a4:	460b      	mov	r3, r1
 80818a6:	f6bf af5b 	bge.w	8081760 <atan+0x30>
 80818aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80818ae:	4620      	mov	r0, r4
 80818b0:	4619      	mov	r1, r3
 80818b2:	b003      	add	sp, #12
 80818b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80818b8:	2800      	cmp	r0, #0
 80818ba:	f43f af4a 	beq.w	8081752 <atan+0x22>
 80818be:	9b01      	ldr	r3, [sp, #4]
 80818c0:	4622      	mov	r2, r4
 80818c2:	4620      	mov	r0, r4
 80818c4:	4619      	mov	r1, r3
 80818c6:	f000 f8e7 	bl	8081a98 <__adddf3>
 80818ca:	4604      	mov	r4, r0
 80818cc:	460b      	mov	r3, r1
 80818ce:	4620      	mov	r0, r4
 80818d0:	4619      	mov	r1, r3
 80818d2:	b003      	add	sp, #12
 80818d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80818d8:	a35b      	add	r3, pc, #364	; (adr r3, 8081a48 <atan+0x318>)
 80818da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80818de:	f000 f8db 	bl	8081a98 <__adddf3>
 80818e2:	2200      	movs	r2, #0
 80818e4:	4b62      	ldr	r3, [pc, #392]	; (8081a70 <atan+0x340>)
 80818e6:	f000 fd1d 	bl	8082324 <__aeabi_dcmpgt>
 80818ea:	2800      	cmp	r0, #0
 80818ec:	f43f af46 	beq.w	808177c <atan+0x4c>
 80818f0:	4653      	mov	r3, sl
 80818f2:	e735      	b.n	8081760 <atan+0x30>
 80818f4:	f000 f8c6 	bl	8081a84 <fabs>
 80818f8:	4b5e      	ldr	r3, [pc, #376]	; (8081a74 <atan+0x344>)
 80818fa:	4604      	mov	r4, r0
 80818fc:	429e      	cmp	r6, r3
 80818fe:	460d      	mov	r5, r1
 8081900:	dc34      	bgt.n	808196c <atan+0x23c>
 8081902:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8081906:	429e      	cmp	r6, r3
 8081908:	dc59      	bgt.n	80819be <atan+0x28e>
 808190a:	4602      	mov	r2, r0
 808190c:	460b      	mov	r3, r1
 808190e:	f000 f8c3 	bl	8081a98 <__adddf3>
 8081912:	2200      	movs	r2, #0
 8081914:	4b56      	ldr	r3, [pc, #344]	; (8081a70 <atan+0x340>)
 8081916:	f000 f8bd 	bl	8081a94 <__aeabi_dsub>
 808191a:	2200      	movs	r2, #0
 808191c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8081920:	4606      	mov	r6, r0
 8081922:	460f      	mov	r7, r1
 8081924:	4620      	mov	r0, r4
 8081926:	4629      	mov	r1, r5
 8081928:	f000 f8b6 	bl	8081a98 <__adddf3>
 808192c:	4602      	mov	r2, r0
 808192e:	460b      	mov	r3, r1
 8081930:	4630      	mov	r0, r6
 8081932:	4639      	mov	r1, r7
 8081934:	f000 fb90 	bl	8082058 <__aeabi_ddiv>
 8081938:	f04f 0b00 	mov.w	fp, #0
 808193c:	4604      	mov	r4, r0
 808193e:	9101      	str	r1, [sp, #4]
 8081940:	e71e      	b.n	8081780 <atan+0x50>
 8081942:	4640      	mov	r0, r8
 8081944:	4649      	mov	r1, r9
 8081946:	f000 f8a7 	bl	8081a98 <__adddf3>
 808194a:	4622      	mov	r2, r4
 808194c:	9b01      	ldr	r3, [sp, #4]
 808194e:	f000 fa59 	bl	8081e04 <__aeabi_dmul>
 8081952:	4602      	mov	r2, r0
 8081954:	460b      	mov	r3, r1
 8081956:	4620      	mov	r0, r4
 8081958:	9901      	ldr	r1, [sp, #4]
 808195a:	f000 f89b 	bl	8081a94 <__aeabi_dsub>
 808195e:	4604      	mov	r4, r0
 8081960:	460b      	mov	r3, r1
 8081962:	4620      	mov	r0, r4
 8081964:	4619      	mov	r1, r3
 8081966:	b003      	add	sp, #12
 8081968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808196c:	4b42      	ldr	r3, [pc, #264]	; (8081a78 <atan+0x348>)
 808196e:	429e      	cmp	r6, r3
 8081970:	da1a      	bge.n	80819a8 <atan+0x278>
 8081972:	2200      	movs	r2, #0
 8081974:	4b41      	ldr	r3, [pc, #260]	; (8081a7c <atan+0x34c>)
 8081976:	f000 f88d 	bl	8081a94 <__aeabi_dsub>
 808197a:	2200      	movs	r2, #0
 808197c:	4606      	mov	r6, r0
 808197e:	460f      	mov	r7, r1
 8081980:	4620      	mov	r0, r4
 8081982:	4b3e      	ldr	r3, [pc, #248]	; (8081a7c <atan+0x34c>)
 8081984:	4629      	mov	r1, r5
 8081986:	f000 fa3d 	bl	8081e04 <__aeabi_dmul>
 808198a:	2200      	movs	r2, #0
 808198c:	4b38      	ldr	r3, [pc, #224]	; (8081a70 <atan+0x340>)
 808198e:	f000 f883 	bl	8081a98 <__adddf3>
 8081992:	4602      	mov	r2, r0
 8081994:	460b      	mov	r3, r1
 8081996:	4630      	mov	r0, r6
 8081998:	4639      	mov	r1, r7
 808199a:	f000 fb5d 	bl	8082058 <__aeabi_ddiv>
 808199e:	f04f 0b02 	mov.w	fp, #2
 80819a2:	4604      	mov	r4, r0
 80819a4:	9101      	str	r1, [sp, #4]
 80819a6:	e6eb      	b.n	8081780 <atan+0x50>
 80819a8:	4602      	mov	r2, r0
 80819aa:	460b      	mov	r3, r1
 80819ac:	2000      	movs	r0, #0
 80819ae:	4934      	ldr	r1, [pc, #208]	; (8081a80 <atan+0x350>)
 80819b0:	f000 fb52 	bl	8082058 <__aeabi_ddiv>
 80819b4:	f04f 0b03 	mov.w	fp, #3
 80819b8:	4604      	mov	r4, r0
 80819ba:	9101      	str	r1, [sp, #4]
 80819bc:	e6e0      	b.n	8081780 <atan+0x50>
 80819be:	2200      	movs	r2, #0
 80819c0:	4b2b      	ldr	r3, [pc, #172]	; (8081a70 <atan+0x340>)
 80819c2:	f000 f867 	bl	8081a94 <__aeabi_dsub>
 80819c6:	2200      	movs	r2, #0
 80819c8:	4606      	mov	r6, r0
 80819ca:	460f      	mov	r7, r1
 80819cc:	4620      	mov	r0, r4
 80819ce:	4b28      	ldr	r3, [pc, #160]	; (8081a70 <atan+0x340>)
 80819d0:	4629      	mov	r1, r5
 80819d2:	f000 f861 	bl	8081a98 <__adddf3>
 80819d6:	4602      	mov	r2, r0
 80819d8:	460b      	mov	r3, r1
 80819da:	4630      	mov	r0, r6
 80819dc:	4639      	mov	r1, r7
 80819de:	f000 fb3b 	bl	8082058 <__aeabi_ddiv>
 80819e2:	f04f 0b01 	mov.w	fp, #1
 80819e6:	4604      	mov	r4, r0
 80819e8:	9101      	str	r1, [sp, #4]
 80819ea:	e6c9      	b.n	8081780 <atan+0x50>
 80819ec:	f3af 8000 	nop.w
 80819f0:	e322da11 	.word	0xe322da11
 80819f4:	3f90ad3a 	.word	0x3f90ad3a
 80819f8:	24760deb 	.word	0x24760deb
 80819fc:	3fa97b4b 	.word	0x3fa97b4b
 8081a00:	a0d03d51 	.word	0xa0d03d51
 8081a04:	3fb10d66 	.word	0x3fb10d66
 8081a08:	c54c206e 	.word	0xc54c206e
 8081a0c:	3fb745cd 	.word	0x3fb745cd
 8081a10:	920083ff 	.word	0x920083ff
 8081a14:	3fc24924 	.word	0x3fc24924
 8081a18:	5555550d 	.word	0x5555550d
 8081a1c:	3fd55555 	.word	0x3fd55555
 8081a20:	2c6a6c2f 	.word	0x2c6a6c2f
 8081a24:	bfa2b444 	.word	0xbfa2b444
 8081a28:	52defd9a 	.word	0x52defd9a
 8081a2c:	3fadde2d 	.word	0x3fadde2d
 8081a30:	af749a6d 	.word	0xaf749a6d
 8081a34:	3fb3b0f2 	.word	0x3fb3b0f2
 8081a38:	fe231671 	.word	0xfe231671
 8081a3c:	3fbc71c6 	.word	0x3fbc71c6
 8081a40:	9998ebc4 	.word	0x9998ebc4
 8081a44:	3fc99999 	.word	0x3fc99999
 8081a48:	8800759c 	.word	0x8800759c
 8081a4c:	7e37e43c 	.word	0x7e37e43c
 8081a50:	440fffff 	.word	0x440fffff
 8081a54:	7ff00000 	.word	0x7ff00000
 8081a58:	3ff921fb 	.word	0x3ff921fb
 8081a5c:	bff921fb 	.word	0xbff921fb
 8081a60:	54442d18 	.word	0x54442d18
 8081a64:	3fdbffff 	.word	0x3fdbffff
 8081a68:	080826d0 	.word	0x080826d0
 8081a6c:	080826f0 	.word	0x080826f0
 8081a70:	3ff00000 	.word	0x3ff00000
 8081a74:	3ff2ffff 	.word	0x3ff2ffff
 8081a78:	40038000 	.word	0x40038000
 8081a7c:	3ff80000 	.word	0x3ff80000
 8081a80:	bff00000 	.word	0xbff00000

08081a84 <fabs>:
 8081a84:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8081a88:	4770      	bx	lr
 8081a8a:	bf00      	nop

08081a8c <__aeabi_drsub>:
 8081a8c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8081a90:	e002      	b.n	8081a98 <__adddf3>
 8081a92:	bf00      	nop

08081a94 <__aeabi_dsub>:
 8081a94:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08081a98 <__adddf3>:
 8081a98:	b530      	push	{r4, r5, lr}
 8081a9a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8081a9e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8081aa2:	ea94 0f05 	teq	r4, r5
 8081aa6:	bf08      	it	eq
 8081aa8:	ea90 0f02 	teqeq	r0, r2
 8081aac:	bf1f      	itttt	ne
 8081aae:	ea54 0c00 	orrsne.w	ip, r4, r0
 8081ab2:	ea55 0c02 	orrsne.w	ip, r5, r2
 8081ab6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8081aba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8081abe:	f000 80e2 	beq.w	8081c86 <__adddf3+0x1ee>
 8081ac2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8081ac6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8081aca:	bfb8      	it	lt
 8081acc:	426d      	neglt	r5, r5
 8081ace:	dd0c      	ble.n	8081aea <__adddf3+0x52>
 8081ad0:	442c      	add	r4, r5
 8081ad2:	ea80 0202 	eor.w	r2, r0, r2
 8081ad6:	ea81 0303 	eor.w	r3, r1, r3
 8081ada:	ea82 0000 	eor.w	r0, r2, r0
 8081ade:	ea83 0101 	eor.w	r1, r3, r1
 8081ae2:	ea80 0202 	eor.w	r2, r0, r2
 8081ae6:	ea81 0303 	eor.w	r3, r1, r3
 8081aea:	2d36      	cmp	r5, #54	; 0x36
 8081aec:	bf88      	it	hi
 8081aee:	bd30      	pophi	{r4, r5, pc}
 8081af0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8081af4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8081af8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8081afc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8081b00:	d002      	beq.n	8081b08 <__adddf3+0x70>
 8081b02:	4240      	negs	r0, r0
 8081b04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8081b08:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8081b0c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8081b10:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8081b14:	d002      	beq.n	8081b1c <__adddf3+0x84>
 8081b16:	4252      	negs	r2, r2
 8081b18:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8081b1c:	ea94 0f05 	teq	r4, r5
 8081b20:	f000 80a7 	beq.w	8081c72 <__adddf3+0x1da>
 8081b24:	f1a4 0401 	sub.w	r4, r4, #1
 8081b28:	f1d5 0e20 	rsbs	lr, r5, #32
 8081b2c:	db0d      	blt.n	8081b4a <__adddf3+0xb2>
 8081b2e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8081b32:	fa22 f205 	lsr.w	r2, r2, r5
 8081b36:	1880      	adds	r0, r0, r2
 8081b38:	f141 0100 	adc.w	r1, r1, #0
 8081b3c:	fa03 f20e 	lsl.w	r2, r3, lr
 8081b40:	1880      	adds	r0, r0, r2
 8081b42:	fa43 f305 	asr.w	r3, r3, r5
 8081b46:	4159      	adcs	r1, r3
 8081b48:	e00e      	b.n	8081b68 <__adddf3+0xd0>
 8081b4a:	f1a5 0520 	sub.w	r5, r5, #32
 8081b4e:	f10e 0e20 	add.w	lr, lr, #32
 8081b52:	2a01      	cmp	r2, #1
 8081b54:	fa03 fc0e 	lsl.w	ip, r3, lr
 8081b58:	bf28      	it	cs
 8081b5a:	f04c 0c02 	orrcs.w	ip, ip, #2
 8081b5e:	fa43 f305 	asr.w	r3, r3, r5
 8081b62:	18c0      	adds	r0, r0, r3
 8081b64:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8081b68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8081b6c:	d507      	bpl.n	8081b7e <__adddf3+0xe6>
 8081b6e:	f04f 0e00 	mov.w	lr, #0
 8081b72:	f1dc 0c00 	rsbs	ip, ip, #0
 8081b76:	eb7e 0000 	sbcs.w	r0, lr, r0
 8081b7a:	eb6e 0101 	sbc.w	r1, lr, r1
 8081b7e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8081b82:	d31b      	bcc.n	8081bbc <__adddf3+0x124>
 8081b84:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8081b88:	d30c      	bcc.n	8081ba4 <__adddf3+0x10c>
 8081b8a:	0849      	lsrs	r1, r1, #1
 8081b8c:	ea5f 0030 	movs.w	r0, r0, rrx
 8081b90:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8081b94:	f104 0401 	add.w	r4, r4, #1
 8081b98:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8081b9c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8081ba0:	f080 809a 	bcs.w	8081cd8 <__adddf3+0x240>
 8081ba4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8081ba8:	bf08      	it	eq
 8081baa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8081bae:	f150 0000 	adcs.w	r0, r0, #0
 8081bb2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8081bb6:	ea41 0105 	orr.w	r1, r1, r5
 8081bba:	bd30      	pop	{r4, r5, pc}
 8081bbc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8081bc0:	4140      	adcs	r0, r0
 8081bc2:	eb41 0101 	adc.w	r1, r1, r1
 8081bc6:	3c01      	subs	r4, #1
 8081bc8:	bf28      	it	cs
 8081bca:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8081bce:	d2e9      	bcs.n	8081ba4 <__adddf3+0x10c>
 8081bd0:	f091 0f00 	teq	r1, #0
 8081bd4:	bf04      	itt	eq
 8081bd6:	4601      	moveq	r1, r0
 8081bd8:	2000      	moveq	r0, #0
 8081bda:	fab1 f381 	clz	r3, r1
 8081bde:	bf08      	it	eq
 8081be0:	3320      	addeq	r3, #32
 8081be2:	f1a3 030b 	sub.w	r3, r3, #11
 8081be6:	f1b3 0220 	subs.w	r2, r3, #32
 8081bea:	da0c      	bge.n	8081c06 <__adddf3+0x16e>
 8081bec:	320c      	adds	r2, #12
 8081bee:	dd08      	ble.n	8081c02 <__adddf3+0x16a>
 8081bf0:	f102 0c14 	add.w	ip, r2, #20
 8081bf4:	f1c2 020c 	rsb	r2, r2, #12
 8081bf8:	fa01 f00c 	lsl.w	r0, r1, ip
 8081bfc:	fa21 f102 	lsr.w	r1, r1, r2
 8081c00:	e00c      	b.n	8081c1c <__adddf3+0x184>
 8081c02:	f102 0214 	add.w	r2, r2, #20
 8081c06:	bfd8      	it	le
 8081c08:	f1c2 0c20 	rsble	ip, r2, #32
 8081c0c:	fa01 f102 	lsl.w	r1, r1, r2
 8081c10:	fa20 fc0c 	lsr.w	ip, r0, ip
 8081c14:	bfdc      	itt	le
 8081c16:	ea41 010c 	orrle.w	r1, r1, ip
 8081c1a:	4090      	lslle	r0, r2
 8081c1c:	1ae4      	subs	r4, r4, r3
 8081c1e:	bfa2      	ittt	ge
 8081c20:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8081c24:	4329      	orrge	r1, r5
 8081c26:	bd30      	popge	{r4, r5, pc}
 8081c28:	ea6f 0404 	mvn.w	r4, r4
 8081c2c:	3c1f      	subs	r4, #31
 8081c2e:	da1c      	bge.n	8081c6a <__adddf3+0x1d2>
 8081c30:	340c      	adds	r4, #12
 8081c32:	dc0e      	bgt.n	8081c52 <__adddf3+0x1ba>
 8081c34:	f104 0414 	add.w	r4, r4, #20
 8081c38:	f1c4 0220 	rsb	r2, r4, #32
 8081c3c:	fa20 f004 	lsr.w	r0, r0, r4
 8081c40:	fa01 f302 	lsl.w	r3, r1, r2
 8081c44:	ea40 0003 	orr.w	r0, r0, r3
 8081c48:	fa21 f304 	lsr.w	r3, r1, r4
 8081c4c:	ea45 0103 	orr.w	r1, r5, r3
 8081c50:	bd30      	pop	{r4, r5, pc}
 8081c52:	f1c4 040c 	rsb	r4, r4, #12
 8081c56:	f1c4 0220 	rsb	r2, r4, #32
 8081c5a:	fa20 f002 	lsr.w	r0, r0, r2
 8081c5e:	fa01 f304 	lsl.w	r3, r1, r4
 8081c62:	ea40 0003 	orr.w	r0, r0, r3
 8081c66:	4629      	mov	r1, r5
 8081c68:	bd30      	pop	{r4, r5, pc}
 8081c6a:	fa21 f004 	lsr.w	r0, r1, r4
 8081c6e:	4629      	mov	r1, r5
 8081c70:	bd30      	pop	{r4, r5, pc}
 8081c72:	f094 0f00 	teq	r4, #0
 8081c76:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8081c7a:	bf06      	itte	eq
 8081c7c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8081c80:	3401      	addeq	r4, #1
 8081c82:	3d01      	subne	r5, #1
 8081c84:	e74e      	b.n	8081b24 <__adddf3+0x8c>
 8081c86:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8081c8a:	bf18      	it	ne
 8081c8c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8081c90:	d029      	beq.n	8081ce6 <__adddf3+0x24e>
 8081c92:	ea94 0f05 	teq	r4, r5
 8081c96:	bf08      	it	eq
 8081c98:	ea90 0f02 	teqeq	r0, r2
 8081c9c:	d005      	beq.n	8081caa <__adddf3+0x212>
 8081c9e:	ea54 0c00 	orrs.w	ip, r4, r0
 8081ca2:	bf04      	itt	eq
 8081ca4:	4619      	moveq	r1, r3
 8081ca6:	4610      	moveq	r0, r2
 8081ca8:	bd30      	pop	{r4, r5, pc}
 8081caa:	ea91 0f03 	teq	r1, r3
 8081cae:	bf1e      	ittt	ne
 8081cb0:	2100      	movne	r1, #0
 8081cb2:	2000      	movne	r0, #0
 8081cb4:	bd30      	popne	{r4, r5, pc}
 8081cb6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8081cba:	d105      	bne.n	8081cc8 <__adddf3+0x230>
 8081cbc:	0040      	lsls	r0, r0, #1
 8081cbe:	4149      	adcs	r1, r1
 8081cc0:	bf28      	it	cs
 8081cc2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8081cc6:	bd30      	pop	{r4, r5, pc}
 8081cc8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8081ccc:	bf3c      	itt	cc
 8081cce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8081cd2:	bd30      	popcc	{r4, r5, pc}
 8081cd4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8081cd8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8081cdc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8081ce0:	f04f 0000 	mov.w	r0, #0
 8081ce4:	bd30      	pop	{r4, r5, pc}
 8081ce6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8081cea:	bf1a      	itte	ne
 8081cec:	4619      	movne	r1, r3
 8081cee:	4610      	movne	r0, r2
 8081cf0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8081cf4:	bf1c      	itt	ne
 8081cf6:	460b      	movne	r3, r1
 8081cf8:	4602      	movne	r2, r0
 8081cfa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8081cfe:	bf06      	itte	eq
 8081d00:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8081d04:	ea91 0f03 	teqeq	r1, r3
 8081d08:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8081d0c:	bd30      	pop	{r4, r5, pc}
 8081d0e:	bf00      	nop

08081d10 <__aeabi_ui2d>:
 8081d10:	f090 0f00 	teq	r0, #0
 8081d14:	bf04      	itt	eq
 8081d16:	2100      	moveq	r1, #0
 8081d18:	4770      	bxeq	lr
 8081d1a:	b530      	push	{r4, r5, lr}
 8081d1c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8081d20:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8081d24:	f04f 0500 	mov.w	r5, #0
 8081d28:	f04f 0100 	mov.w	r1, #0
 8081d2c:	e750      	b.n	8081bd0 <__adddf3+0x138>
 8081d2e:	bf00      	nop

08081d30 <__aeabi_i2d>:
 8081d30:	f090 0f00 	teq	r0, #0
 8081d34:	bf04      	itt	eq
 8081d36:	2100      	moveq	r1, #0
 8081d38:	4770      	bxeq	lr
 8081d3a:	b530      	push	{r4, r5, lr}
 8081d3c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8081d40:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8081d44:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8081d48:	bf48      	it	mi
 8081d4a:	4240      	negmi	r0, r0
 8081d4c:	f04f 0100 	mov.w	r1, #0
 8081d50:	e73e      	b.n	8081bd0 <__adddf3+0x138>
 8081d52:	bf00      	nop

08081d54 <__aeabi_f2d>:
 8081d54:	0042      	lsls	r2, r0, #1
 8081d56:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8081d5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8081d5e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8081d62:	bf1f      	itttt	ne
 8081d64:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8081d68:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8081d6c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8081d70:	4770      	bxne	lr
 8081d72:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8081d76:	bf08      	it	eq
 8081d78:	4770      	bxeq	lr
 8081d7a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8081d7e:	bf04      	itt	eq
 8081d80:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8081d84:	4770      	bxeq	lr
 8081d86:	b530      	push	{r4, r5, lr}
 8081d88:	f44f 7460 	mov.w	r4, #896	; 0x380
 8081d8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8081d90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8081d94:	e71c      	b.n	8081bd0 <__adddf3+0x138>
 8081d96:	bf00      	nop

08081d98 <__aeabi_ul2d>:
 8081d98:	ea50 0201 	orrs.w	r2, r0, r1
 8081d9c:	bf08      	it	eq
 8081d9e:	4770      	bxeq	lr
 8081da0:	b530      	push	{r4, r5, lr}
 8081da2:	f04f 0500 	mov.w	r5, #0
 8081da6:	e00a      	b.n	8081dbe <__aeabi_l2d+0x16>

08081da8 <__aeabi_l2d>:
 8081da8:	ea50 0201 	orrs.w	r2, r0, r1
 8081dac:	bf08      	it	eq
 8081dae:	4770      	bxeq	lr
 8081db0:	b530      	push	{r4, r5, lr}
 8081db2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8081db6:	d502      	bpl.n	8081dbe <__aeabi_l2d+0x16>
 8081db8:	4240      	negs	r0, r0
 8081dba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8081dbe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8081dc2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8081dc6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8081dca:	f43f aed8 	beq.w	8081b7e <__adddf3+0xe6>
 8081dce:	f04f 0203 	mov.w	r2, #3
 8081dd2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8081dd6:	bf18      	it	ne
 8081dd8:	3203      	addne	r2, #3
 8081dda:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8081dde:	bf18      	it	ne
 8081de0:	3203      	addne	r2, #3
 8081de2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8081de6:	f1c2 0320 	rsb	r3, r2, #32
 8081dea:	fa00 fc03 	lsl.w	ip, r0, r3
 8081dee:	fa20 f002 	lsr.w	r0, r0, r2
 8081df2:	fa01 fe03 	lsl.w	lr, r1, r3
 8081df6:	ea40 000e 	orr.w	r0, r0, lr
 8081dfa:	fa21 f102 	lsr.w	r1, r1, r2
 8081dfe:	4414      	add	r4, r2
 8081e00:	e6bd      	b.n	8081b7e <__adddf3+0xe6>
 8081e02:	bf00      	nop

08081e04 <__aeabi_dmul>:
 8081e04:	b570      	push	{r4, r5, r6, lr}
 8081e06:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8081e0a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8081e0e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8081e12:	bf1d      	ittte	ne
 8081e14:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8081e18:	ea94 0f0c 	teqne	r4, ip
 8081e1c:	ea95 0f0c 	teqne	r5, ip
 8081e20:	f000 f8de 	bleq	8081fe0 <__aeabi_dmul+0x1dc>
 8081e24:	442c      	add	r4, r5
 8081e26:	ea81 0603 	eor.w	r6, r1, r3
 8081e2a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8081e2e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8081e32:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8081e36:	bf18      	it	ne
 8081e38:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8081e3c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8081e40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8081e44:	d038      	beq.n	8081eb8 <__aeabi_dmul+0xb4>
 8081e46:	fba0 ce02 	umull	ip, lr, r0, r2
 8081e4a:	f04f 0500 	mov.w	r5, #0
 8081e4e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8081e52:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8081e56:	fbe0 e503 	umlal	lr, r5, r0, r3
 8081e5a:	f04f 0600 	mov.w	r6, #0
 8081e5e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8081e62:	f09c 0f00 	teq	ip, #0
 8081e66:	bf18      	it	ne
 8081e68:	f04e 0e01 	orrne.w	lr, lr, #1
 8081e6c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8081e70:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8081e74:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8081e78:	d204      	bcs.n	8081e84 <__aeabi_dmul+0x80>
 8081e7a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8081e7e:	416d      	adcs	r5, r5
 8081e80:	eb46 0606 	adc.w	r6, r6, r6
 8081e84:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8081e88:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8081e8c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8081e90:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8081e94:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8081e98:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8081e9c:	bf88      	it	hi
 8081e9e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8081ea2:	d81e      	bhi.n	8081ee2 <__aeabi_dmul+0xde>
 8081ea4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8081ea8:	bf08      	it	eq
 8081eaa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8081eae:	f150 0000 	adcs.w	r0, r0, #0
 8081eb2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8081eb6:	bd70      	pop	{r4, r5, r6, pc}
 8081eb8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8081ebc:	ea46 0101 	orr.w	r1, r6, r1
 8081ec0:	ea40 0002 	orr.w	r0, r0, r2
 8081ec4:	ea81 0103 	eor.w	r1, r1, r3
 8081ec8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8081ecc:	bfc2      	ittt	gt
 8081ece:	ebd4 050c 	rsbsgt	r5, r4, ip
 8081ed2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8081ed6:	bd70      	popgt	{r4, r5, r6, pc}
 8081ed8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8081edc:	f04f 0e00 	mov.w	lr, #0
 8081ee0:	3c01      	subs	r4, #1
 8081ee2:	f300 80ab 	bgt.w	808203c <__aeabi_dmul+0x238>
 8081ee6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8081eea:	bfde      	ittt	le
 8081eec:	2000      	movle	r0, #0
 8081eee:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8081ef2:	bd70      	pople	{r4, r5, r6, pc}
 8081ef4:	f1c4 0400 	rsb	r4, r4, #0
 8081ef8:	3c20      	subs	r4, #32
 8081efa:	da35      	bge.n	8081f68 <__aeabi_dmul+0x164>
 8081efc:	340c      	adds	r4, #12
 8081efe:	dc1b      	bgt.n	8081f38 <__aeabi_dmul+0x134>
 8081f00:	f104 0414 	add.w	r4, r4, #20
 8081f04:	f1c4 0520 	rsb	r5, r4, #32
 8081f08:	fa00 f305 	lsl.w	r3, r0, r5
 8081f0c:	fa20 f004 	lsr.w	r0, r0, r4
 8081f10:	fa01 f205 	lsl.w	r2, r1, r5
 8081f14:	ea40 0002 	orr.w	r0, r0, r2
 8081f18:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8081f1c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8081f20:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8081f24:	fa21 f604 	lsr.w	r6, r1, r4
 8081f28:	eb42 0106 	adc.w	r1, r2, r6
 8081f2c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8081f30:	bf08      	it	eq
 8081f32:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8081f36:	bd70      	pop	{r4, r5, r6, pc}
 8081f38:	f1c4 040c 	rsb	r4, r4, #12
 8081f3c:	f1c4 0520 	rsb	r5, r4, #32
 8081f40:	fa00 f304 	lsl.w	r3, r0, r4
 8081f44:	fa20 f005 	lsr.w	r0, r0, r5
 8081f48:	fa01 f204 	lsl.w	r2, r1, r4
 8081f4c:	ea40 0002 	orr.w	r0, r0, r2
 8081f50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8081f54:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8081f58:	f141 0100 	adc.w	r1, r1, #0
 8081f5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8081f60:	bf08      	it	eq
 8081f62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8081f66:	bd70      	pop	{r4, r5, r6, pc}
 8081f68:	f1c4 0520 	rsb	r5, r4, #32
 8081f6c:	fa00 f205 	lsl.w	r2, r0, r5
 8081f70:	ea4e 0e02 	orr.w	lr, lr, r2
 8081f74:	fa20 f304 	lsr.w	r3, r0, r4
 8081f78:	fa01 f205 	lsl.w	r2, r1, r5
 8081f7c:	ea43 0302 	orr.w	r3, r3, r2
 8081f80:	fa21 f004 	lsr.w	r0, r1, r4
 8081f84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8081f88:	fa21 f204 	lsr.w	r2, r1, r4
 8081f8c:	ea20 0002 	bic.w	r0, r0, r2
 8081f90:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8081f94:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8081f98:	bf08      	it	eq
 8081f9a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8081f9e:	bd70      	pop	{r4, r5, r6, pc}
 8081fa0:	f094 0f00 	teq	r4, #0
 8081fa4:	d10f      	bne.n	8081fc6 <__aeabi_dmul+0x1c2>
 8081fa6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8081faa:	0040      	lsls	r0, r0, #1
 8081fac:	eb41 0101 	adc.w	r1, r1, r1
 8081fb0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8081fb4:	bf08      	it	eq
 8081fb6:	3c01      	subeq	r4, #1
 8081fb8:	d0f7      	beq.n	8081faa <__aeabi_dmul+0x1a6>
 8081fba:	ea41 0106 	orr.w	r1, r1, r6
 8081fbe:	f095 0f00 	teq	r5, #0
 8081fc2:	bf18      	it	ne
 8081fc4:	4770      	bxne	lr
 8081fc6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8081fca:	0052      	lsls	r2, r2, #1
 8081fcc:	eb43 0303 	adc.w	r3, r3, r3
 8081fd0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8081fd4:	bf08      	it	eq
 8081fd6:	3d01      	subeq	r5, #1
 8081fd8:	d0f7      	beq.n	8081fca <__aeabi_dmul+0x1c6>
 8081fda:	ea43 0306 	orr.w	r3, r3, r6
 8081fde:	4770      	bx	lr
 8081fe0:	ea94 0f0c 	teq	r4, ip
 8081fe4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8081fe8:	bf18      	it	ne
 8081fea:	ea95 0f0c 	teqne	r5, ip
 8081fee:	d00c      	beq.n	808200a <__aeabi_dmul+0x206>
 8081ff0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8081ff4:	bf18      	it	ne
 8081ff6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8081ffa:	d1d1      	bne.n	8081fa0 <__aeabi_dmul+0x19c>
 8081ffc:	ea81 0103 	eor.w	r1, r1, r3
 8082000:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8082004:	f04f 0000 	mov.w	r0, #0
 8082008:	bd70      	pop	{r4, r5, r6, pc}
 808200a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808200e:	bf06      	itte	eq
 8082010:	4610      	moveq	r0, r2
 8082012:	4619      	moveq	r1, r3
 8082014:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8082018:	d019      	beq.n	808204e <__aeabi_dmul+0x24a>
 808201a:	ea94 0f0c 	teq	r4, ip
 808201e:	d102      	bne.n	8082026 <__aeabi_dmul+0x222>
 8082020:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8082024:	d113      	bne.n	808204e <__aeabi_dmul+0x24a>
 8082026:	ea95 0f0c 	teq	r5, ip
 808202a:	d105      	bne.n	8082038 <__aeabi_dmul+0x234>
 808202c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8082030:	bf1c      	itt	ne
 8082032:	4610      	movne	r0, r2
 8082034:	4619      	movne	r1, r3
 8082036:	d10a      	bne.n	808204e <__aeabi_dmul+0x24a>
 8082038:	ea81 0103 	eor.w	r1, r1, r3
 808203c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8082040:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8082044:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8082048:	f04f 0000 	mov.w	r0, #0
 808204c:	bd70      	pop	{r4, r5, r6, pc}
 808204e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8082052:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8082056:	bd70      	pop	{r4, r5, r6, pc}

08082058 <__aeabi_ddiv>:
 8082058:	b570      	push	{r4, r5, r6, lr}
 808205a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808205e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8082062:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8082066:	bf1d      	ittte	ne
 8082068:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808206c:	ea94 0f0c 	teqne	r4, ip
 8082070:	ea95 0f0c 	teqne	r5, ip
 8082074:	f000 f8a7 	bleq	80821c6 <__aeabi_ddiv+0x16e>
 8082078:	eba4 0405 	sub.w	r4, r4, r5
 808207c:	ea81 0e03 	eor.w	lr, r1, r3
 8082080:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8082084:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8082088:	f000 8088 	beq.w	808219c <__aeabi_ddiv+0x144>
 808208c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8082090:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8082094:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8082098:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 808209c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80820a0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80820a4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80820a8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80820ac:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80820b0:	429d      	cmp	r5, r3
 80820b2:	bf08      	it	eq
 80820b4:	4296      	cmpeq	r6, r2
 80820b6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80820ba:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80820be:	d202      	bcs.n	80820c6 <__aeabi_ddiv+0x6e>
 80820c0:	085b      	lsrs	r3, r3, #1
 80820c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80820c6:	1ab6      	subs	r6, r6, r2
 80820c8:	eb65 0503 	sbc.w	r5, r5, r3
 80820cc:	085b      	lsrs	r3, r3, #1
 80820ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80820d2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80820d6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80820da:	ebb6 0e02 	subs.w	lr, r6, r2
 80820de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80820e2:	bf22      	ittt	cs
 80820e4:	1ab6      	subcs	r6, r6, r2
 80820e6:	4675      	movcs	r5, lr
 80820e8:	ea40 000c 	orrcs.w	r0, r0, ip
 80820ec:	085b      	lsrs	r3, r3, #1
 80820ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80820f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80820f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80820fa:	bf22      	ittt	cs
 80820fc:	1ab6      	subcs	r6, r6, r2
 80820fe:	4675      	movcs	r5, lr
 8082100:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8082104:	085b      	lsrs	r3, r3, #1
 8082106:	ea4f 0232 	mov.w	r2, r2, rrx
 808210a:	ebb6 0e02 	subs.w	lr, r6, r2
 808210e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8082112:	bf22      	ittt	cs
 8082114:	1ab6      	subcs	r6, r6, r2
 8082116:	4675      	movcs	r5, lr
 8082118:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808211c:	085b      	lsrs	r3, r3, #1
 808211e:	ea4f 0232 	mov.w	r2, r2, rrx
 8082122:	ebb6 0e02 	subs.w	lr, r6, r2
 8082126:	eb75 0e03 	sbcs.w	lr, r5, r3
 808212a:	bf22      	ittt	cs
 808212c:	1ab6      	subcs	r6, r6, r2
 808212e:	4675      	movcs	r5, lr
 8082130:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8082134:	ea55 0e06 	orrs.w	lr, r5, r6
 8082138:	d018      	beq.n	808216c <__aeabi_ddiv+0x114>
 808213a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 808213e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8082142:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8082146:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 808214a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 808214e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8082152:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8082156:	d1c0      	bne.n	80820da <__aeabi_ddiv+0x82>
 8082158:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808215c:	d10b      	bne.n	8082176 <__aeabi_ddiv+0x11e>
 808215e:	ea41 0100 	orr.w	r1, r1, r0
 8082162:	f04f 0000 	mov.w	r0, #0
 8082166:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 808216a:	e7b6      	b.n	80820da <__aeabi_ddiv+0x82>
 808216c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8082170:	bf04      	itt	eq
 8082172:	4301      	orreq	r1, r0
 8082174:	2000      	moveq	r0, #0
 8082176:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808217a:	bf88      	it	hi
 808217c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8082180:	f63f aeaf 	bhi.w	8081ee2 <__aeabi_dmul+0xde>
 8082184:	ebb5 0c03 	subs.w	ip, r5, r3
 8082188:	bf04      	itt	eq
 808218a:	ebb6 0c02 	subseq.w	ip, r6, r2
 808218e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8082192:	f150 0000 	adcs.w	r0, r0, #0
 8082196:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808219a:	bd70      	pop	{r4, r5, r6, pc}
 808219c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80821a0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80821a4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80821a8:	bfc2      	ittt	gt
 80821aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80821ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80821b2:	bd70      	popgt	{r4, r5, r6, pc}
 80821b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80821b8:	f04f 0e00 	mov.w	lr, #0
 80821bc:	3c01      	subs	r4, #1
 80821be:	e690      	b.n	8081ee2 <__aeabi_dmul+0xde>
 80821c0:	ea45 0e06 	orr.w	lr, r5, r6
 80821c4:	e68d      	b.n	8081ee2 <__aeabi_dmul+0xde>
 80821c6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80821ca:	ea94 0f0c 	teq	r4, ip
 80821ce:	bf08      	it	eq
 80821d0:	ea95 0f0c 	teqeq	r5, ip
 80821d4:	f43f af3b 	beq.w	808204e <__aeabi_dmul+0x24a>
 80821d8:	ea94 0f0c 	teq	r4, ip
 80821dc:	d10a      	bne.n	80821f4 <__aeabi_ddiv+0x19c>
 80821de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80821e2:	f47f af34 	bne.w	808204e <__aeabi_dmul+0x24a>
 80821e6:	ea95 0f0c 	teq	r5, ip
 80821ea:	f47f af25 	bne.w	8082038 <__aeabi_dmul+0x234>
 80821ee:	4610      	mov	r0, r2
 80821f0:	4619      	mov	r1, r3
 80821f2:	e72c      	b.n	808204e <__aeabi_dmul+0x24a>
 80821f4:	ea95 0f0c 	teq	r5, ip
 80821f8:	d106      	bne.n	8082208 <__aeabi_ddiv+0x1b0>
 80821fa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80821fe:	f43f aefd 	beq.w	8081ffc <__aeabi_dmul+0x1f8>
 8082202:	4610      	mov	r0, r2
 8082204:	4619      	mov	r1, r3
 8082206:	e722      	b.n	808204e <__aeabi_dmul+0x24a>
 8082208:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808220c:	bf18      	it	ne
 808220e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8082212:	f47f aec5 	bne.w	8081fa0 <__aeabi_dmul+0x19c>
 8082216:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 808221a:	f47f af0d 	bne.w	8082038 <__aeabi_dmul+0x234>
 808221e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8082222:	f47f aeeb 	bne.w	8081ffc <__aeabi_dmul+0x1f8>
 8082226:	e712      	b.n	808204e <__aeabi_dmul+0x24a>

08082228 <__gedf2>:
 8082228:	f04f 3cff 	mov.w	ip, #4294967295
 808222c:	e006      	b.n	808223c <__cmpdf2+0x4>
 808222e:	bf00      	nop

08082230 <__ledf2>:
 8082230:	f04f 0c01 	mov.w	ip, #1
 8082234:	e002      	b.n	808223c <__cmpdf2+0x4>
 8082236:	bf00      	nop

08082238 <__cmpdf2>:
 8082238:	f04f 0c01 	mov.w	ip, #1
 808223c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8082240:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8082244:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8082248:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808224c:	bf18      	it	ne
 808224e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8082252:	d01b      	beq.n	808228c <__cmpdf2+0x54>
 8082254:	b001      	add	sp, #4
 8082256:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 808225a:	bf0c      	ite	eq
 808225c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8082260:	ea91 0f03 	teqne	r1, r3
 8082264:	bf02      	ittt	eq
 8082266:	ea90 0f02 	teqeq	r0, r2
 808226a:	2000      	moveq	r0, #0
 808226c:	4770      	bxeq	lr
 808226e:	f110 0f00 	cmn.w	r0, #0
 8082272:	ea91 0f03 	teq	r1, r3
 8082276:	bf58      	it	pl
 8082278:	4299      	cmppl	r1, r3
 808227a:	bf08      	it	eq
 808227c:	4290      	cmpeq	r0, r2
 808227e:	bf2c      	ite	cs
 8082280:	17d8      	asrcs	r0, r3, #31
 8082282:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8082286:	f040 0001 	orr.w	r0, r0, #1
 808228a:	4770      	bx	lr
 808228c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8082290:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8082294:	d102      	bne.n	808229c <__cmpdf2+0x64>
 8082296:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808229a:	d107      	bne.n	80822ac <__cmpdf2+0x74>
 808229c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80822a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80822a4:	d1d6      	bne.n	8082254 <__cmpdf2+0x1c>
 80822a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80822aa:	d0d3      	beq.n	8082254 <__cmpdf2+0x1c>
 80822ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80822b0:	4770      	bx	lr
 80822b2:	bf00      	nop

080822b4 <__aeabi_cdrcmple>:
 80822b4:	4684      	mov	ip, r0
 80822b6:	4610      	mov	r0, r2
 80822b8:	4662      	mov	r2, ip
 80822ba:	468c      	mov	ip, r1
 80822bc:	4619      	mov	r1, r3
 80822be:	4663      	mov	r3, ip
 80822c0:	e000      	b.n	80822c4 <__aeabi_cdcmpeq>
 80822c2:	bf00      	nop

080822c4 <__aeabi_cdcmpeq>:
 80822c4:	b501      	push	{r0, lr}
 80822c6:	f7ff ffb7 	bl	8082238 <__cmpdf2>
 80822ca:	2800      	cmp	r0, #0
 80822cc:	bf48      	it	mi
 80822ce:	f110 0f00 	cmnmi.w	r0, #0
 80822d2:	bd01      	pop	{r0, pc}

080822d4 <__aeabi_dcmpeq>:
 80822d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80822d8:	f7ff fff4 	bl	80822c4 <__aeabi_cdcmpeq>
 80822dc:	bf0c      	ite	eq
 80822de:	2001      	moveq	r0, #1
 80822e0:	2000      	movne	r0, #0
 80822e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80822e6:	bf00      	nop

080822e8 <__aeabi_dcmplt>:
 80822e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80822ec:	f7ff ffea 	bl	80822c4 <__aeabi_cdcmpeq>
 80822f0:	bf34      	ite	cc
 80822f2:	2001      	movcc	r0, #1
 80822f4:	2000      	movcs	r0, #0
 80822f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80822fa:	bf00      	nop

080822fc <__aeabi_dcmple>:
 80822fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8082300:	f7ff ffe0 	bl	80822c4 <__aeabi_cdcmpeq>
 8082304:	bf94      	ite	ls
 8082306:	2001      	movls	r0, #1
 8082308:	2000      	movhi	r0, #0
 808230a:	f85d fb08 	ldr.w	pc, [sp], #8
 808230e:	bf00      	nop

08082310 <__aeabi_dcmpge>:
 8082310:	f84d ed08 	str.w	lr, [sp, #-8]!
 8082314:	f7ff ffce 	bl	80822b4 <__aeabi_cdrcmple>
 8082318:	bf94      	ite	ls
 808231a:	2001      	movls	r0, #1
 808231c:	2000      	movhi	r0, #0
 808231e:	f85d fb08 	ldr.w	pc, [sp], #8
 8082322:	bf00      	nop

08082324 <__aeabi_dcmpgt>:
 8082324:	f84d ed08 	str.w	lr, [sp, #-8]!
 8082328:	f7ff ffc4 	bl	80822b4 <__aeabi_cdrcmple>
 808232c:	bf34      	ite	cc
 808232e:	2001      	movcc	r0, #1
 8082330:	2000      	movcs	r0, #0
 8082332:	f85d fb08 	ldr.w	pc, [sp], #8
 8082336:	bf00      	nop

08082338 <__aeabi_dcmpun>:
 8082338:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808233c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8082340:	d102      	bne.n	8082348 <__aeabi_dcmpun+0x10>
 8082342:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8082346:	d10a      	bne.n	808235e <__aeabi_dcmpun+0x26>
 8082348:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808234c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8082350:	d102      	bne.n	8082358 <__aeabi_dcmpun+0x20>
 8082352:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8082356:	d102      	bne.n	808235e <__aeabi_dcmpun+0x26>
 8082358:	f04f 0000 	mov.w	r0, #0
 808235c:	4770      	bx	lr
 808235e:	f04f 0001 	mov.w	r0, #1
 8082362:	4770      	bx	lr

08082364 <__aeabi_d2iz>:
 8082364:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8082368:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808236c:	d215      	bcs.n	808239a <__aeabi_d2iz+0x36>
 808236e:	d511      	bpl.n	8082394 <__aeabi_d2iz+0x30>
 8082370:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8082374:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8082378:	d912      	bls.n	80823a0 <__aeabi_d2iz+0x3c>
 808237a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808237e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8082382:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8082386:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808238a:	fa23 f002 	lsr.w	r0, r3, r2
 808238e:	bf18      	it	ne
 8082390:	4240      	negne	r0, r0
 8082392:	4770      	bx	lr
 8082394:	f04f 0000 	mov.w	r0, #0
 8082398:	4770      	bx	lr
 808239a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808239e:	d105      	bne.n	80823ac <__aeabi_d2iz+0x48>
 80823a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80823a4:	bf08      	it	eq
 80823a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80823aa:	4770      	bx	lr
 80823ac:	f04f 0000 	mov.w	r0, #0
 80823b0:	4770      	bx	lr
 80823b2:	bf00      	nop

080823b4 <__aeabi_d2uiz>:
 80823b4:	004a      	lsls	r2, r1, #1
 80823b6:	d211      	bcs.n	80823dc <__aeabi_d2uiz+0x28>
 80823b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80823bc:	d211      	bcs.n	80823e2 <__aeabi_d2uiz+0x2e>
 80823be:	d50d      	bpl.n	80823dc <__aeabi_d2uiz+0x28>
 80823c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80823c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80823c8:	d40e      	bmi.n	80823e8 <__aeabi_d2uiz+0x34>
 80823ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80823ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80823d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80823d6:	fa23 f002 	lsr.w	r0, r3, r2
 80823da:	4770      	bx	lr
 80823dc:	f04f 0000 	mov.w	r0, #0
 80823e0:	4770      	bx	lr
 80823e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80823e6:	d102      	bne.n	80823ee <__aeabi_d2uiz+0x3a>
 80823e8:	f04f 30ff 	mov.w	r0, #4294967295
 80823ec:	4770      	bx	lr
 80823ee:	f04f 0000 	mov.w	r0, #0
 80823f2:	4770      	bx	lr

080823f4 <__cxa_atexit>:
 80823f4:	b510      	push	{r4, lr}
 80823f6:	4604      	mov	r4, r0
 80823f8:	4804      	ldr	r0, [pc, #16]	; (808240c <__cxa_atexit+0x18>)
 80823fa:	4613      	mov	r3, r2
 80823fc:	b120      	cbz	r0, 8082408 <__cxa_atexit+0x14>
 80823fe:	460a      	mov	r2, r1
 8082400:	2002      	movs	r0, #2
 8082402:	4621      	mov	r1, r4
 8082404:	f3af 8000 	nop.w
 8082408:	bd10      	pop	{r4, pc}
 808240a:	bf00      	nop
 808240c:	00000000 	.word	0x00000000

08082410 <memcpy>:
 8082410:	440a      	add	r2, r1
 8082412:	4291      	cmp	r1, r2
 8082414:	f100 33ff 	add.w	r3, r0, #4294967295
 8082418:	d100      	bne.n	808241c <memcpy+0xc>
 808241a:	4770      	bx	lr
 808241c:	b510      	push	{r4, lr}
 808241e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8082422:	4291      	cmp	r1, r2
 8082424:	f803 4f01 	strb.w	r4, [r3, #1]!
 8082428:	d1f9      	bne.n	808241e <memcpy+0xe>
 808242a:	bd10      	pop	{r4, pc}

0808242c <memset>:
 808242c:	4603      	mov	r3, r0
 808242e:	4402      	add	r2, r0
 8082430:	4293      	cmp	r3, r2
 8082432:	d100      	bne.n	8082436 <memset+0xa>
 8082434:	4770      	bx	lr
 8082436:	f803 1b01 	strb.w	r1, [r3], #1
 808243a:	e7f9      	b.n	8082430 <memset+0x4>

0808243c <srand>:
 808243c:	b538      	push	{r3, r4, r5, lr}
 808243e:	4b0d      	ldr	r3, [pc, #52]	; (8082474 <srand+0x38>)
 8082440:	4604      	mov	r4, r0
 8082442:	681d      	ldr	r5, [r3, #0]
 8082444:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8082446:	b97b      	cbnz	r3, 8082468 <srand+0x2c>
 8082448:	2018      	movs	r0, #24
 808244a:	f7fe fa7f 	bl	808094c <malloc>
 808244e:	4a0a      	ldr	r2, [pc, #40]	; (8082478 <srand+0x3c>)
 8082450:	4b0a      	ldr	r3, [pc, #40]	; (808247c <srand+0x40>)
 8082452:	63a8      	str	r0, [r5, #56]	; 0x38
 8082454:	e9c0 2300 	strd	r2, r3, [r0]
 8082458:	4b09      	ldr	r3, [pc, #36]	; (8082480 <srand+0x44>)
 808245a:	2201      	movs	r2, #1
 808245c:	6083      	str	r3, [r0, #8]
 808245e:	230b      	movs	r3, #11
 8082460:	8183      	strh	r3, [r0, #12]
 8082462:	2300      	movs	r3, #0
 8082464:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8082468:	2200      	movs	r2, #0
 808246a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 808246c:	611c      	str	r4, [r3, #16]
 808246e:	615a      	str	r2, [r3, #20]
 8082470:	bd38      	pop	{r3, r4, r5, pc}
 8082472:	bf00      	nop
 8082474:	20000010 	.word	0x20000010
 8082478:	abcd330e 	.word	0xabcd330e
 808247c:	e66d1234 	.word	0xe66d1234
 8082480:	0005deec 	.word	0x0005deec

08082484 <strlen>:
 8082484:	4603      	mov	r3, r0
 8082486:	f813 2b01 	ldrb.w	r2, [r3], #1
 808248a:	2a00      	cmp	r2, #0
 808248c:	d1fb      	bne.n	8082486 <strlen+0x2>
 808248e:	1a18      	subs	r0, r3, r0
 8082490:	3801      	subs	r0, #1
 8082492:	4770      	bx	lr

08082494 <dynalib_user>:
 8082494:	0021 0808 0061 0808 0089 0808 008d 0808     !...a...........
 80824a4:	0000 0000 504d 3655 3530 2030 6f63 6e6e     ....MPU6050 conn
 80824b4:	6365 6974 6e6f 7320 6375 6563 7373 7566     ection successfu
 80824c4:	006c 504d 3655 3530 2030 6f63 6e6e 6365     l.MPU6050 connec
 80824d4:	6974 6e6f 6620 6961 656c 0064 6e49 7469     tion failed.Init
 80824e4:	4920 4332 6420 7665 6369 2e65 2e2e 7400      I2C device....t
 80824f4:	7365 6974 676e 4d20 5550 3036 3035 6320     esting MPU6050 c
 8082504:	6e6f 656e 7463 6f69 2e6e 2e2e 4100 676e     onnection....Ang
 8082514:	656c 3d58 0020 6e41 6c67 5965 203d 4100     leX= .AngleY= .A
 8082524:	676e 656c 3d5a 0020 2d2d 2d2d 2d2d 2d2d     ngleZ= .--------
 8082534:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
 8082544:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
 8082554:	002d 616e 006e 6e69 0066 766f 0066 7061     -.nan.inf.ovf.ap
 8082564:	0070 5925 252d 2d6d 6425 2554 3a48 4d25     p.%Y-%m-%dT%H:%M
 8082574:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

08082584 <_ZTV9IPAddress>:
	...
 808258c:	0e33 0808 0e31 0808 0e65 0808               3...1...e...

08082598 <_ZTV9USBSerial>:
	...
 80825a0:	0ed5 0808 0f3b 0808 0f13 0808 09f5 0808     ....;...........
 80825b0:	0f05 0808 0ed7 0808 0ee7 0808 0f35 0808     ............5...
 80825c0:	0ef7 0808 0ed1 0808                         ........

080825c8 <_ZTVN5spark13CellularClassE>:
	...
 80825d0:	110b 0808 1101 0808 10f7 0808 1071 0808     ............q...
 80825e0:	10eb 0808 10df 0808 136f 0808 1377 0808     ........o...w...
 80825f0:	10d3 0808 10cb 0808 10c1 0808 10b7 0808     ................
 8082600:	107b 0808                                   {...

08082604 <_ZTV11USARTSerial>:
	...
 808260c:	1145 0808 11ad 0808 1189 0808 09f5 0808     E...............
 808261c:	1159 0808 1175 0808 1167 0808 1183 0808     Y...u...g.......
 808262c:	1147 0808 114b 0808                         G...K...

08082634 <_ZTV7TwoWire>:
	...
 808263c:	1239 0808 1283 0808 125b 0808 123b 0808     9.......[...;...
 808264c:	1263 0808 126b 0808 1273 0808 127b 0808     c...k...s...{...

0808265c <_ZTVN5spark12NetworkClassE>:
	...
 8082664:	132f 0808 1339 0808 1343 0808 134d 0808     /...9...C...M...
 8082674:	1357 0808 1363 0808 136f 0808 1377 0808     W...c...o...w...
 8082684:	137f 0808 138b 0808 1393 0808 139d 0808     ................
 8082694:	13a9 0808                                   ....

08082698 <_ZSt7nothrow>:
	...

080826a0 <CSWTCH.8>:
 80826a0:	2d18 5444 21fb bfe9 21d2 7f33 d97c 4002     .-DT.!...!3.|..@
 80826b0:	21d2 7f33 d97c c002                         .!3.|...

080826b8 <CSWTCH.9>:
 80826b8:	0000 0000 0000 8000 2d18 5444 21fb 4009     .........-DT.!.@
 80826c8:	2d18 5444 21fb c009                         .-DT.!..

080826d0 <atanhi>:
 80826d0:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
 80826e0:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

080826f0 <atanlo>:
 80826f0:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
 8082700:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

08082710 <link_const_variable_data_end>:
 8082710:	080802f5 	.word	0x080802f5
 8082714:	080809b9 	.word	0x080809b9
 8082718:	08080c51 	.word	0x08080c51
 808271c:	08080c61 	.word	0x08080c61
 8082720:	08080cb1 	.word	0x08080cb1
 8082724:	08081115 	.word	0x08081115
 8082728:	080813f1 	.word	0x080813f1
 808272c:	080814c5 	.word	0x080814c5
