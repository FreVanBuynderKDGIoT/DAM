
c:/Users/freva/Documents/Simulate2_code/DAM/target/2.1.0/photon/DAM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002710  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a2730  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  20000000  080a2734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000524  20000078  20000078  00030078  2**3
                  ALLOC
  6 .module_info_suffix 00000028  080a27a8  080a27a8  000227a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a27d0  080a27d0  000227d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0011bf80  00000000  00000000  000227d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00013c0f  00000000  00000000  0013e754  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001a92a  00000000  00000000  00152363  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002480  00000000  00000000  0016cc8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004a10  00000000  00000000  0016f10d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00028ee4  00000000  00000000  00173b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002d656  00000000  00000000  0019ca01  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b3b2b  00000000  00000000  001ca057  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006010  00000000  00000000  0027db84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f002 f9ed 	bl	80a2410 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f002 f9f5 	bl	80a242c <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a2734 	.word	0x080a2734
 80a0050:	20000074 	.word	0x20000074
 80a0054:	20000078 	.word	0x20000078
 80a0058:	2000059c 	.word	0x2000059c
 80a005c:	2000059c 	.word	0x2000059c

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f000 feb1 	bl	80a0dc8 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0066:	2500      	movs	r5, #0
 80a0068:	4e05      	ldr	r6, [pc, #20]	; (80a0080 <module_user_init+0x20>)
 80a006a:	4c06      	ldr	r4, [pc, #24]	; (80a0084 <module_user_init+0x24>)
 80a006c:	1ba4      	subs	r4, r4, r6
 80a006e:	08a4      	lsrs	r4, r4, #2
 80a0070:	42a5      	cmp	r5, r4
 80a0072:	d100      	bne.n	80a0076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0076:	f856 3b04 	ldr.w	r3, [r6], #4
 80a007a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f7      	b.n	80a0070 <module_user_init+0x10>
 80a0080:	080a2710 	.word	0x080a2710
 80a0084:	080a2730 	.word	0x080a2730

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b814 	b.w	80a00b4 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f857 	bl	80a0140 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0096:	f000 be59 	b.w	80a0d4c <_post_loop>

080a009a <_Znaj>:
 80a009a:	f000 bc5b 	b.w	80a0954 <malloc>

080a009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009e:	f000 bc61 	b.w	80a0964 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <setup>:
#define LED_PIN D7

bool blinkState = false;

// setup() runs once, when the device is first turned on.
void setup() {
 80a00b4:	b510      	push	{r4, lr}
  Wire.begin();
 80a00b6:	f001 fa3b 	bl	80a1530 <_Z19__fetch_global_Wirev>
 80a00ba:	f001 f8a3 	bl	80a1204 <_ZN7TwoWire5beginEv>

  Serial.begin(38400);
 80a00be:	f000 ff83 	bl	80a0fc8 <_Z16_fetch_usbserialv>
 80a00c2:	f44f 4116 	mov.w	r1, #38400	; 0x9600
 80a00c6:	f000 ff65 	bl	80a0f94 <_ZN9USBSerial5beginEl>

  Serial.println("Init I2C device...");
 80a00ca:	f000 ff7d 	bl	80a0fc8 <_Z16_fetch_usbserialv>
 80a00ce:	490f      	ldr	r1, [pc, #60]	; (80a010c <setup+0x58>)
 80a00d0:	f000 fccd 	bl	80a0a6e <_ZN5Print7printlnEPKc>
  accelgyro.initialize();
 80a00d4:	480e      	ldr	r0, [pc, #56]	; (80a0110 <setup+0x5c>)
 80a00d6:	f000 f972 	bl	80a03be <_ZN7MPU605010initializeEv>

  Serial.println("testing MPU6050 connection...");
 80a00da:	f000 ff75 	bl	80a0fc8 <_Z16_fetch_usbserialv>
 80a00de:	490d      	ldr	r1, [pc, #52]	; (80a0114 <setup+0x60>)
 80a00e0:	f000 fcc5 	bl	80a0a6e <_ZN5Print7printlnEPKc>
  Serial.println(accelgyro.testConnection() ? "MPU6050 connection successful" : "MPU6050 connection failed");
 80a00e4:	f000 ff70 	bl	80a0fc8 <_Z16_fetch_usbserialv>
 80a00e8:	4604      	mov	r4, r0
 80a00ea:	4809      	ldr	r0, [pc, #36]	; (80a0110 <setup+0x5c>)
 80a00ec:	f000 f98e 	bl	80a040c <_ZN7MPU605014testConnectionEv>
 80a00f0:	4a09      	ldr	r2, [pc, #36]	; (80a0118 <setup+0x64>)
 80a00f2:	490a      	ldr	r1, [pc, #40]	; (80a011c <setup+0x68>)
 80a00f4:	2800      	cmp	r0, #0
 80a00f6:	bf18      	it	ne
 80a00f8:	4611      	movne	r1, r2
 80a00fa:	4620      	mov	r0, r4
 80a00fc:	f000 fcb7 	bl	80a0a6e <_ZN5Print7printlnEPKc>

  pinMode(LED_PIN, OUTPUT);

}
 80a0100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pinMode(LED_PIN, OUTPUT);
 80a0104:	2101      	movs	r1, #1
 80a0106:	2007      	movs	r0, #7
 80a0108:	f001 b9d0 	b.w	80a14ac <pinMode>
 80a010c:	080a24e0 	.word	0x080a24e0
 80a0110:	2000007c 	.word	0x2000007c
 80a0114:	080a24f3 	.word	0x080a24f3
 80a0118:	080a24a8 	.word	0x080a24a8
 80a011c:	080a24c6 	.word	0x080a24c6

080a0120 <_ZSt5atan2IiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
 80a0120:	b570      	push	{r4, r5, r6, lr}
 80a0122:	4606      	mov	r6, r0
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
 80a0124:	4608      	mov	r0, r1
 80a0126:	f001 fe03 	bl	80a1d30 <__aeabi_i2d>
 80a012a:	4604      	mov	r4, r0
 80a012c:	460d      	mov	r5, r1
 80a012e:	4630      	mov	r0, r6
 80a0130:	f001 fdfe 	bl	80a1d30 <__aeabi_i2d>
 80a0134:	4622      	mov	r2, r4
 80a0136:	462b      	mov	r3, r5
    }
 80a0138:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return atan2(__type(__y), __type(__x));
 80a013c:	f001 ba2a 	b.w	80a1594 <atan2>

080a0140 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80a0140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  // The core of your code will likely live here.
  accelgyro.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);

  xAng = map(ax, minVal, maxVal, -90, 90);
 80a0144:	f04f 085a 	mov.w	r8, #90	; 0x5a
  accelgyro.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
 80a0148:	4b57      	ldr	r3, [pc, #348]	; (80a02a8 <loop+0x168>)
void loop() {
 80a014a:	b085      	sub	sp, #20
  accelgyro.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
 80a014c:	9302      	str	r3, [sp, #8]
 80a014e:	4b57      	ldr	r3, [pc, #348]	; (80a02ac <loop+0x16c>)
 80a0150:	f8df 919c 	ldr.w	r9, [pc, #412]	; 80a02f0 <loop+0x1b0>
 80a0154:	4c56      	ldr	r4, [pc, #344]	; (80a02b0 <loop+0x170>)
 80a0156:	4d57      	ldr	r5, [pc, #348]	; (80a02b4 <loop+0x174>)
 80a0158:	9301      	str	r3, [sp, #4]
 80a015a:	4b57      	ldr	r3, [pc, #348]	; (80a02b8 <loop+0x178>)
  xAng = map(ax, minVal, maxVal, -90, 90);
 80a015c:	4f57      	ldr	r7, [pc, #348]	; (80a02bc <loop+0x17c>)
 80a015e:	4e58      	ldr	r6, [pc, #352]	; (80a02c0 <loop+0x180>)
  accelgyro.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
 80a0160:	4622      	mov	r2, r4
 80a0162:	4629      	mov	r1, r5
 80a0164:	9300      	str	r3, [sp, #0]
 80a0166:	4857      	ldr	r0, [pc, #348]	; (80a02c4 <loop+0x184>)
 80a0168:	464b      	mov	r3, r9
 80a016a:	f000 f8e3 	bl	80a0334 <_ZN7MPU605010getMotion6EPsS0_S0_S0_S0_S0_>
  xAng = map(ax, minVal, maxVal, -90, 90);
 80a016e:	f8cd 8000 	str.w	r8, [sp]
 80a0172:	683a      	ldr	r2, [r7, #0]
 80a0174:	6831      	ldr	r1, [r6, #0]
 80a0176:	f06f 0359 	mvn.w	r3, #89	; 0x59
 80a017a:	f9b5 0000 	ldrsh.w	r0, [r5]
 80a017e:	f000 fd83 	bl	80a0c88 <_Z3mapiiiii>
 80a0182:	4d51      	ldr	r5, [pc, #324]	; (80a02c8 <loop+0x188>)
  yAng = map(ay, minVal, maxVal, -90, 90);
 80a0184:	f06f 0359 	mvn.w	r3, #89	; 0x59
  xAng = map(ax, minVal, maxVal, -90, 90);
 80a0188:	8028      	strh	r0, [r5, #0]
  yAng = map(ay, minVal, maxVal, -90, 90);
 80a018a:	f8cd 8000 	str.w	r8, [sp]
 80a018e:	683a      	ldr	r2, [r7, #0]
 80a0190:	6831      	ldr	r1, [r6, #0]
 80a0192:	f9b4 0000 	ldrsh.w	r0, [r4]
 80a0196:	f000 fd77 	bl	80a0c88 <_Z3mapiiiii>
 80a019a:	4c4c      	ldr	r4, [pc, #304]	; (80a02cc <loop+0x18c>)
  zAng = map(az, minVal, maxVal, -90, 90);
 80a019c:	f06f 0359 	mvn.w	r3, #89	; 0x59
  yAng = map(ay, minVal, maxVal, -90, 90);
 80a01a0:	8020      	strh	r0, [r4, #0]
  zAng = map(az, minVal, maxVal, -90, 90);
 80a01a2:	f8cd 8000 	str.w	r8, [sp]
 80a01a6:	683a      	ldr	r2, [r7, #0]
 80a01a8:	6831      	ldr	r1, [r6, #0]
 80a01aa:	f9b9 0000 	ldrsh.w	r0, [r9]
 80a01ae:	f000 fd6b 	bl	80a0c88 <_Z3mapiiiii>
 80a01b2:	4e47      	ldr	r6, [pc, #284]	; (80a02d0 <loop+0x190>)
 80a01b4:	b201      	sxth	r1, r0

  x= RAD_TO_DEG * (atan2(-yAng, -zAng)+PI);
 80a01b6:	f9b4 0000 	ldrsh.w	r0, [r4]
  zAng = map(az, minVal, maxVal, -90, 90);
 80a01ba:	8031      	strh	r1, [r6, #0]
  x= RAD_TO_DEG * (atan2(-yAng, -zAng)+PI);
 80a01bc:	4240      	negs	r0, r0
 80a01be:	4249      	negs	r1, r1
 80a01c0:	f7ff ffae 	bl	80a0120 <_ZSt5atan2IiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80a01c4:	a334      	add	r3, pc, #208	; (adr r3, 80a0298 <loop+0x158>)
 80a01c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a01ca:	f001 fc65 	bl	80a1a98 <__adddf3>
 80a01ce:	a334      	add	r3, pc, #208	; (adr r3, 80a02a0 <loop+0x160>)
 80a01d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a01d4:	f001 fe16 	bl	80a1e04 <__aeabi_dmul>
 80a01d8:	4f3e      	ldr	r7, [pc, #248]	; (80a02d4 <loop+0x194>)
 80a01da:	e9c7 0100 	strd	r0, r1, [r7]
  y= RAD_TO_DEG * (atan2(-xAng, -zAng)+PI);
 80a01de:	f9b6 1000 	ldrsh.w	r1, [r6]
 80a01e2:	f9b5 0000 	ldrsh.w	r0, [r5]
 80a01e6:	4249      	negs	r1, r1
 80a01e8:	4240      	negs	r0, r0
 80a01ea:	f7ff ff99 	bl	80a0120 <_ZSt5atan2IiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80a01ee:	a32a      	add	r3, pc, #168	; (adr r3, 80a0298 <loop+0x158>)
 80a01f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a01f4:	f001 fc50 	bl	80a1a98 <__adddf3>
 80a01f8:	a329      	add	r3, pc, #164	; (adr r3, 80a02a0 <loop+0x160>)
 80a01fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a01fe:	f001 fe01 	bl	80a1e04 <__aeabi_dmul>
 80a0202:	4e35      	ldr	r6, [pc, #212]	; (80a02d8 <loop+0x198>)
 80a0204:	e9c6 0100 	strd	r0, r1, [r6]
  z= RAD_TO_DEG * (atan2(-yAng, -xAng)+PI);
 80a0208:	f9b5 1000 	ldrsh.w	r1, [r5]
 80a020c:	f9b4 0000 	ldrsh.w	r0, [r4]
 80a0210:	4249      	negs	r1, r1
 80a0212:	4240      	negs	r0, r0
 80a0214:	f7ff ff84 	bl	80a0120 <_ZSt5atan2IiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80a0218:	a31f      	add	r3, pc, #124	; (adr r3, 80a0298 <loop+0x158>)
 80a021a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a021e:	f001 fc3b 	bl	80a1a98 <__adddf3>
 80a0222:	a31f      	add	r3, pc, #124	; (adr r3, 80a02a0 <loop+0x160>)
 80a0224:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0228:	f001 fdec 	bl	80a1e04 <__aeabi_dmul>

  Serial.print("AngleX= ");
  Serial.println(x);
 80a022c:	2402      	movs	r4, #2
  z= RAD_TO_DEG * (atan2(-yAng, -xAng)+PI);
 80a022e:	4d2b      	ldr	r5, [pc, #172]	; (80a02dc <loop+0x19c>)
 80a0230:	e9c5 0100 	strd	r0, r1, [r5]
  Serial.print("AngleX= ");
 80a0234:	f000 fec8 	bl	80a0fc8 <_Z16_fetch_usbserialv>
 80a0238:	4929      	ldr	r1, [pc, #164]	; (80a02e0 <loop+0x1a0>)
 80a023a:	f000 fc05 	bl	80a0a48 <_ZN5Print5printEPKc>
  Serial.println(x);
 80a023e:	f000 fec3 	bl	80a0fc8 <_Z16_fetch_usbserialv>
 80a0242:	9400      	str	r4, [sp, #0]
 80a0244:	e9d7 2300 	ldrd	r2, r3, [r7]
 80a0248:	f000 fcf8 	bl	80a0c3c <_ZN5Print7printlnEdi>
  
  Serial.print("AngleY= ");
 80a024c:	f000 febc 	bl	80a0fc8 <_Z16_fetch_usbserialv>
 80a0250:	4924      	ldr	r1, [pc, #144]	; (80a02e4 <loop+0x1a4>)
 80a0252:	f000 fbf9 	bl	80a0a48 <_ZN5Print5printEPKc>
  Serial.println(y);
 80a0256:	f000 feb7 	bl	80a0fc8 <_Z16_fetch_usbserialv>
 80a025a:	9400      	str	r4, [sp, #0]
 80a025c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80a0260:	f000 fcec 	bl	80a0c3c <_ZN5Print7printlnEdi>
  
  Serial.print("AngleZ= ");
 80a0264:	f000 feb0 	bl	80a0fc8 <_Z16_fetch_usbserialv>
 80a0268:	491f      	ldr	r1, [pc, #124]	; (80a02e8 <loop+0x1a8>)
 80a026a:	f000 fbed 	bl	80a0a48 <_ZN5Print5printEPKc>
  Serial.println(z);
 80a026e:	f000 feab 	bl	80a0fc8 <_Z16_fetch_usbserialv>
 80a0272:	9400      	str	r4, [sp, #0]
 80a0274:	e9d5 2300 	ldrd	r2, r3, [r5]
 80a0278:	f000 fce0 	bl	80a0c3c <_ZN5Print7printlnEdi>
  Serial.println("-----------------------------------------");
 80a027c:	f000 fea4 	bl	80a0fc8 <_Z16_fetch_usbserialv>
 80a0280:	491a      	ldr	r1, [pc, #104]	; (80a02ec <loop+0x1ac>)
 80a0282:	f000 fbf4 	bl	80a0a6e <_ZN5Print7printlnEPKc>
  delay(400);
 80a0286:	f44f 70c8 	mov.w	r0, #400	; 0x190

 80a028a:	b005      	add	sp, #20
 80a028c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  delay(400);
 80a0290:	f000 bd06 	b.w	80a0ca0 <delay>
 80a0294:	f3af 8000 	nop.w
 80a0298:	54442d18 	.word	0x54442d18
 80a029c:	400921fb 	.word	0x400921fb
 80a02a0:	1a63c1f8 	.word	0x1a63c1f8
 80a02a4:	404ca5dc 	.word	0x404ca5dc
 80a02a8:	20000096 	.word	0x20000096
 80a02ac:	20000094 	.word	0x20000094
 80a02b0:	2000008e 	.word	0x2000008e
 80a02b4:	2000008c 	.word	0x2000008c
 80a02b8:	20000092 	.word	0x20000092
 80a02bc:	20000000 	.word	0x20000000
 80a02c0:	20000004 	.word	0x20000004
 80a02c4:	2000007c 	.word	0x2000007c
 80a02c8:	200000a0 	.word	0x200000a0
 80a02cc:	200000b0 	.word	0x200000b0
 80a02d0:	200000c0 	.word	0x200000c0
 80a02d4:	20000098 	.word	0x20000098
 80a02d8:	200000a8 	.word	0x200000a8
 80a02dc:	200000b8 	.word	0x200000b8
 80a02e0:	080a2511 	.word	0x080a2511
 80a02e4:	080a251a 	.word	0x080a251a
 80a02e8:	080a2523 	.word	0x080a2523
 80a02ec:	080a252c 	.word	0x080a252c
 80a02f0:	20000090 	.word	0x20000090

080a02f4 <_GLOBAL__sub_I_accelgyro>:
MPU6050 accelgyro;
 80a02f4:	4801      	ldr	r0, [pc, #4]	; (80a02fc <_GLOBAL__sub_I_accelgyro+0x8>)
 80a02f6:	f000 b803 	b.w	80a0300 <_ZN7MPU6050C1Ev>
 80a02fa:	bf00      	nop
 80a02fc:	2000007c 	.word	0x2000007c

080a0300 <_ZN7MPU6050C1Ev>:

/** Default constructor, uses default I2C address.
 * @see MPU6050_DEFAULT_ADDRESS
 */
MPU6050::MPU6050() {
    devAddr = MPU6050_DEFAULT_ADDRESS;
 80a0300:	2368      	movs	r3, #104	; 0x68
 80a0302:	7003      	strb	r3, [r0, #0]
}
 80a0304:	4770      	bx	lr

080a0306 <_ZN7MPU605021setFullScaleGyroRangeEh>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050::setFullScaleGyroRange(uint8_t range) {
 80a0306:	b507      	push	{r0, r1, r2, lr}
    I2Cdev::writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 80a0308:	2302      	movs	r3, #2
 80a030a:	2204      	movs	r2, #4
 80a030c:	7800      	ldrb	r0, [r0, #0]
 80a030e:	9100      	str	r1, [sp, #0]
 80a0310:	211b      	movs	r1, #27
 80a0312:	f000 f957 	bl	80a05c4 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 80a0316:	b003      	add	sp, #12
 80a0318:	f85d fb04 	ldr.w	pc, [sp], #4

080a031c <_ZN7MPU605022setFullScaleAccelRangeEh>:
}
/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050::setFullScaleAccelRange(uint8_t range) {
 80a031c:	b507      	push	{r0, r1, r2, lr}
    I2Cdev::writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
 80a031e:	2302      	movs	r3, #2
 80a0320:	2204      	movs	r2, #4
 80a0322:	7800      	ldrb	r0, [r0, #0]
 80a0324:	9100      	str	r1, [sp, #0]
 80a0326:	211c      	movs	r1, #28
 80a0328:	f000 f94c 	bl	80a05c4 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 80a032c:	b003      	add	sp, #12
 80a032e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0334 <_ZN7MPU605010getMotion6EPsS0_S0_S0_S0_S0_>:
 * @param gz 16-bit signed integer container for gyroscope Z-axis value
 * @see getAcceleration()
 * @see getRotation()
 * @see MPU6050_RA_ACCEL_XOUT_H
 */
void MPU6050::getMotion6(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
 80a0334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a0336:	461d      	mov	r5, r3
    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer);
 80a0338:	4603      	mov	r3, r0
void MPU6050::getMotion6(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
 80a033a:	4604      	mov	r4, r0
 80a033c:	460f      	mov	r7, r1
 80a033e:	4616      	mov	r6, r2
    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer);
 80a0340:	4a15      	ldr	r2, [pc, #84]	; (80a0398 <_ZN7MPU605010getMotion6EPsS0_S0_S0_S0_S0_+0x64>)
 80a0342:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a0346:	8812      	ldrh	r2, [r2, #0]
 80a0348:	213b      	movs	r1, #59	; 0x3b
 80a034a:	9200      	str	r2, [sp, #0]
 80a034c:	220e      	movs	r2, #14
 80a034e:	f000 f865 	bl	80a041c <_ZN6I2Cdev9readBytesEhhhPht>
    *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
 80a0352:	7862      	ldrb	r2, [r4, #1]
 80a0354:	78a3      	ldrb	r3, [r4, #2]
 80a0356:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a035a:	803b      	strh	r3, [r7, #0]
    *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
 80a035c:	78e2      	ldrb	r2, [r4, #3]
 80a035e:	7923      	ldrb	r3, [r4, #4]
 80a0360:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0364:	8033      	strh	r3, [r6, #0]
    *az = (((int16_t)buffer[4]) << 8) | buffer[5];
 80a0366:	7962      	ldrb	r2, [r4, #5]
 80a0368:	79a3      	ldrb	r3, [r4, #6]
 80a036a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a036e:	802b      	strh	r3, [r5, #0]
    *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
 80a0370:	7a62      	ldrb	r2, [r4, #9]
 80a0372:	7aa3      	ldrb	r3, [r4, #10]
 80a0374:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0378:	9a08      	ldr	r2, [sp, #32]
 80a037a:	8013      	strh	r3, [r2, #0]
    *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
 80a037c:	7ae2      	ldrb	r2, [r4, #11]
 80a037e:	7b23      	ldrb	r3, [r4, #12]
 80a0380:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0384:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a0386:	8013      	strh	r3, [r2, #0]
    *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
 80a0388:	7b62      	ldrb	r2, [r4, #13]
 80a038a:	7ba3      	ldrb	r3, [r4, #14]
 80a038c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0390:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a0392:	8013      	strh	r3, [r2, #0]
}
 80a0394:	b003      	add	sp, #12
 80a0396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0398:	20000008 	.word	0x20000008

080a039c <_ZN7MPU605015setSleepEnabledEb>:
 * @param enabled New sleep mode enabled status
 * @see getSleepEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050::setSleepEnabled(bool enabled) {
 80a039c:	460b      	mov	r3, r1
    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 80a039e:	2206      	movs	r2, #6
 80a03a0:	216b      	movs	r1, #107	; 0x6b
 80a03a2:	7800      	ldrb	r0, [r0, #0]
 80a03a4:	f000 b8ea 	b.w	80a057c <_ZN6I2Cdev8writeBitEhhhh>

080a03a8 <_ZN7MPU605014setClockSourceEh>:
 * @see getClockSource()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050::setClockSource(uint8_t source) {
 80a03a8:	b507      	push	{r0, r1, r2, lr}
    I2Cdev::writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
 80a03aa:	2303      	movs	r3, #3
 80a03ac:	2202      	movs	r2, #2
 80a03ae:	7800      	ldrb	r0, [r0, #0]
 80a03b0:	9100      	str	r1, [sp, #0]
 80a03b2:	216b      	movs	r1, #107	; 0x6b
 80a03b4:	f000 f906 	bl	80a05c4 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 80a03b8:	b003      	add	sp, #12
 80a03ba:	f85d fb04 	ldr.w	pc, [sp], #4

080a03be <_ZN7MPU605010initializeEv>:
void MPU6050::initialize() {
 80a03be:	b510      	push	{r4, lr}
 80a03c0:	4604      	mov	r4, r0
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
 80a03c2:	2101      	movs	r1, #1
 80a03c4:	f7ff fff0 	bl	80a03a8 <_ZN7MPU605014setClockSourceEh>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
 80a03c8:	4620      	mov	r0, r4
 80a03ca:	2100      	movs	r1, #0
 80a03cc:	f7ff ff9b 	bl	80a0306 <_ZN7MPU605021setFullScaleGyroRangeEh>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 80a03d0:	4620      	mov	r0, r4
 80a03d2:	2100      	movs	r1, #0
 80a03d4:	f7ff ffa2 	bl	80a031c <_ZN7MPU605022setFullScaleAccelRangeEh>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
 80a03d8:	4620      	mov	r0, r4
}
 80a03da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
 80a03de:	2100      	movs	r1, #0
 80a03e0:	f7ff bfdc 	b.w	80a039c <_ZN7MPU605015setSleepEnabledEb>

080a03e4 <_ZN7MPU605011getDeviceIDEv>:
 * @see MPU6050_RA_WHO_AM_I
 * @see MPU6050_WHO_AM_I_BIT
 * @see MPU6050_WHO_AM_I_LENGTH
 */
uint8_t MPU6050::getDeviceID() {
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
 80a03e4:	4603      	mov	r3, r0
uint8_t MPU6050::getDeviceID() {
 80a03e6:	b513      	push	{r0, r1, r4, lr}
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
 80a03e8:	4a07      	ldr	r2, [pc, #28]	; (80a0408 <_ZN7MPU605011getDeviceIDEv+0x24>)
uint8_t MPU6050::getDeviceID() {
 80a03ea:	4604      	mov	r4, r0
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
 80a03ec:	8812      	ldrh	r2, [r2, #0]
 80a03ee:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a03f2:	2175      	movs	r1, #117	; 0x75
 80a03f4:	e9cd 3200 	strd	r3, r2, [sp]
 80a03f8:	2306      	movs	r3, #6
 80a03fa:	461a      	mov	r2, r3
 80a03fc:	f000 f877 	bl	80a04ee <_ZN6I2Cdev8readBitsEhhhhPht>
    return buffer[0];
}
 80a0400:	7860      	ldrb	r0, [r4, #1]
 80a0402:	b002      	add	sp, #8
 80a0404:	bd10      	pop	{r4, pc}
 80a0406:	bf00      	nop
 80a0408:	20000008 	.word	0x20000008

080a040c <_ZN7MPU605014testConnectionEv>:
bool MPU6050::testConnection() {
 80a040c:	b508      	push	{r3, lr}
    return getDeviceID() == 0x34;
 80a040e:	f7ff ffe9 	bl	80a03e4 <_ZN7MPU605011getDeviceIDEv>
}
 80a0412:	f1a0 0334 	sub.w	r3, r0, #52	; 0x34
 80a0416:	4258      	negs	r0, r3
 80a0418:	4158      	adcs	r0, r3
 80a041a:	bd08      	pop	{r3, pc}

080a041c <_ZN6I2Cdev9readBytesEhhhPht>:
 * @param length Number of bytes to read
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
int8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout) {
 80a041c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0420:	4616      	mov	r6, r2
 80a0422:	469b      	mov	fp, r3
 80a0424:	4607      	mov	r7, r0
 80a0426:	468a      	mov	sl, r1
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
 80a0428:	2500      	movs	r5, #0
int8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout) {
 80a042a:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a042e:	f000 f901 	bl	80a0634 <HAL_Timer_Get_Milli_Seconds>
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
 80a0432:	2e20      	cmp	r6, #32
 80a0434:	4633      	mov	r3, r6
 80a0436:	bfa8      	it	ge
 80a0438:	2320      	movge	r3, #32
 80a043a:	4681      	mov	r9, r0
    int8_t count = 0;
 80a043c:	462c      	mov	r4, r5
 80a043e:	9301      	str	r3, [sp, #4]
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
 80a0440:	42b5      	cmp	r5, r6
 80a0442:	d23a      	bcs.n	80a04ba <_ZN6I2Cdev9readBytesEhhhPht+0x9e>
                Wire.beginTransmission(devAddr);
 80a0444:	f001 f874 	bl	80a1530 <_Z19__fetch_global_Wirev>
 80a0448:	4639      	mov	r1, r7
 80a044a:	f000 ff0d 	bl	80a1268 <_ZN7TwoWire17beginTransmissionEh>
                Wire.write(regAddr);
 80a044e:	f001 f86f 	bl	80a1530 <_Z19__fetch_global_Wirev>
 80a0452:	6803      	ldr	r3, [r0, #0]
 80a0454:	4651      	mov	r1, sl
 80a0456:	689b      	ldr	r3, [r3, #8]
 80a0458:	4798      	blx	r3
                Wire.endTransmission();
 80a045a:	f001 f869 	bl	80a1530 <_Z19__fetch_global_Wirev>
 80a045e:	f000 ff0b 	bl	80a1278 <_ZN7TwoWire15endTransmissionEv>
                Wire.beginTransmission(devAddr);
 80a0462:	f001 f865 	bl	80a1530 <_Z19__fetch_global_Wirev>
 80a0466:	4639      	mov	r1, r7
 80a0468:	f000 fefe 	bl	80a1268 <_ZN7TwoWire17beginTransmissionEh>
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
 80a046c:	f001 f860 	bl	80a1530 <_Z19__fetch_global_Wirev>
 80a0470:	1b72      	subs	r2, r6, r5
 80a0472:	2a20      	cmp	r2, #32
 80a0474:	bfa8      	it	ge
 80a0476:	2220      	movge	r2, #32
 80a0478:	4639      	mov	r1, r7
 80a047a:	b2d2      	uxtb	r2, r2
 80a047c:	f000 fef1 	bl	80a1262 <_ZN7TwoWire11requestFromEhj>
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
 80a0480:	f001 f856 	bl	80a1530 <_Z19__fetch_global_Wirev>
 80a0484:	6803      	ldr	r3, [r0, #0]
 80a0486:	691b      	ldr	r3, [r3, #16]
 80a0488:	4798      	blx	r3
 80a048a:	b190      	cbz	r0, 80a04b2 <_ZN6I2Cdev9readBytesEhhhPht+0x96>
 80a048c:	f1b8 0f00 	cmp.w	r8, #0
 80a0490:	d109      	bne.n	80a04a6 <_ZN6I2Cdev9readBytesEhhhPht+0x8a>
                    data[count] = Wire.read();
 80a0492:	f001 f84d 	bl	80a1530 <_Z19__fetch_global_Wirev>
 80a0496:	6803      	ldr	r3, [r0, #0]
 80a0498:	695b      	ldr	r3, [r3, #20]
 80a049a:	4798      	blx	r3
 80a049c:	f80b 0004 	strb.w	r0, [fp, r4]
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
 80a04a0:	3401      	adds	r4, #1
 80a04a2:	b264      	sxtb	r4, r4
 80a04a4:	e7ec      	b.n	80a0480 <_ZN6I2Cdev9readBytesEhhhPht+0x64>
 80a04a6:	f000 f8c5 	bl	80a0634 <HAL_Timer_Get_Milli_Seconds>
 80a04aa:	eba0 0009 	sub.w	r0, r0, r9
 80a04ae:	4540      	cmp	r0, r8
 80a04b0:	d3ef      	bcc.n	80a0492 <_ZN6I2Cdev9readBytesEhhhPht+0x76>
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
 80a04b2:	9b01      	ldr	r3, [sp, #4]
 80a04b4:	441d      	add	r5, r3
 80a04b6:	b2ed      	uxtb	r5, r5
 80a04b8:	e7c2      	b.n	80a0440 <_ZN6I2Cdev9readBytesEhhhPht+0x24>
        }

    #endif

    // check for timeout
    if (timeout > 0 && millis() - t1 >= timeout && count < length) count = -1; // timeout
 80a04ba:	f1b8 0f00 	cmp.w	r8, #0
 80a04be:	d009      	beq.n	80a04d4 <_ZN6I2Cdev9readBytesEhhhPht+0xb8>
 80a04c0:	f000 f8b8 	bl	80a0634 <HAL_Timer_Get_Milli_Seconds>
 80a04c4:	eba0 0909 	sub.w	r9, r0, r9
 80a04c8:	45c1      	cmp	r9, r8
 80a04ca:	d303      	bcc.n	80a04d4 <_ZN6I2Cdev9readBytesEhhhPht+0xb8>
 80a04cc:	42b4      	cmp	r4, r6
 80a04ce:	bfb8      	it	lt
 80a04d0:	f04f 34ff 	movlt.w	r4, #4294967295
        Serial.print(count, DEC);
        Serial.println(" read).");
    #endif

    return count;
}
 80a04d4:	4620      	mov	r0, r4
 80a04d6:	b003      	add	sp, #12
 80a04d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a04dc <_ZN6I2Cdev8readByteEhhPht>:
int8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout) {
 80a04dc:	b507      	push	{r0, r1, r2, lr}
    return readBytes(devAddr, regAddr, 1, data, timeout);
 80a04de:	9300      	str	r3, [sp, #0]
 80a04e0:	4613      	mov	r3, r2
 80a04e2:	2201      	movs	r2, #1
 80a04e4:	f7ff ff9a 	bl	80a041c <_ZN6I2Cdev9readBytesEhhhPht>
}
 80a04e8:	b003      	add	sp, #12
 80a04ea:	f85d fb04 	ldr.w	pc, [sp], #4

080a04ee <_ZN6I2Cdev8readBitsEhhhhPht>:
int8_t I2Cdev::readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data, uint16_t timeout) {
 80a04ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a04f0:	4614      	mov	r4, r2
 80a04f2:	461d      	mov	r5, r3
    if ((count = readByte(devAddr, regAddr, &b, timeout)) != 0) {
 80a04f4:	f10d 0207 	add.w	r2, sp, #7
 80a04f8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a04fc:	f7ff ffee 	bl	80a04dc <_ZN6I2Cdev8readByteEhhPht>
 80a0500:	b158      	cbz	r0, 80a051a <_ZN6I2Cdev8readBitsEhhhhPht+0x2c>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 80a0502:	2301      	movs	r3, #1
 80a0504:	1b62      	subs	r2, r4, r5
 80a0506:	40ab      	lsls	r3, r5
 80a0508:	3201      	adds	r2, #1
        b &= mask;
 80a050a:	f89d 1007 	ldrb.w	r1, [sp, #7]
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 80a050e:	3b01      	subs	r3, #1
 80a0510:	4093      	lsls	r3, r2
        b >>= (bitStart - length + 1);
 80a0512:	400b      	ands	r3, r1
 80a0514:	4113      	asrs	r3, r2
 80a0516:	9a06      	ldr	r2, [sp, #24]
 80a0518:	7013      	strb	r3, [r2, #0]
}
 80a051a:	b003      	add	sp, #12
 80a051c:	bd30      	pop	{r4, r5, pc}

080a051e <_ZN6I2Cdev10writeBytesEhhhPh>:
 * @param regAddr First register address to write to
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* data) {
 80a051e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0520:	4607      	mov	r7, r0
 80a0522:	4615      	mov	r5, r2
 80a0524:	461c      	mov	r4, r3
 80a0526:	460e      	mov	r6, r1
        Serial.print(regAddr, HEX);
        Serial.print("...");
    #endif
    uint8_t status = 0;
	#if defined (PARTICLE)
        Wire.beginTransmission(devAddr);
 80a0528:	f001 f802 	bl	80a1530 <_Z19__fetch_global_Wirev>
 80a052c:	4639      	mov	r1, r7
 80a052e:	f000 fe9b 	bl	80a1268 <_ZN7TwoWire17beginTransmissionEh>
        Wire.write((uint8_t) regAddr); // send address
 80a0532:	f000 fffd 	bl	80a1530 <_Z19__fetch_global_Wirev>
 80a0536:	6803      	ldr	r3, [r0, #0]
 80a0538:	4631      	mov	r1, r6
 80a053a:	689b      	ldr	r3, [r3, #8]
 80a053c:	4798      	blx	r3
        Wire.write((uint8_t) regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length; i++) {
 80a053e:	4425      	add	r5, r4
 80a0540:	42ac      	cmp	r4, r5
 80a0542:	d007      	beq.n	80a0554 <_ZN6I2Cdev10writeBytesEhhhPh+0x36>
        #ifdef I2CDEV_SERIAL_DEBUG
            Serial.print(data[i], HEX);
            if (i + 1 < length) Serial.print(" ");
        #endif
		#if defined (PARTICLE)
            Wire.write((uint8_t) data[i]);
 80a0544:	f000 fff4 	bl	80a1530 <_Z19__fetch_global_Wirev>
 80a0548:	6803      	ldr	r3, [r0, #0]
 80a054a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a054e:	689b      	ldr	r3, [r3, #8]
 80a0550:	4798      	blx	r3
    for (uint8_t i = 0; i < length; i++) {
 80a0552:	e7f5      	b.n	80a0540 <_ZN6I2Cdev10writeBytesEhhhPh+0x22>
        #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
            Fastwire::write((uint8_t) data[i]);
        #endif
    }
	#if defined (PARTICLE)
        status = Wire.endTransmission();
 80a0554:	f000 ffec 	bl	80a1530 <_Z19__fetch_global_Wirev>
 80a0558:	f000 fe8e 	bl	80a1278 <_ZN7TwoWire15endTransmissionEv>
    #endif
    #ifdef I2CDEV_SERIAL_DEBUG
        Serial.println(". Done.");
    #endif
    return status == 0;
}
 80a055c:	fab0 f080 	clz	r0, r0
 80a0560:	0940      	lsrs	r0, r0, #5
 80a0562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0564 <_ZN6I2Cdev9writeByteEhhh>:
bool I2Cdev::writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data) {
 80a0564:	b507      	push	{r0, r1, r2, lr}
 80a0566:	f88d 2007 	strb.w	r2, [sp, #7]
    return writeBytes(devAddr, regAddr, 1, &data);
 80a056a:	f10d 0307 	add.w	r3, sp, #7
 80a056e:	2201      	movs	r2, #1
 80a0570:	f7ff ffd5 	bl	80a051e <_ZN6I2Cdev10writeBytesEhhhPh>
}
 80a0574:	b003      	add	sp, #12
 80a0576:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a057c <_ZN6I2Cdev8writeBitEhhhh>:
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
 80a057c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a0580:	4690      	mov	r8, r2
 80a0582:	2401      	movs	r4, #1
 80a0584:	461f      	mov	r7, r3
    readByte(devAddr, regAddr, &b);
 80a0586:	4b0e      	ldr	r3, [pc, #56]	; (80a05c0 <_ZN6I2Cdev8writeBitEhhhh+0x44>)
 80a0588:	f10d 0207 	add.w	r2, sp, #7
 80a058c:	881b      	ldrh	r3, [r3, #0]
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
 80a058e:	4605      	mov	r5, r0
 80a0590:	460e      	mov	r6, r1
    readByte(devAddr, regAddr, &b);
 80a0592:	f7ff ffa3 	bl	80a04dc <_ZN6I2Cdev8readByteEhhPht>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 80a0596:	fa04 f208 	lsl.w	r2, r4, r8
 80a059a:	b252      	sxtb	r2, r2
 80a059c:	f89d 4007 	ldrb.w	r4, [sp, #7]
 80a05a0:	b157      	cbz	r7, 80a05b8 <_ZN6I2Cdev8writeBitEhhhh+0x3c>
 80a05a2:	4322      	orrs	r2, r4
 80a05a4:	b2d2      	uxtb	r2, r2
    return writeByte(devAddr, regAddr, b);
 80a05a6:	4631      	mov	r1, r6
 80a05a8:	4628      	mov	r0, r5
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 80a05aa:	f88d 2007 	strb.w	r2, [sp, #7]
    return writeByte(devAddr, regAddr, b);
 80a05ae:	f7ff ffd9 	bl	80a0564 <_ZN6I2Cdev9writeByteEhhh>
}
 80a05b2:	b002      	add	sp, #8
 80a05b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 80a05b8:	ea24 0202 	bic.w	r2, r4, r2
 80a05bc:	e7f3      	b.n	80a05a6 <_ZN6I2Cdev8writeBitEhhhh+0x2a>
 80a05be:	bf00      	nop
 80a05c0:	20000008 	.word	0x20000008

080a05c4 <_ZN6I2Cdev9writeBitsEhhhhh>:
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
 80a05c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a05c6:	461f      	mov	r7, r3
    if (readByte(devAddr, regAddr, &b) != 0) {
 80a05c8:	4b11      	ldr	r3, [pc, #68]	; (80a0610 <_ZN6I2Cdev9writeBitsEhhhhh+0x4c>)
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
 80a05ca:	4616      	mov	r6, r2
    if (readByte(devAddr, regAddr, &b) != 0) {
 80a05cc:	881b      	ldrh	r3, [r3, #0]
 80a05ce:	f10d 0207 	add.w	r2, sp, #7
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
 80a05d2:	4604      	mov	r4, r0
 80a05d4:	460d      	mov	r5, r1
    if (readByte(devAddr, regAddr, &b) != 0) {
 80a05d6:	f7ff ff81 	bl	80a04dc <_ZN6I2Cdev8readByteEhhPht>
 80a05da:	b1b8      	cbz	r0, 80a060c <_ZN6I2Cdev9writeBitsEhhhhh+0x48>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 80a05dc:	2301      	movs	r3, #1
        data <<= (bitStart - length + 1); // shift data into correct position
 80a05de:	f89d 1020 	ldrb.w	r1, [sp, #32]
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 80a05e2:	1bf2      	subs	r2, r6, r7
 80a05e4:	40bb      	lsls	r3, r7
 80a05e6:	3201      	adds	r2, #1
 80a05e8:	3b01      	subs	r3, #1
 80a05ea:	4093      	lsls	r3, r2
        data <<= (bitStart - length + 1); // shift data into correct position
 80a05ec:	fa01 f202 	lsl.w	r2, r1, r2
        b &= ~(mask); // zero all important bits in existing byte
 80a05f0:	f89d 1007 	ldrb.w	r1, [sp, #7]
        data <<= (bitStart - length + 1); // shift data into correct position
 80a05f4:	b2d2      	uxtb	r2, r2
        b &= ~(mask); // zero all important bits in existing byte
 80a05f6:	ea21 0103 	bic.w	r1, r1, r3
        data &= mask; // zero all non-important bits in data
 80a05fa:	4013      	ands	r3, r2
        b |= data; // combine data with existing byte
 80a05fc:	ea41 0203 	orr.w	r2, r1, r3
        return writeByte(devAddr, regAddr, b);
 80a0600:	4620      	mov	r0, r4
 80a0602:	4629      	mov	r1, r5
        b |= data; // combine data with existing byte
 80a0604:	f88d 2007 	strb.w	r2, [sp, #7]
        return writeByte(devAddr, regAddr, b);
 80a0608:	f7ff ffac 	bl	80a0564 <_ZN6I2Cdev9writeByteEhhh>
}
 80a060c:	b003      	add	sp, #12
 80a060e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0610:	20000008 	.word	0x20000008

080a0614 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0614:	b508      	push	{r3, lr}
 80a0616:	4b02      	ldr	r3, [pc, #8]	; (80a0620 <HAL_Pin_Mode+0xc>)
 80a0618:	681b      	ldr	r3, [r3, #0]
 80a061a:	689b      	ldr	r3, [r3, #8]
 80a061c:	9301      	str	r3, [sp, #4]
 80a061e:	bd08      	pop	{r3, pc}
 80a0620:	080601b0 	.word	0x080601b0

080a0624 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0624:	b508      	push	{r3, lr}
 80a0626:	4b02      	ldr	r3, [pc, #8]	; (80a0630 <HAL_RNG_GetRandomNumber+0xc>)
 80a0628:	681b      	ldr	r3, [r3, #0]
 80a062a:	685b      	ldr	r3, [r3, #4]
 80a062c:	9301      	str	r3, [sp, #4]
 80a062e:	bd08      	pop	{r3, pc}
 80a0630:	0806019c 	.word	0x0806019c

080a0634 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0634:	b508      	push	{r3, lr}
 80a0636:	4b02      	ldr	r3, [pc, #8]	; (80a0640 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0638:	681b      	ldr	r3, [r3, #0]
 80a063a:	695b      	ldr	r3, [r3, #20]
 80a063c:	9301      	str	r3, [sp, #4]
 80a063e:	bd08      	pop	{r3, pc}
 80a0640:	0806019c 	.word	0x0806019c

080a0644 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0644:	b508      	push	{r3, lr}
 80a0646:	4b02      	ldr	r3, [pc, #8]	; (80a0650 <os_mutex_recursive_create+0xc>)
 80a0648:	681b      	ldr	r3, [r3, #0]
 80a064a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a064c:	9301      	str	r3, [sp, #4]
 80a064e:	bd08      	pop	{r3, pc}
 80a0650:	080601d0 	.word	0x080601d0

080a0654 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0654:	b508      	push	{r3, lr}
 80a0656:	4b02      	ldr	r3, [pc, #8]	; (80a0660 <os_mutex_recursive_destroy+0xc>)
 80a0658:	681b      	ldr	r3, [r3, #0]
 80a065a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a065c:	9301      	str	r3, [sp, #4]
 80a065e:	bd08      	pop	{r3, pc}
 80a0660:	080601d0 	.word	0x080601d0

080a0664 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a0664:	b508      	push	{r3, lr}
 80a0666:	4b02      	ldr	r3, [pc, #8]	; (80a0670 <hal_usart_init+0xc>)
 80a0668:	681b      	ldr	r3, [r3, #0]
 80a066a:	699b      	ldr	r3, [r3, #24]
 80a066c:	9301      	str	r3, [sp, #4]
 80a066e:	bd08      	pop	{r3, pc}
 80a0670:	080601c4 	.word	0x080601c4

080a0674 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a0674:	b508      	push	{r3, lr}
 80a0676:	4b02      	ldr	r3, [pc, #8]	; (80a0680 <hal_usart_write+0xc>)
 80a0678:	681b      	ldr	r3, [r3, #0]
 80a067a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a067c:	9301      	str	r3, [sp, #4]
 80a067e:	bd08      	pop	{r3, pc}
 80a0680:	080601c4 	.word	0x080601c4

080a0684 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a0684:	b508      	push	{r3, lr}
 80a0686:	4b02      	ldr	r3, [pc, #8]	; (80a0690 <hal_usart_available+0xc>)
 80a0688:	681b      	ldr	r3, [r3, #0]
 80a068a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a068c:	9301      	str	r3, [sp, #4]
 80a068e:	bd08      	pop	{r3, pc}
 80a0690:	080601c4 	.word	0x080601c4

080a0694 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a0694:	b508      	push	{r3, lr}
 80a0696:	4b02      	ldr	r3, [pc, #8]	; (80a06a0 <hal_usart_read+0xc>)
 80a0698:	681b      	ldr	r3, [r3, #0]
 80a069a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a069c:	9301      	str	r3, [sp, #4]
 80a069e:	bd08      	pop	{r3, pc}
 80a06a0:	080601c4 	.word	0x080601c4

080a06a4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a06a4:	b508      	push	{r3, lr}
 80a06a6:	4b02      	ldr	r3, [pc, #8]	; (80a06b0 <hal_usart_peek+0xc>)
 80a06a8:	681b      	ldr	r3, [r3, #0]
 80a06aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a06ac:	9301      	str	r3, [sp, #4]
 80a06ae:	bd08      	pop	{r3, pc}
 80a06b0:	080601c4 	.word	0x080601c4

080a06b4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a06b4:	b508      	push	{r3, lr}
 80a06b6:	4b02      	ldr	r3, [pc, #8]	; (80a06c0 <hal_usart_flush+0xc>)
 80a06b8:	681b      	ldr	r3, [r3, #0]
 80a06ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a06bc:	9301      	str	r3, [sp, #4]
 80a06be:	bd08      	pop	{r3, pc}
 80a06c0:	080601c4 	.word	0x080601c4

080a06c4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a06c4:	b508      	push	{r3, lr}
 80a06c6:	4b02      	ldr	r3, [pc, #8]	; (80a06d0 <hal_usart_is_enabled+0xc>)
 80a06c8:	681b      	ldr	r3, [r3, #0]
 80a06ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a06cc:	9301      	str	r3, [sp, #4]
 80a06ce:	bd08      	pop	{r3, pc}
 80a06d0:	080601c4 	.word	0x080601c4

080a06d4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a06d4:	b508      	push	{r3, lr}
 80a06d6:	4b02      	ldr	r3, [pc, #8]	; (80a06e0 <hal_usart_available_data_for_write+0xc>)
 80a06d8:	681b      	ldr	r3, [r3, #0]
 80a06da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a06dc:	9301      	str	r3, [sp, #4]
 80a06de:	bd08      	pop	{r3, pc}
 80a06e0:	080601c4 	.word	0x080601c4

080a06e4 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 80a06e4:	b508      	push	{r3, lr}
 80a06e6:	4b02      	ldr	r3, [pc, #8]	; (80a06f0 <hal_i2c_begin+0xc>)
 80a06e8:	681b      	ldr	r3, [r3, #0]
 80a06ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a06ec:	9301      	str	r3, [sp, #4]
 80a06ee:	bd08      	pop	{r3, pc}
 80a06f0:	080601ac 	.word	0x080601ac

080a06f4 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 80a06f4:	b508      	push	{r3, lr}
 80a06f6:	4b02      	ldr	r3, [pc, #8]	; (80a0700 <hal_i2c_begin_transmission+0xc>)
 80a06f8:	681b      	ldr	r3, [r3, #0]
 80a06fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a06fc:	9301      	str	r3, [sp, #4]
 80a06fe:	bd08      	pop	{r3, pc}
 80a0700:	080601ac 	.word	0x080601ac

080a0704 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 80a0704:	b508      	push	{r3, lr}
 80a0706:	4b02      	ldr	r3, [pc, #8]	; (80a0710 <hal_i2c_end_transmission+0xc>)
 80a0708:	681b      	ldr	r3, [r3, #0]
 80a070a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a070c:	9301      	str	r3, [sp, #4]
 80a070e:	bd08      	pop	{r3, pc}
 80a0710:	080601ac 	.word	0x080601ac

080a0714 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a0714:	b508      	push	{r3, lr}
 80a0716:	4b02      	ldr	r3, [pc, #8]	; (80a0720 <hal_i2c_write+0xc>)
 80a0718:	681b      	ldr	r3, [r3, #0]
 80a071a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a071c:	9301      	str	r3, [sp, #4]
 80a071e:	bd08      	pop	{r3, pc}
 80a0720:	080601ac 	.word	0x080601ac

080a0724 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a0724:	b508      	push	{r3, lr}
 80a0726:	4b02      	ldr	r3, [pc, #8]	; (80a0730 <hal_i2c_available+0xc>)
 80a0728:	681b      	ldr	r3, [r3, #0]
 80a072a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a072c:	9301      	str	r3, [sp, #4]
 80a072e:	bd08      	pop	{r3, pc}
 80a0730:	080601ac 	.word	0x080601ac

080a0734 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a0734:	b508      	push	{r3, lr}
 80a0736:	4b02      	ldr	r3, [pc, #8]	; (80a0740 <hal_i2c_read+0xc>)
 80a0738:	681b      	ldr	r3, [r3, #0]
 80a073a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a073c:	9301      	str	r3, [sp, #4]
 80a073e:	bd08      	pop	{r3, pc}
 80a0740:	080601ac 	.word	0x080601ac

080a0744 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a0744:	b508      	push	{r3, lr}
 80a0746:	4b02      	ldr	r3, [pc, #8]	; (80a0750 <hal_i2c_peek+0xc>)
 80a0748:	681b      	ldr	r3, [r3, #0]
 80a074a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a074c:	9301      	str	r3, [sp, #4]
 80a074e:	bd08      	pop	{r3, pc}
 80a0750:	080601ac 	.word	0x080601ac

080a0754 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a0754:	b508      	push	{r3, lr}
 80a0756:	4b02      	ldr	r3, [pc, #8]	; (80a0760 <hal_i2c_flush+0xc>)
 80a0758:	681b      	ldr	r3, [r3, #0]
 80a075a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a075c:	9301      	str	r3, [sp, #4]
 80a075e:	bd08      	pop	{r3, pc}
 80a0760:	080601ac 	.word	0x080601ac

080a0764 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a0764:	b508      	push	{r3, lr}
 80a0766:	4b02      	ldr	r3, [pc, #8]	; (80a0770 <hal_i2c_is_enabled+0xc>)
 80a0768:	681b      	ldr	r3, [r3, #0]
 80a076a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a076c:	9301      	str	r3, [sp, #4]
 80a076e:	bd08      	pop	{r3, pc}
 80a0770:	080601ac 	.word	0x080601ac

080a0774 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a0774:	b508      	push	{r3, lr}
 80a0776:	4b03      	ldr	r3, [pc, #12]	; (80a0784 <hal_i2c_init+0x10>)
 80a0778:	681b      	ldr	r3, [r3, #0]
 80a077a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a077e:	9301      	str	r3, [sp, #4]
 80a0780:	bd08      	pop	{r3, pc}
 80a0782:	0000      	.short	0x0000
 80a0784:	080601ac 	.word	0x080601ac

080a0788 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 80a0788:	b508      	push	{r3, lr}
 80a078a:	4b03      	ldr	r3, [pc, #12]	; (80a0798 <hal_i2c_request_ex+0x10>)
 80a078c:	681b      	ldr	r3, [r3, #0]
 80a078e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0792:	9301      	str	r3, [sp, #4]
 80a0794:	bd08      	pop	{r3, pc}
 80a0796:	0000      	.short	0x0000
 80a0798:	080601ac 	.word	0x080601ac

080a079c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a079c:	b508      	push	{r3, lr}
 80a079e:	4b02      	ldr	r3, [pc, #8]	; (80a07a8 <hal_spi_init+0xc>)
 80a07a0:	681b      	ldr	r3, [r3, #0]
 80a07a2:	69db      	ldr	r3, [r3, #28]
 80a07a4:	9301      	str	r3, [sp, #4]
 80a07a6:	bd08      	pop	{r3, pc}
 80a07a8:	080601b4 	.word	0x080601b4

080a07ac <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a07ac:	b508      	push	{r3, lr}
 80a07ae:	4b02      	ldr	r3, [pc, #8]	; (80a07b8 <hal_spi_is_enabled+0xc>)
 80a07b0:	681b      	ldr	r3, [r3, #0]
 80a07b2:	6a1b      	ldr	r3, [r3, #32]
 80a07b4:	9301      	str	r3, [sp, #4]
 80a07b6:	bd08      	pop	{r3, pc}
 80a07b8:	080601b4 	.word	0x080601b4

080a07bc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a07bc:	b508      	push	{r3, lr}
 80a07be:	4b02      	ldr	r3, [pc, #8]	; (80a07c8 <HAL_USB_USART_Init+0xc>)
 80a07c0:	681b      	ldr	r3, [r3, #0]
 80a07c2:	681b      	ldr	r3, [r3, #0]
 80a07c4:	9301      	str	r3, [sp, #4]
 80a07c6:	bd08      	pop	{r3, pc}
 80a07c8:	080601d8 	.word	0x080601d8

080a07cc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a07cc:	b508      	push	{r3, lr}
 80a07ce:	4b02      	ldr	r3, [pc, #8]	; (80a07d8 <HAL_USB_USART_Begin+0xc>)
 80a07d0:	681b      	ldr	r3, [r3, #0]
 80a07d2:	685b      	ldr	r3, [r3, #4]
 80a07d4:	9301      	str	r3, [sp, #4]
 80a07d6:	bd08      	pop	{r3, pc}
 80a07d8:	080601d8 	.word	0x080601d8

080a07dc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a07dc:	b508      	push	{r3, lr}
 80a07de:	4b02      	ldr	r3, [pc, #8]	; (80a07e8 <HAL_USB_USART_Available_Data+0xc>)
 80a07e0:	681b      	ldr	r3, [r3, #0]
 80a07e2:	691b      	ldr	r3, [r3, #16]
 80a07e4:	9301      	str	r3, [sp, #4]
 80a07e6:	bd08      	pop	{r3, pc}
 80a07e8:	080601d8 	.word	0x080601d8

080a07ec <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a07ec:	b508      	push	{r3, lr}
 80a07ee:	4b02      	ldr	r3, [pc, #8]	; (80a07f8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a07f0:	681b      	ldr	r3, [r3, #0]
 80a07f2:	695b      	ldr	r3, [r3, #20]
 80a07f4:	9301      	str	r3, [sp, #4]
 80a07f6:	bd08      	pop	{r3, pc}
 80a07f8:	080601d8 	.word	0x080601d8

080a07fc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a07fc:	b508      	push	{r3, lr}
 80a07fe:	4b02      	ldr	r3, [pc, #8]	; (80a0808 <HAL_USB_USART_Receive_Data+0xc>)
 80a0800:	681b      	ldr	r3, [r3, #0]
 80a0802:	699b      	ldr	r3, [r3, #24]
 80a0804:	9301      	str	r3, [sp, #4]
 80a0806:	bd08      	pop	{r3, pc}
 80a0808:	080601d8 	.word	0x080601d8

080a080c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a080c:	b508      	push	{r3, lr}
 80a080e:	4b02      	ldr	r3, [pc, #8]	; (80a0818 <HAL_USB_USART_Send_Data+0xc>)
 80a0810:	681b      	ldr	r3, [r3, #0]
 80a0812:	69db      	ldr	r3, [r3, #28]
 80a0814:	9301      	str	r3, [sp, #4]
 80a0816:	bd08      	pop	{r3, pc}
 80a0818:	080601d8 	.word	0x080601d8

080a081c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a081c:	b508      	push	{r3, lr}
 80a081e:	4b02      	ldr	r3, [pc, #8]	; (80a0828 <HAL_USB_USART_Flush_Data+0xc>)
 80a0820:	681b      	ldr	r3, [r3, #0]
 80a0822:	6a1b      	ldr	r3, [r3, #32]
 80a0824:	9301      	str	r3, [sp, #4]
 80a0826:	bd08      	pop	{r3, pc}
 80a0828:	080601d8 	.word	0x080601d8

080a082c <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a082c:	b508      	push	{r3, lr}
 80a082e:	4b02      	ldr	r3, [pc, #8]	; (80a0838 <inet_gethostbyname+0xc>)
 80a0830:	681b      	ldr	r3, [r3, #0]
 80a0832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0834:	9301      	str	r3, [sp, #4]
 80a0836:	bd08      	pop	{r3, pc}
 80a0838:	080601c0 	.word	0x080601c0

080a083c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a083c:	b508      	push	{r3, lr}
 80a083e:	4b02      	ldr	r3, [pc, #8]	; (80a0848 <set_system_mode+0xc>)
 80a0840:	681b      	ldr	r3, [r3, #0]
 80a0842:	685b      	ldr	r3, [r3, #4]
 80a0844:	9301      	str	r3, [sp, #4]
 80a0846:	bd08      	pop	{r3, pc}
 80a0848:	080601a4 	.word	0x080601a4

080a084c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a084c:	b508      	push	{r3, lr}
 80a084e:	4b02      	ldr	r3, [pc, #8]	; (80a0858 <system_delay_ms+0xc>)
 80a0850:	681b      	ldr	r3, [r3, #0]
 80a0852:	695b      	ldr	r3, [r3, #20]
 80a0854:	9301      	str	r3, [sp, #4]
 80a0856:	bd08      	pop	{r3, pc}
 80a0858:	080601a4 	.word	0x080601a4

080a085c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a085c:	b508      	push	{r3, lr}
 80a085e:	4b03      	ldr	r3, [pc, #12]	; (80a086c <system_ctrl_set_app_request_handler+0x10>)
 80a0860:	681b      	ldr	r3, [r3, #0]
 80a0862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0866:	9301      	str	r3, [sp, #4]
 80a0868:	bd08      	pop	{r3, pc}
 80a086a:	0000      	.short	0x0000
 80a086c:	080601a4 	.word	0x080601a4

080a0870 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0870:	b508      	push	{r3, lr}
 80a0872:	4b03      	ldr	r3, [pc, #12]	; (80a0880 <system_ctrl_set_result+0x10>)
 80a0874:	681b      	ldr	r3, [r3, #0]
 80a0876:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a087a:	9301      	str	r3, [sp, #4]
 80a087c:	bd08      	pop	{r3, pc}
 80a087e:	0000      	.short	0x0000
 80a0880:	080601a4 	.word	0x080601a4

080a0884 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0884:	b508      	push	{r3, lr}
 80a0886:	4b02      	ldr	r3, [pc, #8]	; (80a0890 <network_connect+0xc>)
 80a0888:	681b      	ldr	r3, [r3, #0]
 80a088a:	685b      	ldr	r3, [r3, #4]
 80a088c:	9301      	str	r3, [sp, #4]
 80a088e:	bd08      	pop	{r3, pc}
 80a0890:	080601c8 	.word	0x080601c8

080a0894 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0894:	b508      	push	{r3, lr}
 80a0896:	4b02      	ldr	r3, [pc, #8]	; (80a08a0 <network_connecting+0xc>)
 80a0898:	681b      	ldr	r3, [r3, #0]
 80a089a:	689b      	ldr	r3, [r3, #8]
 80a089c:	9301      	str	r3, [sp, #4]
 80a089e:	bd08      	pop	{r3, pc}
 80a08a0:	080601c8 	.word	0x080601c8

080a08a4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a08a4:	b508      	push	{r3, lr}
 80a08a6:	4b02      	ldr	r3, [pc, #8]	; (80a08b0 <network_disconnect+0xc>)
 80a08a8:	681b      	ldr	r3, [r3, #0]
 80a08aa:	68db      	ldr	r3, [r3, #12]
 80a08ac:	9301      	str	r3, [sp, #4]
 80a08ae:	bd08      	pop	{r3, pc}
 80a08b0:	080601c8 	.word	0x080601c8

080a08b4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a08b4:	b508      	push	{r3, lr}
 80a08b6:	4b02      	ldr	r3, [pc, #8]	; (80a08c0 <network_ready+0xc>)
 80a08b8:	681b      	ldr	r3, [r3, #0]
 80a08ba:	691b      	ldr	r3, [r3, #16]
 80a08bc:	9301      	str	r3, [sp, #4]
 80a08be:	bd08      	pop	{r3, pc}
 80a08c0:	080601c8 	.word	0x080601c8

080a08c4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a08c4:	b508      	push	{r3, lr}
 80a08c6:	4b02      	ldr	r3, [pc, #8]	; (80a08d0 <network_on+0xc>)
 80a08c8:	681b      	ldr	r3, [r3, #0]
 80a08ca:	695b      	ldr	r3, [r3, #20]
 80a08cc:	9301      	str	r3, [sp, #4]
 80a08ce:	bd08      	pop	{r3, pc}
 80a08d0:	080601c8 	.word	0x080601c8

080a08d4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a08d4:	b508      	push	{r3, lr}
 80a08d6:	4b02      	ldr	r3, [pc, #8]	; (80a08e0 <network_off+0xc>)
 80a08d8:	681b      	ldr	r3, [r3, #0]
 80a08da:	699b      	ldr	r3, [r3, #24]
 80a08dc:	9301      	str	r3, [sp, #4]
 80a08de:	bd08      	pop	{r3, pc}
 80a08e0:	080601c8 	.word	0x080601c8

080a08e4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a08e4:	b508      	push	{r3, lr}
 80a08e6:	4b02      	ldr	r3, [pc, #8]	; (80a08f0 <network_listen+0xc>)
 80a08e8:	681b      	ldr	r3, [r3, #0]
 80a08ea:	69db      	ldr	r3, [r3, #28]
 80a08ec:	9301      	str	r3, [sp, #4]
 80a08ee:	bd08      	pop	{r3, pc}
 80a08f0:	080601c8 	.word	0x080601c8

080a08f4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a08f4:	b508      	push	{r3, lr}
 80a08f6:	4b02      	ldr	r3, [pc, #8]	; (80a0900 <network_listening+0xc>)
 80a08f8:	681b      	ldr	r3, [r3, #0]
 80a08fa:	6a1b      	ldr	r3, [r3, #32]
 80a08fc:	9301      	str	r3, [sp, #4]
 80a08fe:	bd08      	pop	{r3, pc}
 80a0900:	080601c8 	.word	0x080601c8

080a0904 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0904:	b508      	push	{r3, lr}
 80a0906:	4b02      	ldr	r3, [pc, #8]	; (80a0910 <network_set_listen_timeout+0xc>)
 80a0908:	681b      	ldr	r3, [r3, #0]
 80a090a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a090c:	9301      	str	r3, [sp, #4]
 80a090e:	bd08      	pop	{r3, pc}
 80a0910:	080601c8 	.word	0x080601c8

080a0914 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0914:	b508      	push	{r3, lr}
 80a0916:	4b02      	ldr	r3, [pc, #8]	; (80a0920 <network_get_listen_timeout+0xc>)
 80a0918:	681b      	ldr	r3, [r3, #0]
 80a091a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a091c:	9301      	str	r3, [sp, #4]
 80a091e:	bd08      	pop	{r3, pc}
 80a0920:	080601c8 	.word	0x080601c8

080a0924 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a0924:	b508      	push	{r3, lr}
 80a0926:	4b02      	ldr	r3, [pc, #8]	; (80a0930 <network_is_on+0xc>)
 80a0928:	681b      	ldr	r3, [r3, #0]
 80a092a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a092c:	9301      	str	r3, [sp, #4]
 80a092e:	bd08      	pop	{r3, pc}
 80a0930:	080601c8 	.word	0x080601c8

080a0934 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a0934:	b508      	push	{r3, lr}
 80a0936:	4b02      	ldr	r3, [pc, #8]	; (80a0940 <network_is_off+0xc>)
 80a0938:	681b      	ldr	r3, [r3, #0]
 80a093a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a093c:	9301      	str	r3, [sp, #4]
 80a093e:	bd08      	pop	{r3, pc}
 80a0940:	080601c8 	.word	0x080601c8

080a0944 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0944:	b508      	push	{r3, lr}
 80a0946:	4b02      	ldr	r3, [pc, #8]	; (80a0950 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0948:	681b      	ldr	r3, [r3, #0]
 80a094a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a094c:	9301      	str	r3, [sp, #4]
 80a094e:	bd08      	pop	{r3, pc}
 80a0950:	080601cc 	.word	0x080601cc

080a0954 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0954:	b508      	push	{r3, lr}
 80a0956:	4b02      	ldr	r3, [pc, #8]	; (80a0960 <malloc+0xc>)
 80a0958:	681b      	ldr	r3, [r3, #0]
 80a095a:	681b      	ldr	r3, [r3, #0]
 80a095c:	9301      	str	r3, [sp, #4]
 80a095e:	bd08      	pop	{r3, pc}
 80a0960:	080601a0 	.word	0x080601a0

080a0964 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0964:	b508      	push	{r3, lr}
 80a0966:	4b02      	ldr	r3, [pc, #8]	; (80a0970 <free+0xc>)
 80a0968:	681b      	ldr	r3, [r3, #0]
 80a096a:	685b      	ldr	r3, [r3, #4]
 80a096c:	9301      	str	r3, [sp, #4]
 80a096e:	bd08      	pop	{r3, pc}
 80a0970:	080601a0 	.word	0x080601a0

080a0974 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a0974:	b508      	push	{r3, lr}
 80a0976:	4b02      	ldr	r3, [pc, #8]	; (80a0980 <newlib_impure_ptr_callback+0xc>)
 80a0978:	681b      	ldr	r3, [r3, #0]
 80a097a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a097c:	9301      	str	r3, [sp, #4]
 80a097e:	bd08      	pop	{r3, pc}
 80a0980:	080601a0 	.word	0x080601a0

080a0984 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a0984:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a0986:	2600      	movs	r6, #0
 80a0988:	4604      	mov	r4, r0
 80a098a:	460d      	mov	r5, r1
 80a098c:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a0990:	f7ff fe58 	bl	80a0644 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a0994:	4628      	mov	r0, r5
    _spi = spi;
 80a0996:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a0998:	f7ff ff00 	bl	80a079c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a099c:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a099e:	6066      	str	r6, [r4, #4]
}
 80a09a0:	bd70      	pop	{r4, r5, r6, pc}

080a09a2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a09a2:	b510      	push	{r4, lr}
 80a09a4:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a09a6:	6800      	ldr	r0, [r0, #0]
 80a09a8:	b118      	cbz	r0, 80a09b2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 80a09aa:	f7ff ffdb 	bl	80a0964 <free>
            wakeupSource_ = nullptr;
 80a09ae:	2300      	movs	r3, #0
 80a09b0:	6023      	str	r3, [r4, #0]
        }
    }
 80a09b2:	bd10      	pop	{r4, pc}

080a09b4 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a09b4:	b510      	push	{r4, lr}
 80a09b6:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 80a09b8:	f7ff fff3 	bl	80a09a2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 80a09bc:	4620      	mov	r0, r4
 80a09be:	bd10      	pop	{r4, pc}

080a09c0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a09c0:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80a09c2:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a09c4:	b510      	push	{r4, lr}
 80a09c6:	4b08      	ldr	r3, [pc, #32]	; (80a09e8 <_GLOBAL__sub_I_System+0x28>)
 80a09c8:	4c08      	ldr	r4, [pc, #32]	; (80a09ec <_GLOBAL__sub_I_System+0x2c>)
 80a09ca:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a09cc:	4b08      	ldr	r3, [pc, #32]	; (80a09f0 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a09ce:	6020      	str	r0, [r4, #0]
 80a09d0:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a09d2:	71a0      	strb	r0, [r4, #6]
 80a09d4:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a09d6:	f7ff ff31 	bl	80a083c <set_system_mode>
SystemClass System;
 80a09da:	4620      	mov	r0, r4
 80a09dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a09e0:	4a04      	ldr	r2, [pc, #16]	; (80a09f4 <_GLOBAL__sub_I_System+0x34>)
 80a09e2:	4905      	ldr	r1, [pc, #20]	; (80a09f8 <_GLOBAL__sub_I_System+0x38>)
 80a09e4:	f000 bdcc 	b.w	80a1580 <__aeabi_atexit>
 80a09e8:	200000d0 	.word	0x200000d0
 80a09ec:	200000c4 	.word	0x200000c4
 80a09f0:	ffff0000 	.word	0xffff0000
 80a09f4:	20000078 	.word	0x20000078
 80a09f8:	080a09b5 	.word	0x080a09b5

080a09fc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a09fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a09fe:	4606      	mov	r6, r0
 80a0a00:	460d      	mov	r5, r1
  size_t n = 0;
 80a0a02:	2400      	movs	r4, #0
 80a0a04:	188f      	adds	r7, r1, r2
  while (size--) {
 80a0a06:	42bd      	cmp	r5, r7
 80a0a08:	d00c      	beq.n	80a0a24 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0a0a:	6833      	ldr	r3, [r6, #0]
 80a0a0c:	4630      	mov	r0, r6
 80a0a0e:	689b      	ldr	r3, [r3, #8]
 80a0a10:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0a14:	4798      	blx	r3
     if (chunk>=0)
 80a0a16:	1e03      	subs	r3, r0, #0
 80a0a18:	db01      	blt.n	80a0a1e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0a1a:	441c      	add	r4, r3
  while (size--) {
 80a0a1c:	e7f3      	b.n	80a0a06 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0a1e:	2c00      	cmp	r4, #0
 80a0a20:	bf08      	it	eq
 80a0a22:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0a24:	4620      	mov	r0, r4
 80a0a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0a28 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0a28:	b570      	push	{r4, r5, r6, lr}
 80a0a2a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0a2c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0a2e:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a0a30:	b149      	cbz	r1, 80a0a46 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0a32:	f001 fd27 	bl	80a2484 <strlen>
 80a0a36:	682b      	ldr	r3, [r5, #0]
 80a0a38:	4602      	mov	r2, r0
 80a0a3a:	4621      	mov	r1, r4
 80a0a3c:	4628      	mov	r0, r5
    }
 80a0a3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a0a42:	68db      	ldr	r3, [r3, #12]
 80a0a44:	4718      	bx	r3
    }
 80a0a46:	bd70      	pop	{r4, r5, r6, pc}

080a0a48 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a0a48:	b508      	push	{r3, lr}
  return write(str);
 80a0a4a:	f7ff ffed 	bl	80a0a28 <_ZN5Print5writeEPKc>
}
 80a0a4e:	bd08      	pop	{r3, pc}

080a0a50 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a0a50:	6803      	ldr	r3, [r0, #0]
 80a0a52:	689b      	ldr	r3, [r3, #8]
 80a0a54:	4718      	bx	r3

080a0a56 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0a56:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0a58:	210d      	movs	r1, #13
{
 80a0a5a:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0a5c:	f7ff fff8 	bl	80a0a50 <_ZN5Print5printEc>
  n += print('\n');
 80a0a60:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a0a62:	4604      	mov	r4, r0
  n += print('\n');
 80a0a64:	4628      	mov	r0, r5
 80a0a66:	f7ff fff3 	bl	80a0a50 <_ZN5Print5printEc>
  return n;
}
 80a0a6a:	4420      	add	r0, r4
 80a0a6c:	bd38      	pop	{r3, r4, r5, pc}

080a0a6e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a0a6e:	b538      	push	{r3, r4, r5, lr}
 80a0a70:	4605      	mov	r5, r0
  return write(str);
 80a0a72:	f7ff ffd9 	bl	80a0a28 <_ZN5Print5writeEPKc>
 80a0a76:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a0a78:	4628      	mov	r0, r5
 80a0a7a:	f7ff ffec 	bl	80a0a56 <_ZN5Print7printlnEv>
  return n;
}
 80a0a7e:	4420      	add	r0, r4
 80a0a80:	bd38      	pop	{r3, r4, r5, pc}

080a0a82 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0a82:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0a84:	2a01      	cmp	r2, #1
 80a0a86:	bf98      	it	ls
 80a0a88:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0a8a:	b530      	push	{r4, r5, lr}
 80a0a8c:	b08b      	sub	sp, #44	; 0x2c
 80a0a8e:	460c      	mov	r4, r1
  *str = '\0';
 80a0a90:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a0a94:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a0a96:	4625      	mov	r5, r4
 80a0a98:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a0a9c:	fb04 5312 	mls	r3, r4, r2, r5
 80a0aa0:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0aa2:	2b09      	cmp	r3, #9
 80a0aa4:	bf94      	ite	ls
 80a0aa6:	3330      	addls	r3, #48	; 0x30
 80a0aa8:	3337      	addhi	r3, #55	; 0x37
 80a0aaa:	b2db      	uxtb	r3, r3
  } while(n);
 80a0aac:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0aae:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a0ab2:	d9f0      	bls.n	80a0a96 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a0ab4:	f7ff ffb8 	bl	80a0a28 <_ZN5Print5writeEPKc>
}
 80a0ab8:	b00b      	add	sp, #44	; 0x2c
 80a0aba:	bd30      	pop	{r4, r5, pc}

080a0abc <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a0abc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0ac0:	4605      	mov	r5, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a0ac2:	4619      	mov	r1, r3
 80a0ac4:	4610      	mov	r0, r2
{
 80a0ac6:	4692      	mov	sl, r2
 80a0ac8:	461f      	mov	r7, r3
 80a0aca:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
  if (isnan(number)) return print("nan");
 80a0ace:	f001 fc33 	bl	80a2338 <__aeabi_dcmpun>
 80a0ad2:	b140      	cbz	r0, 80a0ae6 <_ZN5Print10printFloatEdh+0x2a>
  return write(str);
 80a0ad4:	4950      	ldr	r1, [pc, #320]	; (80a0c18 <_ZN5Print10printFloatEdh+0x15c>)
 80a0ad6:	4628      	mov	r0, r5
 80a0ad8:	f7ff ffa6 	bl	80a0a28 <_ZN5Print5writeEPKc>
 80a0adc:	4604      	mov	r4, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 80a0ade:	4620      	mov	r0, r4
 80a0ae0:	b003      	add	sp, #12
 80a0ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 80a0ae6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 80a0aea:	f04f 32ff 	mov.w	r2, #4294967295
 80a0aee:	4650      	mov	r0, sl
 80a0af0:	4621      	mov	r1, r4
 80a0af2:	4b4a      	ldr	r3, [pc, #296]	; (80a0c1c <_ZN5Print10printFloatEdh+0x160>)
 80a0af4:	f001 fc20 	bl	80a2338 <__aeabi_dcmpun>
 80a0af8:	b948      	cbnz	r0, 80a0b0e <_ZN5Print10printFloatEdh+0x52>
 80a0afa:	f04f 32ff 	mov.w	r2, #4294967295
 80a0afe:	4650      	mov	r0, sl
 80a0b00:	4621      	mov	r1, r4
 80a0b02:	4b46      	ldr	r3, [pc, #280]	; (80a0c1c <_ZN5Print10printFloatEdh+0x160>)
 80a0b04:	f001 fbfa 	bl	80a22fc <__aeabi_dcmple>
 80a0b08:	b908      	cbnz	r0, 80a0b0e <_ZN5Print10printFloatEdh+0x52>
  return write(str);
 80a0b0a:	4945      	ldr	r1, [pc, #276]	; (80a0c20 <_ZN5Print10printFloatEdh+0x164>)
 80a0b0c:	e7e3      	b.n	80a0ad6 <_ZN5Print10printFloatEdh+0x1a>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a0b0e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a0b12:	4650      	mov	r0, sl
 80a0b14:	4639      	mov	r1, r7
 80a0b16:	4b43      	ldr	r3, [pc, #268]	; (80a0c24 <_ZN5Print10printFloatEdh+0x168>)
 80a0b18:	f001 fc04 	bl	80a2324 <__aeabi_dcmpgt>
 80a0b1c:	b108      	cbz	r0, 80a0b22 <_ZN5Print10printFloatEdh+0x66>
  return write(str);
 80a0b1e:	4942      	ldr	r1, [pc, #264]	; (80a0c28 <_ZN5Print10printFloatEdh+0x16c>)
 80a0b20:	e7d9      	b.n	80a0ad6 <_ZN5Print10printFloatEdh+0x1a>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a0b22:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a0b26:	4650      	mov	r0, sl
 80a0b28:	4639      	mov	r1, r7
 80a0b2a:	4b40      	ldr	r3, [pc, #256]	; (80a0c2c <_ZN5Print10printFloatEdh+0x170>)
 80a0b2c:	f001 fbdc 	bl	80a22e8 <__aeabi_dcmplt>
 80a0b30:	2800      	cmp	r0, #0
 80a0b32:	d1f4      	bne.n	80a0b1e <_ZN5Print10printFloatEdh+0x62>
  if (number < 0.0)
 80a0b34:	2200      	movs	r2, #0
 80a0b36:	2300      	movs	r3, #0
 80a0b38:	4650      	mov	r0, sl
 80a0b3a:	4639      	mov	r1, r7
 80a0b3c:	f001 fbd4 	bl	80a22e8 <__aeabi_dcmplt>
 80a0b40:	4604      	mov	r4, r0
 80a0b42:	b130      	cbz	r0, 80a0b52 <_ZN5Print10printFloatEdh+0x96>
     n += print('-');
 80a0b44:	212d      	movs	r1, #45	; 0x2d
 80a0b46:	4628      	mov	r0, r5
 80a0b48:	f7ff ff82 	bl	80a0a50 <_ZN5Print5printEc>
 80a0b4c:	4604      	mov	r4, r0
     number = -number;
 80a0b4e:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
  size_t n = 0;
 80a0b52:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 80a0b56:	2000      	movs	r0, #0
    rounding /= 10.0;
 80a0b58:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 80a0b5c:	4934      	ldr	r1, [pc, #208]	; (80a0c30 <_ZN5Print10printFloatEdh+0x174>)
    rounding /= 10.0;
 80a0b5e:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80a0c38 <_ZN5Print10printFloatEdh+0x17c>
  for (uint8_t i=0; i<digits; ++i)
 80a0b62:	fa5f f38b 	uxtb.w	r3, fp
 80a0b66:	429e      	cmp	r6, r3
 80a0b68:	d906      	bls.n	80a0b78 <_ZN5Print10printFloatEdh+0xbc>
    rounding /= 10.0;
 80a0b6a:	4642      	mov	r2, r8
 80a0b6c:	464b      	mov	r3, r9
 80a0b6e:	f001 fa73 	bl	80a2058 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 80a0b72:	f10b 0b01 	add.w	fp, fp, #1
 80a0b76:	e7f4      	b.n	80a0b62 <_ZN5Print10printFloatEdh+0xa6>
  number += rounding;
 80a0b78:	463b      	mov	r3, r7
 80a0b7a:	4652      	mov	r2, sl
 80a0b7c:	f000 ff8c 	bl	80a1a98 <__adddf3>
 80a0b80:	4689      	mov	r9, r1
 80a0b82:	4680      	mov	r8, r0
  unsigned long int_part = (unsigned long)number;
 80a0b84:	f001 fc16 	bl	80a23b4 <__aeabi_d2uiz>
 80a0b88:	4607      	mov	r7, r0
  double remainder = number - (double)int_part;
 80a0b8a:	f001 f8c1 	bl	80a1d10 <__aeabi_ui2d>
 80a0b8e:	4602      	mov	r2, r0
 80a0b90:	460b      	mov	r3, r1
 80a0b92:	4640      	mov	r0, r8
 80a0b94:	4649      	mov	r1, r9
 80a0b96:	f000 ff7d 	bl	80a1a94 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0b9a:	220a      	movs	r2, #10
 80a0b9c:	4680      	mov	r8, r0
 80a0b9e:	4689      	mov	r9, r1
 80a0ba0:	4628      	mov	r0, r5
 80a0ba2:	4639      	mov	r1, r7
 80a0ba4:	f7ff ff6d 	bl	80a0a82 <_ZN5Print11printNumberEmh>
  n += print(int_part);
 80a0ba8:	4404      	add	r4, r0
  if (digits > 0) {
 80a0baa:	b126      	cbz	r6, 80a0bb6 <_ZN5Print10printFloatEdh+0xfa>
  return write(str);
 80a0bac:	4628      	mov	r0, r5
 80a0bae:	4921      	ldr	r1, [pc, #132]	; (80a0c34 <_ZN5Print10printFloatEdh+0x178>)
 80a0bb0:	f7ff ff3a 	bl	80a0a28 <_ZN5Print5writeEPKc>
    n += print(".");
 80a0bb4:	4404      	add	r4, r0
    remainder *= 10.0;
 80a0bb6:	f04f 0a00 	mov.w	sl, #0
 80a0bba:	f8df b07c 	ldr.w	fp, [pc, #124]	; 80a0c38 <_ZN5Print10printFloatEdh+0x17c>
  while (digits-- > 0)
 80a0bbe:	3e01      	subs	r6, #1
 80a0bc0:	b2f6      	uxtb	r6, r6
 80a0bc2:	2eff      	cmp	r6, #255	; 0xff
 80a0bc4:	d08b      	beq.n	80a0ade <_ZN5Print10printFloatEdh+0x22>
    remainder *= 10.0;
 80a0bc6:	4652      	mov	r2, sl
 80a0bc8:	465b      	mov	r3, fp
 80a0bca:	4640      	mov	r0, r8
 80a0bcc:	4649      	mov	r1, r9
 80a0bce:	f001 f919 	bl	80a1e04 <__aeabi_dmul>
 80a0bd2:	4680      	mov	r8, r0
 80a0bd4:	4689      	mov	r9, r1
    int toPrint = int(remainder);
 80a0bd6:	f001 fbc5 	bl	80a2364 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 80a0bda:	1e07      	subs	r7, r0, #0
 80a0bdc:	da19      	bge.n	80a0c12 <_ZN5Print10printFloatEdh+0x156>
            t = print('-');
 80a0bde:	212d      	movs	r1, #45	; 0x2d
 80a0be0:	4628      	mov	r0, r5
 80a0be2:	f7ff ff35 	bl	80a0a50 <_ZN5Print5printEc>
 80a0be6:	4603      	mov	r3, r0
            val = -n;
 80a0be8:	4279      	negs	r1, r7
        return printNumber(val, base) + t;
 80a0bea:	220a      	movs	r2, #10
 80a0bec:	4628      	mov	r0, r5
 80a0bee:	9301      	str	r3, [sp, #4]
 80a0bf0:	f7ff ff47 	bl	80a0a82 <_ZN5Print11printNumberEmh>
 80a0bf4:	9b01      	ldr	r3, [sp, #4]
 80a0bf6:	4403      	add	r3, r0
    remainder -= toPrint;
 80a0bf8:	4638      	mov	r0, r7
    n += print(toPrint);
 80a0bfa:	441c      	add	r4, r3
    remainder -= toPrint;
 80a0bfc:	f001 f898 	bl	80a1d30 <__aeabi_i2d>
 80a0c00:	4602      	mov	r2, r0
 80a0c02:	460b      	mov	r3, r1
 80a0c04:	4640      	mov	r0, r8
 80a0c06:	4649      	mov	r1, r9
 80a0c08:	f000 ff44 	bl	80a1a94 <__aeabi_dsub>
 80a0c0c:	4680      	mov	r8, r0
 80a0c0e:	4689      	mov	r9, r1
  while (digits-- > 0)
 80a0c10:	e7d5      	b.n	80a0bbe <_ZN5Print10printFloatEdh+0x102>
            val = n;
 80a0c12:	4639      	mov	r1, r7
        size_t t = 0;
 80a0c14:	2300      	movs	r3, #0
 80a0c16:	e7e8      	b.n	80a0bea <_ZN5Print10printFloatEdh+0x12e>
 80a0c18:	080a2556 	.word	0x080a2556
 80a0c1c:	7fefffff 	.word	0x7fefffff
 80a0c20:	080a255a 	.word	0x080a255a
 80a0c24:	41efffff 	.word	0x41efffff
 80a0c28:	080a255e 	.word	0x080a255e
 80a0c2c:	c1efffff 	.word	0xc1efffff
 80a0c30:	3fe00000 	.word	0x3fe00000
 80a0c34:	080a24f1 	.word	0x080a24f1
 80a0c38:	40240000 	.word	0x40240000

080a0c3c <_ZN5Print7printlnEdi>:
{
 80a0c3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return printFloat(n, digits);
 80a0c3e:	f89d 1018 	ldrb.w	r1, [sp, #24]
{
 80a0c42:	4605      	mov	r5, r0
  return printFloat(n, digits);
 80a0c44:	9100      	str	r1, [sp, #0]
 80a0c46:	f7ff ff39 	bl	80a0abc <_ZN5Print10printFloatEdh>
 80a0c4a:	4604      	mov	r4, r0
  n += println();
 80a0c4c:	4628      	mov	r0, r5
 80a0c4e:	f7ff ff02 	bl	80a0a56 <_ZN5Print7printlnEv>
}
 80a0c52:	4420      	add	r0, r4
 80a0c54:	b003      	add	sp, #12
 80a0c56:	bd30      	pop	{r4, r5, pc}

080a0c58 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0c58:	2300      	movs	r3, #0
 80a0c5a:	6840      	ldr	r0, [r0, #4]
 80a0c5c:	461a      	mov	r2, r3
 80a0c5e:	4619      	mov	r1, r3
 80a0c60:	f7ff be30 	b.w	80a08c4 <network_on>

080a0c64 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0c64:	4b01      	ldr	r3, [pc, #4]	; (80a0c6c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0c66:	4a02      	ldr	r2, [pc, #8]	; (80a0c70 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0c68:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a0c6a:	4770      	bx	lr
 80a0c6c:	200000d4 	.word	0x200000d4
 80a0c70:	080a2562 	.word	0x080a2562

080a0c74 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0c74:	4b02      	ldr	r3, [pc, #8]	; (80a0c80 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0c76:	681a      	ldr	r2, [r3, #0]
 80a0c78:	4b02      	ldr	r3, [pc, #8]	; (80a0c84 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0c7a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a0c7c:	4770      	bx	lr
 80a0c7e:	bf00      	nop
 80a0c80:	2000000c 	.word	0x2000000c
 80a0c84:	200000d8 	.word	0x200000d8

080a0c88 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
 80a0c88:	428a      	cmp	r2, r1
{
 80a0c8a:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
 80a0c8c:	d007      	beq.n	80a0c9e <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
 80a0c8e:	9c02      	ldr	r4, [sp, #8]
 80a0c90:	1a40      	subs	r0, r0, r1
 80a0c92:	1ae4      	subs	r4, r4, r3
 80a0c94:	4360      	muls	r0, r4
 80a0c96:	1a52      	subs	r2, r2, r1
 80a0c98:	fb90 f0f2 	sdiv	r0, r0, r2
 80a0c9c:	4418      	add	r0, r3
}
 80a0c9e:	bd10      	pop	{r4, pc}

080a0ca0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0ca0:	2100      	movs	r1, #0
 80a0ca2:	f7ff bdd3 	b.w	80a084c <system_delay_ms>

080a0ca6 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0ca6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0ca8:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a0caa:	4604      	mov	r4, r0
      if (_M_manager)
 80a0cac:	b113      	cbz	r3, 80a0cb4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0cae:	2203      	movs	r2, #3
 80a0cb0:	4601      	mov	r1, r0
 80a0cb2:	4798      	blx	r3
    }
 80a0cb4:	4620      	mov	r0, r4
 80a0cb6:	bd10      	pop	{r4, pc}

080a0cb8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0cb8:	b510      	push	{r4, lr}
 80a0cba:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0cbc:	f7ff fff3 	bl	80a0ca6 <_ZNSt14_Function_baseD1Ev>
 80a0cc0:	4620      	mov	r0, r4
 80a0cc2:	bd10      	pop	{r4, pc}

080a0cc4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a0cc4:	2300      	movs	r3, #0
 80a0cc6:	4803      	ldr	r0, [pc, #12]	; (80a0cd4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0cc8:	4a03      	ldr	r2, [pc, #12]	; (80a0cd8 <_GLOBAL__sub_I_RGB+0x14>)
 80a0cca:	4904      	ldr	r1, [pc, #16]	; (80a0cdc <_GLOBAL__sub_I_RGB+0x18>)
 80a0ccc:	6083      	str	r3, [r0, #8]
 80a0cce:	f000 bc57 	b.w	80a1580 <__aeabi_atexit>
 80a0cd2:	bf00      	nop
 80a0cd4:	200000dc 	.word	0x200000dc
 80a0cd8:	20000078 	.word	0x20000078
 80a0cdc:	080a0cb9 	.word	0x080a0cb9

080a0ce0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a0ce0:	4b01      	ldr	r3, [pc, #4]	; (80a0ce8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a0ce2:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a0ce4:	4770      	bx	lr
 80a0ce6:	bf00      	nop
 80a0ce8:	20000010 	.word	0x20000010

080a0cec <serialEventRun>:
{
 80a0cec:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0cee:	4b13      	ldr	r3, [pc, #76]	; (80a0d3c <serialEventRun+0x50>)
 80a0cf0:	b143      	cbz	r3, 80a0d04 <serialEventRun+0x18>
 80a0cf2:	f000 f969 	bl	80a0fc8 <_Z16_fetch_usbserialv>
 80a0cf6:	6803      	ldr	r3, [r0, #0]
 80a0cf8:	691b      	ldr	r3, [r3, #16]
 80a0cfa:	4798      	blx	r3
 80a0cfc:	2800      	cmp	r0, #0
 80a0cfe:	dd01      	ble.n	80a0d04 <serialEventRun+0x18>
        serialEvent();
 80a0d00:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a0d04:	4b0e      	ldr	r3, [pc, #56]	; (80a0d40 <serialEventRun+0x54>)
 80a0d06:	b143      	cbz	r3, 80a0d1a <serialEventRun+0x2e>
 80a0d08:	f000 fa16 	bl	80a1138 <_Z22__fetch_global_Serial1v>
 80a0d0c:	6803      	ldr	r3, [r0, #0]
 80a0d0e:	691b      	ldr	r3, [r3, #16]
 80a0d10:	4798      	blx	r3
 80a0d12:	2800      	cmp	r0, #0
 80a0d14:	dd01      	ble.n	80a0d1a <serialEventRun+0x2e>
        serialEvent1();
 80a0d16:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a0d1a:	4b0a      	ldr	r3, [pc, #40]	; (80a0d44 <serialEventRun+0x58>)
 80a0d1c:	b10b      	cbz	r3, 80a0d22 <serialEventRun+0x36>
 80a0d1e:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0d22:	4b09      	ldr	r3, [pc, #36]	; (80a0d48 <serialEventRun+0x5c>)
 80a0d24:	b143      	cbz	r3, 80a0d38 <serialEventRun+0x4c>
 80a0d26:	f000 f98d 	bl	80a1044 <_Z17_fetch_usbserial1v>
 80a0d2a:	6803      	ldr	r3, [r0, #0]
 80a0d2c:	691b      	ldr	r3, [r3, #16]
 80a0d2e:	4798      	blx	r3
 80a0d30:	2800      	cmp	r0, #0
 80a0d32:	dd01      	ble.n	80a0d38 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a0d34:	f3af 8000 	nop.w
}
 80a0d38:	bd08      	pop	{r3, pc}
 80a0d3a:	bf00      	nop
	...

080a0d4c <_post_loop>:
{
 80a0d4c:	b508      	push	{r3, lr}
	serialEventRun();
 80a0d4e:	f7ff ffcd 	bl	80a0cec <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0d52:	f7ff fc6f 	bl	80a0634 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0d56:	4b01      	ldr	r3, [pc, #4]	; (80a0d5c <_post_loop+0x10>)
 80a0d58:	6018      	str	r0, [r3, #0]
}
 80a0d5a:	bd08      	pop	{r3, pc}
 80a0d5c:	20000568 	.word	0x20000568

080a0d60 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0d60:	4802      	ldr	r0, [pc, #8]	; (80a0d6c <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0d62:	4a03      	ldr	r2, [pc, #12]	; (80a0d70 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0d64:	4903      	ldr	r1, [pc, #12]	; (80a0d74 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a0d66:	1a12      	subs	r2, r2, r0
 80a0d68:	f001 bb52 	b.w	80a2410 <memcpy>
 80a0d6c:	40024000 	.word	0x40024000
 80a0d70:	40024004 	.word	0x40024004
 80a0d74:	080a2730 	.word	0x080a2730

080a0d78 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0d78:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0d7a:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0d7c:	461a      	mov	r2, r3
 80a0d7e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0d82:	9300      	str	r3, [sp, #0]
 80a0d84:	f7ff fd74 	bl	80a0870 <system_ctrl_set_result>
}
 80a0d88:	b003      	add	sp, #12
 80a0d8a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0d90 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a0d90:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0d92:	8843      	ldrh	r3, [r0, #2]
 80a0d94:	2b0a      	cmp	r3, #10
 80a0d96:	d008      	beq.n	80a0daa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0d98:	2b50      	cmp	r3, #80	; 0x50
 80a0d9a:	d10b      	bne.n	80a0db4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a0d9c:	4b09      	ldr	r3, [pc, #36]	; (80a0dc4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0d9e:	681b      	ldr	r3, [r3, #0]
 80a0da0:	b14b      	cbz	r3, 80a0db6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a0da2:	b003      	add	sp, #12
 80a0da4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a0da8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a0daa:	f7ff ffe5 	bl	80a0d78 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a0dae:	b003      	add	sp, #12
 80a0db0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0db4:	2300      	movs	r3, #0
 80a0db6:	461a      	mov	r2, r3
 80a0db8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0dbc:	9300      	str	r3, [sp, #0]
 80a0dbe:	f7ff fd57 	bl	80a0870 <system_ctrl_set_result>
}
 80a0dc2:	e7f4      	b.n	80a0dae <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a0dc4:	200000f0 	.word	0x200000f0

080a0dc8 <module_user_init_hook>:
{
 80a0dc8:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0dca:	4c12      	ldr	r4, [pc, #72]	; (80a0e14 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a0dcc:	2100      	movs	r1, #0
 80a0dce:	4812      	ldr	r0, [pc, #72]	; (80a0e18 <module_user_init_hook+0x50>)
 80a0dd0:	f7ff fdd0 	bl	80a0974 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0dd4:	4d11      	ldr	r5, [pc, #68]	; (80a0e1c <module_user_init_hook+0x54>)
 80a0dd6:	6823      	ldr	r3, [r4, #0]
 80a0dd8:	42ab      	cmp	r3, r5
 80a0dda:	bf0c      	ite	eq
 80a0ddc:	2201      	moveq	r2, #1
 80a0dde:	2200      	movne	r2, #0
 80a0de0:	4b0f      	ldr	r3, [pc, #60]	; (80a0e20 <module_user_init_hook+0x58>)
 80a0de2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0de4:	d002      	beq.n	80a0dec <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a0de6:	f7ff ffbb 	bl	80a0d60 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a0dea:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0dec:	f7ff fc1a 	bl	80a0624 <HAL_RNG_GetRandomNumber>
 80a0df0:	4604      	mov	r4, r0
    srand(seed);
 80a0df2:	f001 fb23 	bl	80a243c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0df6:	4b0b      	ldr	r3, [pc, #44]	; (80a0e24 <module_user_init_hook+0x5c>)
 80a0df8:	b113      	cbz	r3, 80a0e00 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a0dfa:	4620      	mov	r0, r4
 80a0dfc:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0e00:	2100      	movs	r1, #0
 80a0e02:	4808      	ldr	r0, [pc, #32]	; (80a0e24 <module_user_init_hook+0x5c>)
 80a0e04:	f7ff fd9e 	bl	80a0944 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0e08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0e0c:	2100      	movs	r1, #0
 80a0e0e:	4806      	ldr	r0, [pc, #24]	; (80a0e28 <module_user_init_hook+0x60>)
 80a0e10:	f7ff bd24 	b.w	80a085c <system_ctrl_set_app_request_handler>
 80a0e14:	40024000 	.word	0x40024000
 80a0e18:	080a0ce1 	.word	0x080a0ce1
 80a0e1c:	9a271c1e 	.word	0x9a271c1e
 80a0e20:	200000ec 	.word	0x200000ec
 80a0e24:	00000000 	.word	0x00000000
 80a0e28:	080a0d91 	.word	0x080a0d91

080a0e2c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0e2c:	4770      	bx	lr

080a0e2e <_ZN9IPAddressD0Ev>:
 80a0e2e:	b510      	push	{r4, lr}
 80a0e30:	4604      	mov	r4, r0
 80a0e32:	2118      	movs	r1, #24
 80a0e34:	f000 fba9 	bl	80a158a <_ZdlPvj>
 80a0e38:	4620      	mov	r0, r4
 80a0e3a:	bd10      	pop	{r4, pc}

080a0e3c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0e3e:	460e      	mov	r6, r1
 80a0e40:	2400      	movs	r4, #0
 80a0e42:	f100 0708 	add.w	r7, r0, #8
 80a0e46:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 80a0e48:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a0e4c:	220a      	movs	r2, #10
 80a0e4e:	4630      	mov	r0, r6
 80a0e50:	f7ff fe17 	bl	80a0a82 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0e54:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0e56:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a0e58:	d101      	bne.n	80a0e5e <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a0e5a:	4620      	mov	r0, r4
 80a0e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a0e5e:	2c00      	cmp	r4, #0
 80a0e60:	d0f2      	beq.n	80a0e48 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0e62:	212e      	movs	r1, #46	; 0x2e
 80a0e64:	4630      	mov	r0, r6
 80a0e66:	f7ff fdf3 	bl	80a0a50 <_ZN5Print5printEc>
 80a0e6a:	4404      	add	r4, r0
 80a0e6c:	e7ec      	b.n	80a0e48 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a0e70 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a0e70:	b510      	push	{r4, lr}
 80a0e72:	4604      	mov	r4, r0
 80a0e74:	4b04      	ldr	r3, [pc, #16]	; (80a0e88 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0e76:	2211      	movs	r2, #17
 80a0e78:	2100      	movs	r1, #0
 80a0e7a:	f840 3b04 	str.w	r3, [r0], #4
 80a0e7e:	f001 fad5 	bl	80a242c <memset>
}
 80a0e82:	4620      	mov	r0, r4
 80a0e84:	bd10      	pop	{r4, pc}
 80a0e86:	bf00      	nop
 80a0e88:	080a258c 	.word	0x080a258c

080a0e8c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0e8c:	4603      	mov	r3, r0
 80a0e8e:	4a07      	ldr	r2, [pc, #28]	; (80a0eac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0e90:	b510      	push	{r4, lr}
 80a0e92:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a0e96:	f101 0210 	add.w	r2, r1, #16
 80a0e9a:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0e9e:	4291      	cmp	r1, r2
 80a0ea0:	f843 4b04 	str.w	r4, [r3], #4
 80a0ea4:	d1f9      	bne.n	80a0e9a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0ea6:	780a      	ldrb	r2, [r1, #0]
 80a0ea8:	701a      	strb	r2, [r3, #0]
}
 80a0eaa:	bd10      	pop	{r4, pc}
 80a0eac:	080a258c 	.word	0x080a258c

080a0eb0 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a0eb0:	4a02      	ldr	r2, [pc, #8]	; (80a0ebc <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a0eb2:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a0eb6:	2204      	movs	r2, #4
 80a0eb8:	7502      	strb	r2, [r0, #20]
}
 80a0eba:	4770      	bx	lr
 80a0ebc:	080a258c 	.word	0x080a258c

080a0ec0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a0ec0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0ec2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0ec6:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a0eca:	2304      	movs	r3, #4
 80a0ecc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a0ed0:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a0ed4:	6044      	str	r4, [r0, #4]
 80a0ed6:	7503      	strb	r3, [r0, #20]
}
 80a0ed8:	bd10      	pop	{r4, pc}
	...

080a0edc <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0edc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0ede:	4d04      	ldr	r5, [pc, #16]	; (80a0ef0 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0ee0:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0ee2:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0ee6:	9500      	str	r5, [sp, #0]
 80a0ee8:	f7ff ffea 	bl	80a0ec0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0eec:	b003      	add	sp, #12
 80a0eee:	bd30      	pop	{r4, r5, pc}
 80a0ef0:	080a258c 	.word	0x080a258c

080a0ef4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0ef4:	7441      	strb	r1, [r0, #17]
}
 80a0ef6:	4770      	bx	lr

080a0ef8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a0ef8:	4770      	bx	lr

080a0efa <_ZN9USBSerial4readEv>:
{
 80a0efa:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a0efc:	2100      	movs	r1, #0
 80a0efe:	7c00      	ldrb	r0, [r0, #16]
 80a0f00:	f7ff fc7c 	bl	80a07fc <HAL_USB_USART_Receive_Data>
}
 80a0f04:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0f08:	bd08      	pop	{r3, pc}

080a0f0a <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a0f0a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a0f0c:	2101      	movs	r1, #1
 80a0f0e:	7c00      	ldrb	r0, [r0, #16]
 80a0f10:	f7ff fc74 	bl	80a07fc <HAL_USB_USART_Receive_Data>
}
 80a0f14:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0f18:	bd08      	pop	{r3, pc}

080a0f1a <_ZN9USBSerial17availableForWriteEv>:
{
 80a0f1a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a0f1c:	7c00      	ldrb	r0, [r0, #16]
 80a0f1e:	f7ff fc65 	bl	80a07ec <HAL_USB_USART_Available_Data_For_Write>
}
 80a0f22:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0f26:	bd08      	pop	{r3, pc}

080a0f28 <_ZN9USBSerial9availableEv>:
{
 80a0f28:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a0f2a:	7c00      	ldrb	r0, [r0, #16]
 80a0f2c:	f7ff fc56 	bl	80a07dc <HAL_USB_USART_Available_Data>
}
 80a0f30:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0f34:	bd08      	pop	{r3, pc}

080a0f36 <_ZN9USBSerial5writeEh>:
{
 80a0f36:	b538      	push	{r3, r4, r5, lr}
 80a0f38:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0f3a:	7c00      	ldrb	r0, [r0, #16]
{
 80a0f3c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0f3e:	f7ff fc55 	bl	80a07ec <HAL_USB_USART_Available_Data_For_Write>
 80a0f42:	2800      	cmp	r0, #0
 80a0f44:	dc01      	bgt.n	80a0f4a <_ZN9USBSerial5writeEh+0x14>
 80a0f46:	7c60      	ldrb	r0, [r4, #17]
 80a0f48:	b128      	cbz	r0, 80a0f56 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a0f4a:	4629      	mov	r1, r5
 80a0f4c:	7c20      	ldrb	r0, [r4, #16]
 80a0f4e:	f7ff fc5d 	bl	80a080c <HAL_USB_USART_Send_Data>
 80a0f52:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a0f56:	bd38      	pop	{r3, r4, r5, pc}

080a0f58 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a0f58:	7c00      	ldrb	r0, [r0, #16]
 80a0f5a:	f7ff bc5f 	b.w	80a081c <HAL_USB_USART_Flush_Data>

080a0f5e <_ZN9USBSerialD0Ev>:
 80a0f5e:	b510      	push	{r4, lr}
 80a0f60:	4604      	mov	r4, r0
 80a0f62:	2114      	movs	r1, #20
 80a0f64:	f000 fb11 	bl	80a158a <_ZdlPvj>
 80a0f68:	4620      	mov	r0, r4
 80a0f6a:	bd10      	pop	{r4, pc}

080a0f6c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0f6c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0f72:	4604      	mov	r4, r0
 80a0f74:	4608      	mov	r0, r1
 80a0f76:	2100      	movs	r1, #0
 80a0f78:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a0f7c:	4b04      	ldr	r3, [pc, #16]	; (80a0f90 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a0f7e:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0f80:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a0f82:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a0f84:	4611      	mov	r1, r2
  _blocking = true;
 80a0f86:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a0f88:	f7ff fc18 	bl	80a07bc <HAL_USB_USART_Init>
}
 80a0f8c:	4620      	mov	r0, r4
 80a0f8e:	bd10      	pop	{r4, pc}
 80a0f90:	080a25a0 	.word	0x080a25a0

080a0f94 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a0f94:	2200      	movs	r2, #0
 80a0f96:	7c00      	ldrb	r0, [r0, #16]
 80a0f98:	f7ff bc18 	b.w	80a07cc <HAL_USB_USART_Begin>

080a0f9c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a0f9c:	b510      	push	{r4, lr}
 80a0f9e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0fa0:	2214      	movs	r2, #20
 80a0fa2:	2100      	movs	r1, #0
 80a0fa4:	f001 fa42 	bl	80a242c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0fa8:	4b05      	ldr	r3, [pc, #20]	; (80a0fc0 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0faa:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a0fac:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a0fae:	4b05      	ldr	r3, [pc, #20]	; (80a0fc4 <_Z19acquireSerialBufferv+0x28>)
 80a0fb0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0fb2:	f240 1301 	movw	r3, #257	; 0x101
 80a0fb6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0fb8:	2381      	movs	r3, #129	; 0x81
 80a0fba:	8223      	strh	r3, [r4, #16]
}
 80a0fbc:	bd10      	pop	{r4, pc}
 80a0fbe:	bf00      	nop
 80a0fc0:	20000124 	.word	0x20000124
 80a0fc4:	20000225 	.word	0x20000225

080a0fc8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a0fc8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0fca:	4d0f      	ldr	r5, [pc, #60]	; (80a1008 <_Z16_fetch_usbserialv+0x40>)
{
 80a0fcc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a0fce:	a801      	add	r0, sp, #4
 80a0fd0:	f7ff ffe4 	bl	80a0f9c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0fd4:	7829      	ldrb	r1, [r5, #0]
 80a0fd6:	f3bf 8f5b 	dmb	ish
 80a0fda:	f011 0401 	ands.w	r4, r1, #1
 80a0fde:	d110      	bne.n	80a1002 <_Z16_fetch_usbserialv+0x3a>
 80a0fe0:	4628      	mov	r0, r5
 80a0fe2:	f7ff f85e 	bl	80a00a2 <__cxa_guard_acquire>
 80a0fe6:	b160      	cbz	r0, 80a1002 <_Z16_fetch_usbserialv+0x3a>
 80a0fe8:	4621      	mov	r1, r4
 80a0fea:	aa01      	add	r2, sp, #4
 80a0fec:	4807      	ldr	r0, [pc, #28]	; (80a100c <_Z16_fetch_usbserialv+0x44>)
 80a0fee:	f7ff ffbd 	bl	80a0f6c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0ff2:	4628      	mov	r0, r5
 80a0ff4:	f7ff f85a 	bl	80a00ac <__cxa_guard_release>
 80a0ff8:	4a05      	ldr	r2, [pc, #20]	; (80a1010 <_Z16_fetch_usbserialv+0x48>)
 80a0ffa:	4906      	ldr	r1, [pc, #24]	; (80a1014 <_Z16_fetch_usbserialv+0x4c>)
 80a0ffc:	4803      	ldr	r0, [pc, #12]	; (80a100c <_Z16_fetch_usbserialv+0x44>)
 80a0ffe:	f000 fabf 	bl	80a1580 <__aeabi_atexit>
	return _usbserial;
}
 80a1002:	4802      	ldr	r0, [pc, #8]	; (80a100c <_Z16_fetch_usbserialv+0x44>)
 80a1004:	b007      	add	sp, #28
 80a1006:	bd30      	pop	{r4, r5, pc}
 80a1008:	200000f4 	.word	0x200000f4
 80a100c:	200000fc 	.word	0x200000fc
 80a1010:	20000078 	.word	0x20000078
 80a1014:	080a0ef9 	.word	0x080a0ef9

080a1018 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1018:	b510      	push	{r4, lr}
 80a101a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a101c:	2214      	movs	r2, #20
 80a101e:	2100      	movs	r1, #0
 80a1020:	f001 fa04 	bl	80a242c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1024:	4b05      	ldr	r3, [pc, #20]	; (80a103c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1026:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a1028:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a102a:	4b05      	ldr	r3, [pc, #20]	; (80a1040 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a102c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a102e:	f240 1301 	movw	r3, #257	; 0x101
 80a1032:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1034:	2381      	movs	r3, #129	; 0x81
 80a1036:	8223      	strh	r3, [r4, #16]
}
 80a1038:	bd10      	pop	{r4, pc}
 80a103a:	bf00      	nop
 80a103c:	200002a6 	.word	0x200002a6
 80a1040:	200003a7 	.word	0x200003a7

080a1044 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1044:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1046:	4c0f      	ldr	r4, [pc, #60]	; (80a1084 <_Z17_fetch_usbserial1v+0x40>)
{
 80a1048:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a104a:	a801      	add	r0, sp, #4
 80a104c:	f7ff ffe4 	bl	80a1018 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1050:	7823      	ldrb	r3, [r4, #0]
 80a1052:	f3bf 8f5b 	dmb	ish
 80a1056:	07db      	lsls	r3, r3, #31
 80a1058:	d410      	bmi.n	80a107c <_Z17_fetch_usbserial1v+0x38>
 80a105a:	4620      	mov	r0, r4
 80a105c:	f7ff f821 	bl	80a00a2 <__cxa_guard_acquire>
 80a1060:	b160      	cbz	r0, 80a107c <_Z17_fetch_usbserial1v+0x38>
 80a1062:	2101      	movs	r1, #1
 80a1064:	aa01      	add	r2, sp, #4
 80a1066:	4808      	ldr	r0, [pc, #32]	; (80a1088 <_Z17_fetch_usbserial1v+0x44>)
 80a1068:	f7ff ff80 	bl	80a0f6c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a106c:	4620      	mov	r0, r4
 80a106e:	f7ff f81d 	bl	80a00ac <__cxa_guard_release>
 80a1072:	4a06      	ldr	r2, [pc, #24]	; (80a108c <_Z17_fetch_usbserial1v+0x48>)
 80a1074:	4906      	ldr	r1, [pc, #24]	; (80a1090 <_Z17_fetch_usbserial1v+0x4c>)
 80a1076:	4804      	ldr	r0, [pc, #16]	; (80a1088 <_Z17_fetch_usbserial1v+0x44>)
 80a1078:	f000 fa82 	bl	80a1580 <__aeabi_atexit>
  return _usbserial1;
}
 80a107c:	4802      	ldr	r0, [pc, #8]	; (80a1088 <_Z17_fetch_usbserial1v+0x44>)
 80a107e:	b006      	add	sp, #24
 80a1080:	bd10      	pop	{r4, pc}
 80a1082:	bf00      	nop
 80a1084:	200000f8 	.word	0x200000f8
 80a1088:	20000110 	.word	0x20000110
 80a108c:	20000078 	.word	0x20000078
 80a1090:	080a0ef9 	.word	0x080a0ef9

080a1094 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a1094:	4770      	bx	lr

080a1096 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1096:	7441      	strb	r1, [r0, #17]
}
 80a1098:	4770      	bx	lr

080a109a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a109a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a109c:	7c00      	ldrb	r0, [r0, #16]
 80a109e:	f7ff fb19 	bl	80a06d4 <hal_usart_available_data_for_write>
}
 80a10a2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a10a6:	bd08      	pop	{r3, pc}

080a10a8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a10a8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a10aa:	7c00      	ldrb	r0, [r0, #16]
 80a10ac:	f7ff faea 	bl	80a0684 <hal_usart_available>
}
 80a10b0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a10b4:	bd08      	pop	{r3, pc}

080a10b6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a10b6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a10b8:	7c00      	ldrb	r0, [r0, #16]
 80a10ba:	f7ff faf3 	bl	80a06a4 <hal_usart_peek>
}
 80a10be:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a10c2:	bd08      	pop	{r3, pc}

080a10c4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a10c4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a10c6:	7c00      	ldrb	r0, [r0, #16]
 80a10c8:	f7ff fae4 	bl	80a0694 <hal_usart_read>
}
 80a10cc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a10d0:	bd08      	pop	{r3, pc}

080a10d2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a10d2:	7c00      	ldrb	r0, [r0, #16]
 80a10d4:	f7ff baee 	b.w	80a06b4 <hal_usart_flush>

080a10d8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a10d8:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a10da:	7c46      	ldrb	r6, [r0, #17]
{
 80a10dc:	4604      	mov	r4, r0
 80a10de:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a10e0:	b12e      	cbz	r6, 80a10ee <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a10e2:	4629      	mov	r1, r5
 80a10e4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a10e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a10ea:	f7ff bac3 	b.w	80a0674 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a10ee:	7c00      	ldrb	r0, [r0, #16]
 80a10f0:	f7ff faf0 	bl	80a06d4 <hal_usart_available_data_for_write>
 80a10f4:	2800      	cmp	r0, #0
 80a10f6:	dcf4      	bgt.n	80a10e2 <_ZN11USARTSerial5writeEh+0xa>
}
 80a10f8:	4630      	mov	r0, r6
 80a10fa:	bd70      	pop	{r4, r5, r6, pc}

080a10fc <_ZN11USARTSerialD0Ev>:
 80a10fc:	b510      	push	{r4, lr}
 80a10fe:	4604      	mov	r4, r0
 80a1100:	2114      	movs	r1, #20
 80a1102:	f000 fa42 	bl	80a158a <_ZdlPvj>
 80a1106:	4620      	mov	r0, r4
 80a1108:	bd10      	pop	{r4, pc}
	...

080a110c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a110c:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a1110:	b510      	push	{r4, lr}
 80a1112:	4604      	mov	r4, r0
 80a1114:	4608      	mov	r0, r1
 80a1116:	4611      	mov	r1, r2
 80a1118:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a111c:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a1120:	4a04      	ldr	r2, [pc, #16]	; (80a1134 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a1122:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a1124:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a1126:	2201      	movs	r2, #1
 80a1128:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a112a:	461a      	mov	r2, r3
 80a112c:	f7ff fa9a 	bl	80a0664 <hal_usart_init>
}
 80a1130:	4620      	mov	r0, r4
 80a1132:	bd10      	pop	{r4, pc}
 80a1134:	080a25d0 	.word	0x080a25d0

080a1138 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1138:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a113a:	4d0d      	ldr	r5, [pc, #52]	; (80a1170 <_Z22__fetch_global_Serial1v+0x38>)
 80a113c:	7829      	ldrb	r1, [r5, #0]
 80a113e:	f3bf 8f5b 	dmb	ish
 80a1142:	f011 0401 	ands.w	r4, r1, #1
 80a1146:	d111      	bne.n	80a116c <_Z22__fetch_global_Serial1v+0x34>
 80a1148:	4628      	mov	r0, r5
 80a114a:	f7fe ffaa 	bl	80a00a2 <__cxa_guard_acquire>
 80a114e:	b168      	cbz	r0, 80a116c <_Z22__fetch_global_Serial1v+0x34>
 80a1150:	4621      	mov	r1, r4
 80a1152:	4a08      	ldr	r2, [pc, #32]	; (80a1174 <_Z22__fetch_global_Serial1v+0x3c>)
 80a1154:	4b08      	ldr	r3, [pc, #32]	; (80a1178 <_Z22__fetch_global_Serial1v+0x40>)
 80a1156:	4809      	ldr	r0, [pc, #36]	; (80a117c <_Z22__fetch_global_Serial1v+0x44>)
 80a1158:	f7ff ffd8 	bl	80a110c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a115c:	4628      	mov	r0, r5
 80a115e:	f7fe ffa5 	bl	80a00ac <__cxa_guard_release>
 80a1162:	4a07      	ldr	r2, [pc, #28]	; (80a1180 <_Z22__fetch_global_Serial1v+0x48>)
 80a1164:	4907      	ldr	r1, [pc, #28]	; (80a1184 <_Z22__fetch_global_Serial1v+0x4c>)
 80a1166:	4805      	ldr	r0, [pc, #20]	; (80a117c <_Z22__fetch_global_Serial1v+0x44>)
 80a1168:	f000 fa0a 	bl	80a1580 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a116c:	4803      	ldr	r0, [pc, #12]	; (80a117c <_Z22__fetch_global_Serial1v+0x44>)
 80a116e:	bd38      	pop	{r3, r4, r5, pc}
 80a1170:	20000428 	.word	0x20000428
 80a1174:	2000042c 	.word	0x2000042c
 80a1178:	200004b0 	.word	0x200004b0
 80a117c:	20000534 	.word	0x20000534
 80a1180:	20000078 	.word	0x20000078
 80a1184:	080a1095 	.word	0x080a1095

080a1188 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a1188:	4770      	bx	lr

080a118a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a118a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a118c:	4606      	mov	r6, r0
 80a118e:	4615      	mov	r5, r2
 80a1190:	460c      	mov	r4, r1
 80a1192:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1194:	42bc      	cmp	r4, r7
 80a1196:	d006      	beq.n	80a11a6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1198:	6833      	ldr	r3, [r6, #0]
 80a119a:	4630      	mov	r0, r6
 80a119c:	689b      	ldr	r3, [r3, #8]
 80a119e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a11a2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a11a4:	e7f6      	b.n	80a1194 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a11a6:	4628      	mov	r0, r5
 80a11a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a11aa <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a11aa:	2200      	movs	r2, #0
 80a11ac:	7c00      	ldrb	r0, [r0, #16]
 80a11ae:	f7ff bab1 	b.w	80a0714 <hal_i2c_write>

080a11b2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a11b2:	2100      	movs	r1, #0
 80a11b4:	7c00      	ldrb	r0, [r0, #16]
 80a11b6:	f7ff bab5 	b.w	80a0724 <hal_i2c_available>

080a11ba <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a11ba:	2100      	movs	r1, #0
 80a11bc:	7c00      	ldrb	r0, [r0, #16]
 80a11be:	f7ff bab9 	b.w	80a0734 <hal_i2c_read>

080a11c2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a11c2:	2100      	movs	r1, #0
 80a11c4:	7c00      	ldrb	r0, [r0, #16]
 80a11c6:	f7ff babd 	b.w	80a0744 <hal_i2c_peek>

080a11ca <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a11ca:	2100      	movs	r1, #0
 80a11cc:	7c00      	ldrb	r0, [r0, #16]
 80a11ce:	f7ff bac1 	b.w	80a0754 <hal_i2c_flush>

080a11d2 <_ZN7TwoWireD0Ev>:
 80a11d2:	b510      	push	{r4, lr}
 80a11d4:	4604      	mov	r4, r0
 80a11d6:	2114      	movs	r1, #20
 80a11d8:	f000 f9d7 	bl	80a158a <_ZdlPvj>
 80a11dc:	4620      	mov	r0, r4
 80a11de:	bd10      	pop	{r4, pc}

080a11e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a11e0:	b510      	push	{r4, lr}
 80a11e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a11e6:	4604      	mov	r4, r0
 80a11e8:	4608      	mov	r0, r1
 80a11ea:	2100      	movs	r1, #0
 80a11ec:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a11f0:	4b03      	ldr	r3, [pc, #12]	; (80a1200 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a11f2:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a11f4:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a11f6:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a11f8:	f7ff fabc 	bl	80a0774 <hal_i2c_init>
}
 80a11fc:	4620      	mov	r0, r4
 80a11fe:	bd10      	pop	{r4, pc}
 80a1200:	080a2600 	.word	0x080a2600

080a1204 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a1204:	2300      	movs	r3, #0
 80a1206:	7c00      	ldrb	r0, [r0, #16]
 80a1208:	461a      	mov	r2, r3
 80a120a:	4619      	mov	r1, r3
 80a120c:	f7ff ba6a 	b.w	80a06e4 <hal_i2c_begin>

080a1210 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 80a1210:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 80a1212:	2200      	movs	r2, #0
 80a1214:	2314      	movs	r3, #20
 80a1216:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80a121a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 80a121e:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 80a1220:	7c00      	ldrb	r0, [r0, #16]
 80a1222:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1226:	684b      	ldr	r3, [r1, #4]
 80a1228:	9303      	str	r3, [sp, #12]
 80a122a:	68cb      	ldr	r3, [r1, #12]
 80a122c:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 80a122e:	7a0b      	ldrb	r3, [r1, #8]
 80a1230:	a901      	add	r1, sp, #4
 80a1232:	9305      	str	r3, [sp, #20]
 80a1234:	f7ff faa8 	bl	80a0788 <hal_i2c_request_ex>
}
 80a1238:	b007      	add	sp, #28
 80a123a:	f85d fb04 	ldr.w	pc, [sp], #4

080a123e <_ZN7TwoWire11requestFromEhjh>:
{
 80a123e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 80a1240:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80a1242:	f88d 1000 	strb.w	r1, [sp]
 80a1246:	f04f 0164 	mov.w	r1, #100	; 0x64
 80a124a:	bf18      	it	ne
 80a124c:	2301      	movne	r3, #1
 80a124e:	9103      	str	r1, [sp, #12]
 80a1250:	4669      	mov	r1, sp
    size_ = size;
 80a1252:	9201      	str	r2, [sp, #4]
 80a1254:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1258:	f7ff ffda 	bl	80a1210 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 80a125c:	b005      	add	sp, #20
 80a125e:	f85d fb04 	ldr.w	pc, [sp], #4

080a1262 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 80a1262:	2301      	movs	r3, #1
 80a1264:	f7ff bfeb 	b.w	80a123e <_ZN7TwoWire11requestFromEhjh>

080a1268 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 80a1268:	2200      	movs	r2, #0
 80a126a:	7c00      	ldrb	r0, [r0, #16]
 80a126c:	f7ff ba42 	b.w	80a06f4 <hal_i2c_begin_transmission>

080a1270 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 80a1270:	2200      	movs	r2, #0
 80a1272:	7c00      	ldrb	r0, [r0, #16]
 80a1274:	f7ff ba46 	b.w	80a0704 <hal_i2c_end_transmission>

080a1278 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 80a1278:	2101      	movs	r1, #1
 80a127a:	f7ff bff9 	b.w	80a1270 <_ZN7TwoWire15endTransmissionEh>

080a127e <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a127e:	2200      	movs	r2, #0
 80a1280:	6840      	ldr	r0, [r0, #4]
 80a1282:	4611      	mov	r1, r2
 80a1284:	f7ff bb16 	b.w	80a08b4 <network_ready>

080a1288 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1288:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a128a:	4615      	mov	r5, r2
 80a128c:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a128e:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a1290:	460e      	mov	r6, r1
 80a1292:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a1294:	2100      	movs	r1, #0
 80a1296:	a803      	add	r0, sp, #12
 80a1298:	f001 f8c8 	bl	80a242c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a129c:	4628      	mov	r0, r5
 80a129e:	f001 f8f1 	bl	80a2484 <strlen>
 80a12a2:	2700      	movs	r7, #0
 80a12a4:	b281      	uxth	r1, r0
 80a12a6:	6873      	ldr	r3, [r6, #4]
 80a12a8:	4628      	mov	r0, r5
 80a12aa:	9700      	str	r7, [sp, #0]
 80a12ac:	aa03      	add	r2, sp, #12
 80a12ae:	f7ff fabd 	bl	80a082c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a12b2:	b130      	cbz	r0, 80a12c2 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a12b4:	4639      	mov	r1, r7
 80a12b6:	4620      	mov	r0, r4
 80a12b8:	f7ff fdfa 	bl	80a0eb0 <_ZN9IPAddressC1Em>
    }
 80a12bc:	4620      	mov	r0, r4
 80a12be:	b009      	add	sp, #36	; 0x24
 80a12c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a12c2:	4620      	mov	r0, r4
 80a12c4:	a903      	add	r1, sp, #12
 80a12c6:	f7ff fde1 	bl	80a0e8c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a12ca:	e7f7      	b.n	80a12bc <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a12cc <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a12cc:	2200      	movs	r2, #0
 80a12ce:	6840      	ldr	r0, [r0, #4]
 80a12d0:	4611      	mov	r1, r2
 80a12d2:	f7ff bb0f 	b.w	80a08f4 <network_listening>

080a12d6 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a12d6:	2200      	movs	r2, #0
 80a12d8:	6840      	ldr	r0, [r0, #4]
 80a12da:	4611      	mov	r1, r2
 80a12dc:	f7ff bb1a 	b.w	80a0914 <network_get_listen_timeout>

080a12e0 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a12e0:	2200      	movs	r2, #0
 80a12e2:	6840      	ldr	r0, [r0, #4]
 80a12e4:	f7ff bb0e 	b.w	80a0904 <network_set_listen_timeout>

080a12e8 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a12e8:	2200      	movs	r2, #0
 80a12ea:	6840      	ldr	r0, [r0, #4]
 80a12ec:	f081 0101 	eor.w	r1, r1, #1
 80a12f0:	f7ff baf8 	b.w	80a08e4 <network_listen>

080a12f4 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a12f4:	2300      	movs	r3, #0
 80a12f6:	6840      	ldr	r0, [r0, #4]
 80a12f8:	461a      	mov	r2, r3
 80a12fa:	4619      	mov	r1, r3
 80a12fc:	f7ff baea 	b.w	80a08d4 <network_off>

080a1300 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a1300:	2200      	movs	r2, #0
 80a1302:	6840      	ldr	r0, [r0, #4]
 80a1304:	4611      	mov	r1, r2
 80a1306:	f7ff bac5 	b.w	80a0894 <network_connecting>

080a130a <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a130a:	2200      	movs	r2, #0
 80a130c:	2102      	movs	r1, #2
 80a130e:	6840      	ldr	r0, [r0, #4]
 80a1310:	f7ff bac8 	b.w	80a08a4 <network_disconnect>

080a1314 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a1314:	2300      	movs	r3, #0
 80a1316:	6840      	ldr	r0, [r0, #4]
 80a1318:	461a      	mov	r2, r3
 80a131a:	f7ff bab3 	b.w	80a0884 <network_connect>
	...

080a1320 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1320:	2204      	movs	r2, #4
 80a1322:	4b02      	ldr	r3, [pc, #8]	; (80a132c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1324:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1326:	4a02      	ldr	r2, [pc, #8]	; (80a1330 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1328:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a132a:	4770      	bx	lr
 80a132c:	20000548 	.word	0x20000548
 80a1330:	080a2628 	.word	0x080a2628

080a1334 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1334:	2300      	movs	r3, #0
 80a1336:	6840      	ldr	r0, [r0, #4]
 80a1338:	461a      	mov	r2, r3
 80a133a:	f7ff baa3 	b.w	80a0884 <network_connect>

080a133e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a133e:	2200      	movs	r2, #0
 80a1340:	2102      	movs	r1, #2
 80a1342:	6840      	ldr	r0, [r0, #4]
 80a1344:	f7ff baae 	b.w	80a08a4 <network_disconnect>

080a1348 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1348:	2200      	movs	r2, #0
 80a134a:	6840      	ldr	r0, [r0, #4]
 80a134c:	4611      	mov	r1, r2
 80a134e:	f7ff baa1 	b.w	80a0894 <network_connecting>

080a1352 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1352:	2200      	movs	r2, #0
 80a1354:	6840      	ldr	r0, [r0, #4]
 80a1356:	4611      	mov	r1, r2
 80a1358:	f7ff baac 	b.w	80a08b4 <network_ready>

080a135c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a135c:	2300      	movs	r3, #0
 80a135e:	6840      	ldr	r0, [r0, #4]
 80a1360:	461a      	mov	r2, r3
 80a1362:	4619      	mov	r1, r3
 80a1364:	f7ff baae 	b.w	80a08c4 <network_on>

080a1368 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1368:	2300      	movs	r3, #0
 80a136a:	6840      	ldr	r0, [r0, #4]
 80a136c:	461a      	mov	r2, r3
 80a136e:	4619      	mov	r1, r3
 80a1370:	f7ff bab0 	b.w	80a08d4 <network_off>

080a1374 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a1374:	2100      	movs	r1, #0
 80a1376:	6840      	ldr	r0, [r0, #4]
 80a1378:	f7ff bad4 	b.w	80a0924 <network_is_on>

080a137c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a137c:	2100      	movs	r1, #0
 80a137e:	6840      	ldr	r0, [r0, #4]
 80a1380:	f7ff bad8 	b.w	80a0934 <network_is_off>

080a1384 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1384:	2200      	movs	r2, #0
 80a1386:	6840      	ldr	r0, [r0, #4]
 80a1388:	f081 0101 	eor.w	r1, r1, #1
 80a138c:	f7ff baaa 	b.w	80a08e4 <network_listen>

080a1390 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1390:	2200      	movs	r2, #0
 80a1392:	6840      	ldr	r0, [r0, #4]
 80a1394:	f7ff bab6 	b.w	80a0904 <network_set_listen_timeout>

080a1398 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1398:	2200      	movs	r2, #0
 80a139a:	6840      	ldr	r0, [r0, #4]
 80a139c:	4611      	mov	r1, r2
 80a139e:	f7ff bab9 	b.w	80a0914 <network_get_listen_timeout>

080a13a2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a13a2:	2200      	movs	r2, #0
 80a13a4:	6840      	ldr	r0, [r0, #4]
 80a13a6:	4611      	mov	r1, r2
 80a13a8:	f7ff baa4 	b.w	80a08f4 <network_listening>

080a13ac <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a13ac:	b570      	push	{r4, r5, r6, lr}
 80a13ae:	4615      	mov	r5, r2
 80a13b0:	b08e      	sub	sp, #56	; 0x38
 80a13b2:	4604      	mov	r4, r0
    IPAddress addr;
 80a13b4:	a808      	add	r0, sp, #32
 80a13b6:	f7ff fd5b 	bl	80a0e70 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a13ba:	2211      	movs	r2, #17
 80a13bc:	2100      	movs	r1, #0
 80a13be:	a803      	add	r0, sp, #12
 80a13c0:	f001 f834 	bl	80a242c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a13c4:	2600      	movs	r6, #0
 80a13c6:	4628      	mov	r0, r5
 80a13c8:	f001 f85c 	bl	80a2484 <strlen>
 80a13cc:	4b0a      	ldr	r3, [pc, #40]	; (80a13f8 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a13ce:	9600      	str	r6, [sp, #0]
 80a13d0:	b281      	uxth	r1, r0
 80a13d2:	685b      	ldr	r3, [r3, #4]
 80a13d4:	4628      	mov	r0, r5
 80a13d6:	aa03      	add	r2, sp, #12
 80a13d8:	f7ff fa28 	bl	80a082c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a13dc:	b130      	cbz	r0, 80a13ec <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a13de:	4631      	mov	r1, r6
 80a13e0:	4620      	mov	r0, r4
 80a13e2:	f7ff fd65 	bl	80a0eb0 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a13e6:	4620      	mov	r0, r4
 80a13e8:	b00e      	add	sp, #56	; 0x38
 80a13ea:	bd70      	pop	{r4, r5, r6, pc}
 80a13ec:	4620      	mov	r0, r4
 80a13ee:	a903      	add	r1, sp, #12
 80a13f0:	f7ff fd4c 	bl	80a0e8c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a13f4:	e7f7      	b.n	80a13e6 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a13f6:	bf00      	nop
 80a13f8:	20000548 	.word	0x20000548

080a13fc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a13fc:	4b02      	ldr	r3, [pc, #8]	; (80a1408 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a13fe:	4a03      	ldr	r2, [pc, #12]	; (80a140c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1400:	601a      	str	r2, [r3, #0]
 80a1402:	2200      	movs	r2, #0
 80a1404:	605a      	str	r2, [r3, #4]

} // spark
 80a1406:	4770      	bx	lr
 80a1408:	20000550 	.word	0x20000550
 80a140c:	080a2664 	.word	0x080a2664

080a1410 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a1410:	b510      	push	{r4, lr}
 80a1412:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a1414:	6880      	ldr	r0, [r0, #8]
 80a1416:	b108      	cbz	r0, 80a141c <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a1418:	f7ff f91c 	bl	80a0654 <os_mutex_recursive_destroy>
 80a141c:	4620      	mov	r0, r4
 80a141e:	bd10      	pop	{r4, pc}

080a1420 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a1420:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a1422:	b570      	push	{r4, r5, r6, lr}
 80a1424:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a1426:	d901      	bls.n	80a142c <pinAvailable+0xc>
    return false;
 80a1428:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a142a:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a142c:	f1a0 030d 	sub.w	r3, r0, #13
 80a1430:	2b02      	cmp	r3, #2
 80a1432:	d90b      	bls.n	80a144c <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a1434:	2801      	cmp	r0, #1
 80a1436:	d826      	bhi.n	80a1486 <pinAvailable+0x66>
 80a1438:	f000 f87a 	bl	80a1530 <_Z19__fetch_global_Wirev>
 80a143c:	2100      	movs	r1, #0
 80a143e:	7c00      	ldrb	r0, [r0, #16]
 80a1440:	f7ff f990 	bl	80a0764 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a1444:	f080 0001 	eor.w	r0, r0, #1
 80a1448:	b2c0      	uxtb	r0, r0
 80a144a:	e7ee      	b.n	80a142a <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a144c:	4e13      	ldr	r6, [pc, #76]	; (80a149c <pinAvailable+0x7c>)
 80a144e:	7831      	ldrb	r1, [r6, #0]
 80a1450:	f3bf 8f5b 	dmb	ish
 80a1454:	f011 0501 	ands.w	r5, r1, #1
 80a1458:	d10f      	bne.n	80a147a <pinAvailable+0x5a>
 80a145a:	4630      	mov	r0, r6
 80a145c:	f7fe fe21 	bl	80a00a2 <__cxa_guard_acquire>
 80a1460:	b158      	cbz	r0, 80a147a <pinAvailable+0x5a>
 80a1462:	4629      	mov	r1, r5
 80a1464:	480e      	ldr	r0, [pc, #56]	; (80a14a0 <pinAvailable+0x80>)
 80a1466:	f7ff fa8d 	bl	80a0984 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a146a:	4630      	mov	r0, r6
 80a146c:	f7fe fe1e 	bl	80a00ac <__cxa_guard_release>
 80a1470:	4a0c      	ldr	r2, [pc, #48]	; (80a14a4 <pinAvailable+0x84>)
 80a1472:	490d      	ldr	r1, [pc, #52]	; (80a14a8 <pinAvailable+0x88>)
 80a1474:	480a      	ldr	r0, [pc, #40]	; (80a14a0 <pinAvailable+0x80>)
 80a1476:	f000 f883 	bl	80a1580 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a147a:	4b09      	ldr	r3, [pc, #36]	; (80a14a0 <pinAvailable+0x80>)
 80a147c:	7818      	ldrb	r0, [r3, #0]
 80a147e:	f7ff f995 	bl	80a07ac <hal_spi_is_enabled>
 80a1482:	2800      	cmp	r0, #0
 80a1484:	d1d0      	bne.n	80a1428 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a1486:	3c12      	subs	r4, #18
 80a1488:	2c01      	cmp	r4, #1
 80a148a:	d805      	bhi.n	80a1498 <pinAvailable+0x78>
 80a148c:	f7ff fe54 	bl	80a1138 <_Z22__fetch_global_Serial1v>
 80a1490:	7c00      	ldrb	r0, [r0, #16]
 80a1492:	f7ff f917 	bl	80a06c4 <hal_usart_is_enabled>
 80a1496:	e7d5      	b.n	80a1444 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a1498:	2001      	movs	r0, #1
 80a149a:	e7c6      	b.n	80a142a <pinAvailable+0xa>
 80a149c:	20000558 	.word	0x20000558
 80a14a0:	2000055c 	.word	0x2000055c
 80a14a4:	20000078 	.word	0x20000078
 80a14a8:	080a1411 	.word	0x080a1411

080a14ac <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a14ac:	2817      	cmp	r0, #23
{
 80a14ae:	b538      	push	{r3, r4, r5, lr}
 80a14b0:	4604      	mov	r4, r0
 80a14b2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a14b4:	d80a      	bhi.n	80a14cc <pinMode+0x20>
 80a14b6:	29ff      	cmp	r1, #255	; 0xff
 80a14b8:	d008      	beq.n	80a14cc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a14ba:	f7ff ffb1 	bl	80a1420 <pinAvailable>
 80a14be:	b128      	cbz	r0, 80a14cc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a14c0:	4629      	mov	r1, r5
 80a14c2:	4620      	mov	r0, r4
}
 80a14c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a14c8:	f7ff b8a4 	b.w	80a0614 <HAL_Pin_Mode>
}
 80a14cc:	bd38      	pop	{r3, r4, r5, pc}
	...

080a14d0 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a14d0:	2300      	movs	r3, #0
 80a14d2:	b513      	push	{r0, r1, r4, lr}
 80a14d4:	4c07      	ldr	r4, [pc, #28]	; (80a14f4 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a14d6:	461a      	mov	r2, r3
 80a14d8:	4619      	mov	r1, r3
 80a14da:	4620      	mov	r0, r4
 80a14dc:	9300      	str	r3, [sp, #0]
 80a14de:	f7ff fcfd 	bl	80a0edc <_ZN9IPAddressC1Ehhhh>
 80a14e2:	4620      	mov	r0, r4
 80a14e4:	4a04      	ldr	r2, [pc, #16]	; (80a14f8 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a14e6:	4905      	ldr	r1, [pc, #20]	; (80a14fc <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a14e8:	b002      	add	sp, #8
 80a14ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a14ee:	f000 b847 	b.w	80a1580 <__aeabi_atexit>
 80a14f2:	bf00      	nop
 80a14f4:	2000056c 	.word	0x2000056c
 80a14f8:	20000078 	.word	0x20000078
 80a14fc:	080a0e2d 	.word	0x080a0e2d

080a1500 <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a1500:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a1502:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a1504:	2520      	movs	r5, #32
 80a1506:	8043      	strh	r3, [r0, #2]
 80a1508:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a150a:	4e08      	ldr	r6, [pc, #32]	; (80a152c <_Z17acquireWireBufferv+0x2c>)
{
 80a150c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a150e:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1510:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a1512:	6085      	str	r5, [r0, #8]
 80a1514:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1516:	4628      	mov	r0, r5
 80a1518:	f000 f839 	bl	80a158e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a151c:	4631      	mov	r1, r6
	};
 80a151e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1520:	4628      	mov	r0, r5
 80a1522:	f000 f834 	bl	80a158e <_ZnajRKSt9nothrow_t>
	};
 80a1526:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a1528:	4620      	mov	r0, r4
 80a152a:	bd70      	pop	{r4, r5, r6, pc}
 80a152c:	080a2698 	.word	0x080a2698

080a1530 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a1530:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1532:	4d0f      	ldr	r5, [pc, #60]	; (80a1570 <_Z19__fetch_global_Wirev+0x40>)
{
 80a1534:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1536:	7829      	ldrb	r1, [r5, #0]
 80a1538:	f3bf 8f5b 	dmb	ish
 80a153c:	f011 0401 	ands.w	r4, r1, #1
 80a1540:	d113      	bne.n	80a156a <_Z19__fetch_global_Wirev+0x3a>
 80a1542:	4628      	mov	r0, r5
 80a1544:	f7fe fdad 	bl	80a00a2 <__cxa_guard_acquire>
 80a1548:	b178      	cbz	r0, 80a156a <_Z19__fetch_global_Wirev+0x3a>
 80a154a:	a801      	add	r0, sp, #4
 80a154c:	f7ff ffd8 	bl	80a1500 <_Z17acquireWireBufferv>
 80a1550:	4621      	mov	r1, r4
 80a1552:	aa01      	add	r2, sp, #4
 80a1554:	4807      	ldr	r0, [pc, #28]	; (80a1574 <_Z19__fetch_global_Wirev+0x44>)
 80a1556:	f7ff fe43 	bl	80a11e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a155a:	4628      	mov	r0, r5
 80a155c:	f7fe fda6 	bl	80a00ac <__cxa_guard_release>
 80a1560:	4a05      	ldr	r2, [pc, #20]	; (80a1578 <_Z19__fetch_global_Wirev+0x48>)
 80a1562:	4906      	ldr	r1, [pc, #24]	; (80a157c <_Z19__fetch_global_Wirev+0x4c>)
 80a1564:	4803      	ldr	r0, [pc, #12]	; (80a1574 <_Z19__fetch_global_Wirev+0x44>)
 80a1566:	f000 f80b 	bl	80a1580 <__aeabi_atexit>
	return wire;
}
 80a156a:	4802      	ldr	r0, [pc, #8]	; (80a1574 <_Z19__fetch_global_Wirev+0x44>)
 80a156c:	b007      	add	sp, #28
 80a156e:	bd30      	pop	{r4, r5, pc}
 80a1570:	20000584 	.word	0x20000584
 80a1574:	20000588 	.word	0x20000588
 80a1578:	20000078 	.word	0x20000078
 80a157c:	080a1189 	.word	0x080a1189

080a1580 <__aeabi_atexit>:
 80a1580:	460b      	mov	r3, r1
 80a1582:	4601      	mov	r1, r0
 80a1584:	4618      	mov	r0, r3
 80a1586:	f000 bf35 	b.w	80a23f4 <__cxa_atexit>

080a158a <_ZdlPvj>:
 80a158a:	f7fe bd88 	b.w	80a009e <_ZdlPv>

080a158e <_ZnajRKSt9nothrow_t>:
 80a158e:	f7fe bd84 	b.w	80a009a <_Znaj>
	...

080a1594 <atan2>:
 80a1594:	f000 b800 	b.w	80a1598 <__ieee754_atan2>

080a1598 <__ieee754_atan2>:
 80a1598:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a159c:	461f      	mov	r7, r3
 80a159e:	4253      	negs	r3, r2
 80a15a0:	4e5f      	ldr	r6, [pc, #380]	; (80a1720 <__ieee754_atan2+0x188>)
 80a15a2:	4313      	orrs	r3, r2
 80a15a4:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
 80a15a8:	ea49 73d3 	orr.w	r3, r9, r3, lsr #31
 80a15ac:	42b3      	cmp	r3, r6
 80a15ae:	4694      	mov	ip, r2
 80a15b0:	460d      	mov	r5, r1
 80a15b2:	4686      	mov	lr, r0
 80a15b4:	d83b      	bhi.n	80a162e <__ieee754_atan2+0x96>
 80a15b6:	4244      	negs	r4, r0
 80a15b8:	4304      	orrs	r4, r0
 80a15ba:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 80a15be:	ea4a 74d4 	orr.w	r4, sl, r4, lsr #31
 80a15c2:	42b4      	cmp	r4, r6
 80a15c4:	4603      	mov	r3, r0
 80a15c6:	468b      	mov	fp, r1
 80a15c8:	d831      	bhi.n	80a162e <__ieee754_atan2+0x96>
 80a15ca:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80a15ce:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80a15d2:	4314      	orrs	r4, r2
 80a15d4:	d03b      	beq.n	80a164e <__ieee754_atan2+0xb6>
 80a15d6:	17bc      	asrs	r4, r7, #30
 80a15d8:	f004 0402 	and.w	r4, r4, #2
 80a15dc:	ea5a 0303 	orrs.w	r3, sl, r3
 80a15e0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80a15e4:	d02b      	beq.n	80a163e <__ieee754_atan2+0xa6>
 80a15e6:	ea59 0302 	orrs.w	r3, r9, r2
 80a15ea:	d034      	beq.n	80a1656 <__ieee754_atan2+0xbe>
 80a15ec:	45b1      	cmp	r9, r6
 80a15ee:	d045      	beq.n	80a167c <__ieee754_atan2+0xe4>
 80a15f0:	45b2      	cmp	sl, r6
 80a15f2:	d030      	beq.n	80a1656 <__ieee754_atan2+0xbe>
 80a15f4:	ebaa 0909 	sub.w	r9, sl, r9
 80a15f8:	f1b9 7f74 	cmp.w	r9, #63963136	; 0x3d00000
 80a15fc:	ea4f 5329 	mov.w	r3, r9, asr #20
 80a1600:	da38      	bge.n	80a1674 <__ieee754_atan2+0xdc>
 80a1602:	2f00      	cmp	r7, #0
 80a1604:	da46      	bge.n	80a1694 <__ieee754_atan2+0xfc>
 80a1606:	333c      	adds	r3, #60	; 0x3c
 80a1608:	da44      	bge.n	80a1694 <__ieee754_atan2+0xfc>
 80a160a:	2000      	movs	r0, #0
 80a160c:	2100      	movs	r1, #0
 80a160e:	2c01      	cmp	r4, #1
 80a1610:	d058      	beq.n	80a16c4 <__ieee754_atan2+0x12c>
 80a1612:	2c02      	cmp	r4, #2
 80a1614:	d049      	beq.n	80a16aa <__ieee754_atan2+0x112>
 80a1616:	b184      	cbz	r4, 80a163a <__ieee754_atan2+0xa2>
 80a1618:	a335      	add	r3, pc, #212	; (adr r3, 80a16f0 <__ieee754_atan2+0x158>)
 80a161a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a161e:	f000 fa39 	bl	80a1a94 <__aeabi_dsub>
 80a1622:	a335      	add	r3, pc, #212	; (adr r3, 80a16f8 <__ieee754_atan2+0x160>)
 80a1624:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1628:	f000 fa34 	bl	80a1a94 <__aeabi_dsub>
 80a162c:	e005      	b.n	80a163a <__ieee754_atan2+0xa2>
 80a162e:	4672      	mov	r2, lr
 80a1630:	4660      	mov	r0, ip
 80a1632:	462b      	mov	r3, r5
 80a1634:	4639      	mov	r1, r7
 80a1636:	f000 fa2f 	bl	80a1a98 <__adddf3>
 80a163a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a163e:	2c02      	cmp	r4, #2
 80a1640:	d010      	beq.n	80a1664 <__ieee754_atan2+0xcc>
 80a1642:	2c03      	cmp	r4, #3
 80a1644:	d1f9      	bne.n	80a163a <__ieee754_atan2+0xa2>
 80a1646:	a12e      	add	r1, pc, #184	; (adr r1, 80a1700 <__ieee754_atan2+0x168>)
 80a1648:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a164c:	e7f5      	b.n	80a163a <__ieee754_atan2+0xa2>
 80a164e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1652:	f000 b86d 	b.w	80a1730 <atan>
 80a1656:	f1bb 0f00 	cmp.w	fp, #0
 80a165a:	db07      	blt.n	80a166c <__ieee754_atan2+0xd4>
 80a165c:	a12a      	add	r1, pc, #168	; (adr r1, 80a1708 <__ieee754_atan2+0x170>)
 80a165e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a1662:	e7ea      	b.n	80a163a <__ieee754_atan2+0xa2>
 80a1664:	a124      	add	r1, pc, #144	; (adr r1, 80a16f8 <__ieee754_atan2+0x160>)
 80a1666:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a166a:	e7e6      	b.n	80a163a <__ieee754_atan2+0xa2>
 80a166c:	a128      	add	r1, pc, #160	; (adr r1, 80a1710 <__ieee754_atan2+0x178>)
 80a166e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a1672:	e7e2      	b.n	80a163a <__ieee754_atan2+0xa2>
 80a1674:	a124      	add	r1, pc, #144	; (adr r1, 80a1708 <__ieee754_atan2+0x170>)
 80a1676:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a167a:	e7c8      	b.n	80a160e <__ieee754_atan2+0x76>
 80a167c:	45ca      	cmp	sl, r9
 80a167e:	f104 34ff 	add.w	r4, r4, #4294967295
 80a1682:	d023      	beq.n	80a16cc <__ieee754_atan2+0x134>
 80a1684:	2c02      	cmp	r4, #2
 80a1686:	d829      	bhi.n	80a16dc <__ieee754_atan2+0x144>
 80a1688:	4b26      	ldr	r3, [pc, #152]	; (80a1724 <__ieee754_atan2+0x18c>)
 80a168a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80a168e:	e9d4 0100 	ldrd	r0, r1, [r4]
 80a1692:	e7d2      	b.n	80a163a <__ieee754_atan2+0xa2>
 80a1694:	4662      	mov	r2, ip
 80a1696:	4670      	mov	r0, lr
 80a1698:	463b      	mov	r3, r7
 80a169a:	4629      	mov	r1, r5
 80a169c:	f000 fcdc 	bl	80a2058 <__aeabi_ddiv>
 80a16a0:	f000 f9f0 	bl	80a1a84 <fabs>
 80a16a4:	f000 f844 	bl	80a1730 <atan>
 80a16a8:	e7b1      	b.n	80a160e <__ieee754_atan2+0x76>
 80a16aa:	a311      	add	r3, pc, #68	; (adr r3, 80a16f0 <__ieee754_atan2+0x158>)
 80a16ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a16b0:	f000 f9f0 	bl	80a1a94 <__aeabi_dsub>
 80a16b4:	4602      	mov	r2, r0
 80a16b6:	460b      	mov	r3, r1
 80a16b8:	a10f      	add	r1, pc, #60	; (adr r1, 80a16f8 <__ieee754_atan2+0x160>)
 80a16ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a16be:	f000 f9e9 	bl	80a1a94 <__aeabi_dsub>
 80a16c2:	e7ba      	b.n	80a163a <__ieee754_atan2+0xa2>
 80a16c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a16c8:	4619      	mov	r1, r3
 80a16ca:	e7b6      	b.n	80a163a <__ieee754_atan2+0xa2>
 80a16cc:	2c02      	cmp	r4, #2
 80a16ce:	d808      	bhi.n	80a16e2 <__ieee754_atan2+0x14a>
 80a16d0:	4b15      	ldr	r3, [pc, #84]	; (80a1728 <__ieee754_atan2+0x190>)
 80a16d2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80a16d6:	e9d4 0100 	ldrd	r0, r1, [r4]
 80a16da:	e7ae      	b.n	80a163a <__ieee754_atan2+0xa2>
 80a16dc:	2000      	movs	r0, #0
 80a16de:	2100      	movs	r1, #0
 80a16e0:	e7ab      	b.n	80a163a <__ieee754_atan2+0xa2>
 80a16e2:	a10d      	add	r1, pc, #52	; (adr r1, 80a1718 <__ieee754_atan2+0x180>)
 80a16e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a16e8:	e7a7      	b.n	80a163a <__ieee754_atan2+0xa2>
 80a16ea:	bf00      	nop
 80a16ec:	f3af 8000 	nop.w
 80a16f0:	33145c07 	.word	0x33145c07
 80a16f4:	3ca1a626 	.word	0x3ca1a626
 80a16f8:	54442d18 	.word	0x54442d18
 80a16fc:	400921fb 	.word	0x400921fb
 80a1700:	54442d18 	.word	0x54442d18
 80a1704:	c00921fb 	.word	0xc00921fb
 80a1708:	54442d18 	.word	0x54442d18
 80a170c:	3ff921fb 	.word	0x3ff921fb
 80a1710:	54442d18 	.word	0x54442d18
 80a1714:	bff921fb 	.word	0xbff921fb
 80a1718:	54442d18 	.word	0x54442d18
 80a171c:	3fe921fb 	.word	0x3fe921fb
 80a1720:	7ff00000 	.word	0x7ff00000
 80a1724:	080a26b8 	.word	0x080a26b8
 80a1728:	080a26a0 	.word	0x080a26a0
 80a172c:	00000000 	.word	0x00000000

080a1730 <atan>:
 80a1730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1734:	4bc6      	ldr	r3, [pc, #792]	; (80a1a50 <atan+0x320>)
 80a1736:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a173a:	b083      	sub	sp, #12
 80a173c:	429e      	cmp	r6, r3
 80a173e:	4604      	mov	r4, r0
 80a1740:	468a      	mov	sl, r1
 80a1742:	9101      	str	r1, [sp, #4]
 80a1744:	dd11      	ble.n	80a176a <atan+0x3a>
 80a1746:	4bc3      	ldr	r3, [pc, #780]	; (80a1a54 <atan+0x324>)
 80a1748:	429e      	cmp	r6, r3
 80a174a:	f300 80b8 	bgt.w	80a18be <atan+0x18e>
 80a174e:	f000 80b3 	beq.w	80a18b8 <atan+0x188>
 80a1752:	4bc1      	ldr	r3, [pc, #772]	; (80a1a58 <atan+0x328>)
 80a1754:	4ac1      	ldr	r2, [pc, #772]	; (80a1a5c <atan+0x32c>)
 80a1756:	4cc2      	ldr	r4, [pc, #776]	; (80a1a60 <atan+0x330>)
 80a1758:	f1ba 0f00 	cmp.w	sl, #0
 80a175c:	bfd8      	it	le
 80a175e:	4613      	movle	r3, r2
 80a1760:	4620      	mov	r0, r4
 80a1762:	4619      	mov	r1, r3
 80a1764:	b003      	add	sp, #12
 80a1766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a176a:	4bbe      	ldr	r3, [pc, #760]	; (80a1a64 <atan+0x334>)
 80a176c:	429e      	cmp	r6, r3
 80a176e:	f300 80c1 	bgt.w	80a18f4 <atan+0x1c4>
 80a1772:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80a1776:	429e      	cmp	r6, r3
 80a1778:	f340 80ae 	ble.w	80a18d8 <atan+0x1a8>
 80a177c:	f04f 3bff 	mov.w	fp, #4294967295
 80a1780:	9b01      	ldr	r3, [sp, #4]
 80a1782:	4622      	mov	r2, r4
 80a1784:	4619      	mov	r1, r3
 80a1786:	4620      	mov	r0, r4
 80a1788:	f000 fb3c 	bl	80a1e04 <__aeabi_dmul>
 80a178c:	4602      	mov	r2, r0
 80a178e:	460b      	mov	r3, r1
 80a1790:	4680      	mov	r8, r0
 80a1792:	4689      	mov	r9, r1
 80a1794:	f000 fb36 	bl	80a1e04 <__aeabi_dmul>
 80a1798:	a395      	add	r3, pc, #596	; (adr r3, 80a19f0 <atan+0x2c0>)
 80a179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a179e:	4606      	mov	r6, r0
 80a17a0:	460f      	mov	r7, r1
 80a17a2:	f000 fb2f 	bl	80a1e04 <__aeabi_dmul>
 80a17a6:	a394      	add	r3, pc, #592	; (adr r3, 80a19f8 <atan+0x2c8>)
 80a17a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a17ac:	f000 f974 	bl	80a1a98 <__adddf3>
 80a17b0:	4632      	mov	r2, r6
 80a17b2:	463b      	mov	r3, r7
 80a17b4:	f000 fb26 	bl	80a1e04 <__aeabi_dmul>
 80a17b8:	a391      	add	r3, pc, #580	; (adr r3, 80a1a00 <atan+0x2d0>)
 80a17ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a17be:	f000 f96b 	bl	80a1a98 <__adddf3>
 80a17c2:	4632      	mov	r2, r6
 80a17c4:	463b      	mov	r3, r7
 80a17c6:	f000 fb1d 	bl	80a1e04 <__aeabi_dmul>
 80a17ca:	a38f      	add	r3, pc, #572	; (adr r3, 80a1a08 <atan+0x2d8>)
 80a17cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a17d0:	f000 f962 	bl	80a1a98 <__adddf3>
 80a17d4:	4632      	mov	r2, r6
 80a17d6:	463b      	mov	r3, r7
 80a17d8:	f000 fb14 	bl	80a1e04 <__aeabi_dmul>
 80a17dc:	a38c      	add	r3, pc, #560	; (adr r3, 80a1a10 <atan+0x2e0>)
 80a17de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a17e2:	f000 f959 	bl	80a1a98 <__adddf3>
 80a17e6:	4632      	mov	r2, r6
 80a17e8:	463b      	mov	r3, r7
 80a17ea:	f000 fb0b 	bl	80a1e04 <__aeabi_dmul>
 80a17ee:	a38a      	add	r3, pc, #552	; (adr r3, 80a1a18 <atan+0x2e8>)
 80a17f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a17f4:	f000 f950 	bl	80a1a98 <__adddf3>
 80a17f8:	4642      	mov	r2, r8
 80a17fa:	464b      	mov	r3, r9
 80a17fc:	f000 fb02 	bl	80a1e04 <__aeabi_dmul>
 80a1800:	a387      	add	r3, pc, #540	; (adr r3, 80a1a20 <atan+0x2f0>)
 80a1802:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1806:	4680      	mov	r8, r0
 80a1808:	4689      	mov	r9, r1
 80a180a:	4630      	mov	r0, r6
 80a180c:	4639      	mov	r1, r7
 80a180e:	f000 faf9 	bl	80a1e04 <__aeabi_dmul>
 80a1812:	a385      	add	r3, pc, #532	; (adr r3, 80a1a28 <atan+0x2f8>)
 80a1814:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1818:	f000 f93c 	bl	80a1a94 <__aeabi_dsub>
 80a181c:	4632      	mov	r2, r6
 80a181e:	463b      	mov	r3, r7
 80a1820:	f000 faf0 	bl	80a1e04 <__aeabi_dmul>
 80a1824:	a382      	add	r3, pc, #520	; (adr r3, 80a1a30 <atan+0x300>)
 80a1826:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a182a:	f000 f933 	bl	80a1a94 <__aeabi_dsub>
 80a182e:	4632      	mov	r2, r6
 80a1830:	463b      	mov	r3, r7
 80a1832:	f000 fae7 	bl	80a1e04 <__aeabi_dmul>
 80a1836:	a380      	add	r3, pc, #512	; (adr r3, 80a1a38 <atan+0x308>)
 80a1838:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a183c:	f000 f92a 	bl	80a1a94 <__aeabi_dsub>
 80a1840:	4632      	mov	r2, r6
 80a1842:	463b      	mov	r3, r7
 80a1844:	f000 fade 	bl	80a1e04 <__aeabi_dmul>
 80a1848:	a37d      	add	r3, pc, #500	; (adr r3, 80a1a40 <atan+0x310>)
 80a184a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a184e:	f000 f921 	bl	80a1a94 <__aeabi_dsub>
 80a1852:	4632      	mov	r2, r6
 80a1854:	463b      	mov	r3, r7
 80a1856:	f000 fad5 	bl	80a1e04 <__aeabi_dmul>
 80a185a:	f1bb 3fff 	cmp.w	fp, #4294967295
 80a185e:	4602      	mov	r2, r0
 80a1860:	460b      	mov	r3, r1
 80a1862:	d06e      	beq.n	80a1942 <atan+0x212>
 80a1864:	4640      	mov	r0, r8
 80a1866:	4649      	mov	r1, r9
 80a1868:	f000 f916 	bl	80a1a98 <__adddf3>
 80a186c:	4e7e      	ldr	r6, [pc, #504]	; (80a1a68 <atan+0x338>)
 80a186e:	4622      	mov	r2, r4
 80a1870:	9b01      	ldr	r3, [sp, #4]
 80a1872:	f000 fac7 	bl	80a1e04 <__aeabi_dmul>
 80a1876:	4b7d      	ldr	r3, [pc, #500]	; (80a1a6c <atan+0x33c>)
 80a1878:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
 80a187c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80a1880:	449b      	add	fp, r3
 80a1882:	e9db 2300 	ldrd	r2, r3, [fp]
 80a1886:	f000 f905 	bl	80a1a94 <__aeabi_dsub>
 80a188a:	4622      	mov	r2, r4
 80a188c:	9b01      	ldr	r3, [sp, #4]
 80a188e:	f000 f901 	bl	80a1a94 <__aeabi_dsub>
 80a1892:	460b      	mov	r3, r1
 80a1894:	4602      	mov	r2, r0
 80a1896:	e9d6 0100 	ldrd	r0, r1, [r6]
 80a189a:	f000 f8fb 	bl	80a1a94 <__aeabi_dsub>
 80a189e:	f1ba 0f00 	cmp.w	sl, #0
 80a18a2:	4604      	mov	r4, r0
 80a18a4:	460b      	mov	r3, r1
 80a18a6:	f6bf af5b 	bge.w	80a1760 <atan+0x30>
 80a18aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a18ae:	4620      	mov	r0, r4
 80a18b0:	4619      	mov	r1, r3
 80a18b2:	b003      	add	sp, #12
 80a18b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a18b8:	2800      	cmp	r0, #0
 80a18ba:	f43f af4a 	beq.w	80a1752 <atan+0x22>
 80a18be:	9b01      	ldr	r3, [sp, #4]
 80a18c0:	4622      	mov	r2, r4
 80a18c2:	4620      	mov	r0, r4
 80a18c4:	4619      	mov	r1, r3
 80a18c6:	f000 f8e7 	bl	80a1a98 <__adddf3>
 80a18ca:	4604      	mov	r4, r0
 80a18cc:	460b      	mov	r3, r1
 80a18ce:	4620      	mov	r0, r4
 80a18d0:	4619      	mov	r1, r3
 80a18d2:	b003      	add	sp, #12
 80a18d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a18d8:	a35b      	add	r3, pc, #364	; (adr r3, 80a1a48 <atan+0x318>)
 80a18da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a18de:	f000 f8db 	bl	80a1a98 <__adddf3>
 80a18e2:	2200      	movs	r2, #0
 80a18e4:	4b62      	ldr	r3, [pc, #392]	; (80a1a70 <atan+0x340>)
 80a18e6:	f000 fd1d 	bl	80a2324 <__aeabi_dcmpgt>
 80a18ea:	2800      	cmp	r0, #0
 80a18ec:	f43f af46 	beq.w	80a177c <atan+0x4c>
 80a18f0:	4653      	mov	r3, sl
 80a18f2:	e735      	b.n	80a1760 <atan+0x30>
 80a18f4:	f000 f8c6 	bl	80a1a84 <fabs>
 80a18f8:	4b5e      	ldr	r3, [pc, #376]	; (80a1a74 <atan+0x344>)
 80a18fa:	4604      	mov	r4, r0
 80a18fc:	429e      	cmp	r6, r3
 80a18fe:	460d      	mov	r5, r1
 80a1900:	dc34      	bgt.n	80a196c <atan+0x23c>
 80a1902:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80a1906:	429e      	cmp	r6, r3
 80a1908:	dc59      	bgt.n	80a19be <atan+0x28e>
 80a190a:	4602      	mov	r2, r0
 80a190c:	460b      	mov	r3, r1
 80a190e:	f000 f8c3 	bl	80a1a98 <__adddf3>
 80a1912:	2200      	movs	r2, #0
 80a1914:	4b56      	ldr	r3, [pc, #344]	; (80a1a70 <atan+0x340>)
 80a1916:	f000 f8bd 	bl	80a1a94 <__aeabi_dsub>
 80a191a:	2200      	movs	r2, #0
 80a191c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a1920:	4606      	mov	r6, r0
 80a1922:	460f      	mov	r7, r1
 80a1924:	4620      	mov	r0, r4
 80a1926:	4629      	mov	r1, r5
 80a1928:	f000 f8b6 	bl	80a1a98 <__adddf3>
 80a192c:	4602      	mov	r2, r0
 80a192e:	460b      	mov	r3, r1
 80a1930:	4630      	mov	r0, r6
 80a1932:	4639      	mov	r1, r7
 80a1934:	f000 fb90 	bl	80a2058 <__aeabi_ddiv>
 80a1938:	f04f 0b00 	mov.w	fp, #0
 80a193c:	4604      	mov	r4, r0
 80a193e:	9101      	str	r1, [sp, #4]
 80a1940:	e71e      	b.n	80a1780 <atan+0x50>
 80a1942:	4640      	mov	r0, r8
 80a1944:	4649      	mov	r1, r9
 80a1946:	f000 f8a7 	bl	80a1a98 <__adddf3>
 80a194a:	4622      	mov	r2, r4
 80a194c:	9b01      	ldr	r3, [sp, #4]
 80a194e:	f000 fa59 	bl	80a1e04 <__aeabi_dmul>
 80a1952:	4602      	mov	r2, r0
 80a1954:	460b      	mov	r3, r1
 80a1956:	4620      	mov	r0, r4
 80a1958:	9901      	ldr	r1, [sp, #4]
 80a195a:	f000 f89b 	bl	80a1a94 <__aeabi_dsub>
 80a195e:	4604      	mov	r4, r0
 80a1960:	460b      	mov	r3, r1
 80a1962:	4620      	mov	r0, r4
 80a1964:	4619      	mov	r1, r3
 80a1966:	b003      	add	sp, #12
 80a1968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a196c:	4b42      	ldr	r3, [pc, #264]	; (80a1a78 <atan+0x348>)
 80a196e:	429e      	cmp	r6, r3
 80a1970:	da1a      	bge.n	80a19a8 <atan+0x278>
 80a1972:	2200      	movs	r2, #0
 80a1974:	4b41      	ldr	r3, [pc, #260]	; (80a1a7c <atan+0x34c>)
 80a1976:	f000 f88d 	bl	80a1a94 <__aeabi_dsub>
 80a197a:	2200      	movs	r2, #0
 80a197c:	4606      	mov	r6, r0
 80a197e:	460f      	mov	r7, r1
 80a1980:	4620      	mov	r0, r4
 80a1982:	4b3e      	ldr	r3, [pc, #248]	; (80a1a7c <atan+0x34c>)
 80a1984:	4629      	mov	r1, r5
 80a1986:	f000 fa3d 	bl	80a1e04 <__aeabi_dmul>
 80a198a:	2200      	movs	r2, #0
 80a198c:	4b38      	ldr	r3, [pc, #224]	; (80a1a70 <atan+0x340>)
 80a198e:	f000 f883 	bl	80a1a98 <__adddf3>
 80a1992:	4602      	mov	r2, r0
 80a1994:	460b      	mov	r3, r1
 80a1996:	4630      	mov	r0, r6
 80a1998:	4639      	mov	r1, r7
 80a199a:	f000 fb5d 	bl	80a2058 <__aeabi_ddiv>
 80a199e:	f04f 0b02 	mov.w	fp, #2
 80a19a2:	4604      	mov	r4, r0
 80a19a4:	9101      	str	r1, [sp, #4]
 80a19a6:	e6eb      	b.n	80a1780 <atan+0x50>
 80a19a8:	4602      	mov	r2, r0
 80a19aa:	460b      	mov	r3, r1
 80a19ac:	2000      	movs	r0, #0
 80a19ae:	4934      	ldr	r1, [pc, #208]	; (80a1a80 <atan+0x350>)
 80a19b0:	f000 fb52 	bl	80a2058 <__aeabi_ddiv>
 80a19b4:	f04f 0b03 	mov.w	fp, #3
 80a19b8:	4604      	mov	r4, r0
 80a19ba:	9101      	str	r1, [sp, #4]
 80a19bc:	e6e0      	b.n	80a1780 <atan+0x50>
 80a19be:	2200      	movs	r2, #0
 80a19c0:	4b2b      	ldr	r3, [pc, #172]	; (80a1a70 <atan+0x340>)
 80a19c2:	f000 f867 	bl	80a1a94 <__aeabi_dsub>
 80a19c6:	2200      	movs	r2, #0
 80a19c8:	4606      	mov	r6, r0
 80a19ca:	460f      	mov	r7, r1
 80a19cc:	4620      	mov	r0, r4
 80a19ce:	4b28      	ldr	r3, [pc, #160]	; (80a1a70 <atan+0x340>)
 80a19d0:	4629      	mov	r1, r5
 80a19d2:	f000 f861 	bl	80a1a98 <__adddf3>
 80a19d6:	4602      	mov	r2, r0
 80a19d8:	460b      	mov	r3, r1
 80a19da:	4630      	mov	r0, r6
 80a19dc:	4639      	mov	r1, r7
 80a19de:	f000 fb3b 	bl	80a2058 <__aeabi_ddiv>
 80a19e2:	f04f 0b01 	mov.w	fp, #1
 80a19e6:	4604      	mov	r4, r0
 80a19e8:	9101      	str	r1, [sp, #4]
 80a19ea:	e6c9      	b.n	80a1780 <atan+0x50>
 80a19ec:	f3af 8000 	nop.w
 80a19f0:	e322da11 	.word	0xe322da11
 80a19f4:	3f90ad3a 	.word	0x3f90ad3a
 80a19f8:	24760deb 	.word	0x24760deb
 80a19fc:	3fa97b4b 	.word	0x3fa97b4b
 80a1a00:	a0d03d51 	.word	0xa0d03d51
 80a1a04:	3fb10d66 	.word	0x3fb10d66
 80a1a08:	c54c206e 	.word	0xc54c206e
 80a1a0c:	3fb745cd 	.word	0x3fb745cd
 80a1a10:	920083ff 	.word	0x920083ff
 80a1a14:	3fc24924 	.word	0x3fc24924
 80a1a18:	5555550d 	.word	0x5555550d
 80a1a1c:	3fd55555 	.word	0x3fd55555
 80a1a20:	2c6a6c2f 	.word	0x2c6a6c2f
 80a1a24:	bfa2b444 	.word	0xbfa2b444
 80a1a28:	52defd9a 	.word	0x52defd9a
 80a1a2c:	3fadde2d 	.word	0x3fadde2d
 80a1a30:	af749a6d 	.word	0xaf749a6d
 80a1a34:	3fb3b0f2 	.word	0x3fb3b0f2
 80a1a38:	fe231671 	.word	0xfe231671
 80a1a3c:	3fbc71c6 	.word	0x3fbc71c6
 80a1a40:	9998ebc4 	.word	0x9998ebc4
 80a1a44:	3fc99999 	.word	0x3fc99999
 80a1a48:	8800759c 	.word	0x8800759c
 80a1a4c:	7e37e43c 	.word	0x7e37e43c
 80a1a50:	440fffff 	.word	0x440fffff
 80a1a54:	7ff00000 	.word	0x7ff00000
 80a1a58:	3ff921fb 	.word	0x3ff921fb
 80a1a5c:	bff921fb 	.word	0xbff921fb
 80a1a60:	54442d18 	.word	0x54442d18
 80a1a64:	3fdbffff 	.word	0x3fdbffff
 80a1a68:	080a26d0 	.word	0x080a26d0
 80a1a6c:	080a26f0 	.word	0x080a26f0
 80a1a70:	3ff00000 	.word	0x3ff00000
 80a1a74:	3ff2ffff 	.word	0x3ff2ffff
 80a1a78:	40038000 	.word	0x40038000
 80a1a7c:	3ff80000 	.word	0x3ff80000
 80a1a80:	bff00000 	.word	0xbff00000

080a1a84 <fabs>:
 80a1a84:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1a88:	4770      	bx	lr
 80a1a8a:	bf00      	nop

080a1a8c <__aeabi_drsub>:
 80a1a8c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a1a90:	e002      	b.n	80a1a98 <__adddf3>
 80a1a92:	bf00      	nop

080a1a94 <__aeabi_dsub>:
 80a1a94:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a1a98 <__adddf3>:
 80a1a98:	b530      	push	{r4, r5, lr}
 80a1a9a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a1a9e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a1aa2:	ea94 0f05 	teq	r4, r5
 80a1aa6:	bf08      	it	eq
 80a1aa8:	ea90 0f02 	teqeq	r0, r2
 80a1aac:	bf1f      	itttt	ne
 80a1aae:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a1ab2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a1ab6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a1aba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1abe:	f000 80e2 	beq.w	80a1c86 <__adddf3+0x1ee>
 80a1ac2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a1ac6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a1aca:	bfb8      	it	lt
 80a1acc:	426d      	neglt	r5, r5
 80a1ace:	dd0c      	ble.n	80a1aea <__adddf3+0x52>
 80a1ad0:	442c      	add	r4, r5
 80a1ad2:	ea80 0202 	eor.w	r2, r0, r2
 80a1ad6:	ea81 0303 	eor.w	r3, r1, r3
 80a1ada:	ea82 0000 	eor.w	r0, r2, r0
 80a1ade:	ea83 0101 	eor.w	r1, r3, r1
 80a1ae2:	ea80 0202 	eor.w	r2, r0, r2
 80a1ae6:	ea81 0303 	eor.w	r3, r1, r3
 80a1aea:	2d36      	cmp	r5, #54	; 0x36
 80a1aec:	bf88      	it	hi
 80a1aee:	bd30      	pophi	{r4, r5, pc}
 80a1af0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1af4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a1af8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a1afc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a1b00:	d002      	beq.n	80a1b08 <__adddf3+0x70>
 80a1b02:	4240      	negs	r0, r0
 80a1b04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1b08:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a1b0c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a1b10:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a1b14:	d002      	beq.n	80a1b1c <__adddf3+0x84>
 80a1b16:	4252      	negs	r2, r2
 80a1b18:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a1b1c:	ea94 0f05 	teq	r4, r5
 80a1b20:	f000 80a7 	beq.w	80a1c72 <__adddf3+0x1da>
 80a1b24:	f1a4 0401 	sub.w	r4, r4, #1
 80a1b28:	f1d5 0e20 	rsbs	lr, r5, #32
 80a1b2c:	db0d      	blt.n	80a1b4a <__adddf3+0xb2>
 80a1b2e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a1b32:	fa22 f205 	lsr.w	r2, r2, r5
 80a1b36:	1880      	adds	r0, r0, r2
 80a1b38:	f141 0100 	adc.w	r1, r1, #0
 80a1b3c:	fa03 f20e 	lsl.w	r2, r3, lr
 80a1b40:	1880      	adds	r0, r0, r2
 80a1b42:	fa43 f305 	asr.w	r3, r3, r5
 80a1b46:	4159      	adcs	r1, r3
 80a1b48:	e00e      	b.n	80a1b68 <__adddf3+0xd0>
 80a1b4a:	f1a5 0520 	sub.w	r5, r5, #32
 80a1b4e:	f10e 0e20 	add.w	lr, lr, #32
 80a1b52:	2a01      	cmp	r2, #1
 80a1b54:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a1b58:	bf28      	it	cs
 80a1b5a:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a1b5e:	fa43 f305 	asr.w	r3, r3, r5
 80a1b62:	18c0      	adds	r0, r0, r3
 80a1b64:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a1b68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1b6c:	d507      	bpl.n	80a1b7e <__adddf3+0xe6>
 80a1b6e:	f04f 0e00 	mov.w	lr, #0
 80a1b72:	f1dc 0c00 	rsbs	ip, ip, #0
 80a1b76:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a1b7a:	eb6e 0101 	sbc.w	r1, lr, r1
 80a1b7e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a1b82:	d31b      	bcc.n	80a1bbc <__adddf3+0x124>
 80a1b84:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a1b88:	d30c      	bcc.n	80a1ba4 <__adddf3+0x10c>
 80a1b8a:	0849      	lsrs	r1, r1, #1
 80a1b8c:	ea5f 0030 	movs.w	r0, r0, rrx
 80a1b90:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a1b94:	f104 0401 	add.w	r4, r4, #1
 80a1b98:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a1b9c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a1ba0:	f080 809a 	bcs.w	80a1cd8 <__adddf3+0x240>
 80a1ba4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a1ba8:	bf08      	it	eq
 80a1baa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a1bae:	f150 0000 	adcs.w	r0, r0, #0
 80a1bb2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1bb6:	ea41 0105 	orr.w	r1, r1, r5
 80a1bba:	bd30      	pop	{r4, r5, pc}
 80a1bbc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a1bc0:	4140      	adcs	r0, r0
 80a1bc2:	eb41 0101 	adc.w	r1, r1, r1
 80a1bc6:	3c01      	subs	r4, #1
 80a1bc8:	bf28      	it	cs
 80a1bca:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a1bce:	d2e9      	bcs.n	80a1ba4 <__adddf3+0x10c>
 80a1bd0:	f091 0f00 	teq	r1, #0
 80a1bd4:	bf04      	itt	eq
 80a1bd6:	4601      	moveq	r1, r0
 80a1bd8:	2000      	moveq	r0, #0
 80a1bda:	fab1 f381 	clz	r3, r1
 80a1bde:	bf08      	it	eq
 80a1be0:	3320      	addeq	r3, #32
 80a1be2:	f1a3 030b 	sub.w	r3, r3, #11
 80a1be6:	f1b3 0220 	subs.w	r2, r3, #32
 80a1bea:	da0c      	bge.n	80a1c06 <__adddf3+0x16e>
 80a1bec:	320c      	adds	r2, #12
 80a1bee:	dd08      	ble.n	80a1c02 <__adddf3+0x16a>
 80a1bf0:	f102 0c14 	add.w	ip, r2, #20
 80a1bf4:	f1c2 020c 	rsb	r2, r2, #12
 80a1bf8:	fa01 f00c 	lsl.w	r0, r1, ip
 80a1bfc:	fa21 f102 	lsr.w	r1, r1, r2
 80a1c00:	e00c      	b.n	80a1c1c <__adddf3+0x184>
 80a1c02:	f102 0214 	add.w	r2, r2, #20
 80a1c06:	bfd8      	it	le
 80a1c08:	f1c2 0c20 	rsble	ip, r2, #32
 80a1c0c:	fa01 f102 	lsl.w	r1, r1, r2
 80a1c10:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a1c14:	bfdc      	itt	le
 80a1c16:	ea41 010c 	orrle.w	r1, r1, ip
 80a1c1a:	4090      	lslle	r0, r2
 80a1c1c:	1ae4      	subs	r4, r4, r3
 80a1c1e:	bfa2      	ittt	ge
 80a1c20:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a1c24:	4329      	orrge	r1, r5
 80a1c26:	bd30      	popge	{r4, r5, pc}
 80a1c28:	ea6f 0404 	mvn.w	r4, r4
 80a1c2c:	3c1f      	subs	r4, #31
 80a1c2e:	da1c      	bge.n	80a1c6a <__adddf3+0x1d2>
 80a1c30:	340c      	adds	r4, #12
 80a1c32:	dc0e      	bgt.n	80a1c52 <__adddf3+0x1ba>
 80a1c34:	f104 0414 	add.w	r4, r4, #20
 80a1c38:	f1c4 0220 	rsb	r2, r4, #32
 80a1c3c:	fa20 f004 	lsr.w	r0, r0, r4
 80a1c40:	fa01 f302 	lsl.w	r3, r1, r2
 80a1c44:	ea40 0003 	orr.w	r0, r0, r3
 80a1c48:	fa21 f304 	lsr.w	r3, r1, r4
 80a1c4c:	ea45 0103 	orr.w	r1, r5, r3
 80a1c50:	bd30      	pop	{r4, r5, pc}
 80a1c52:	f1c4 040c 	rsb	r4, r4, #12
 80a1c56:	f1c4 0220 	rsb	r2, r4, #32
 80a1c5a:	fa20 f002 	lsr.w	r0, r0, r2
 80a1c5e:	fa01 f304 	lsl.w	r3, r1, r4
 80a1c62:	ea40 0003 	orr.w	r0, r0, r3
 80a1c66:	4629      	mov	r1, r5
 80a1c68:	bd30      	pop	{r4, r5, pc}
 80a1c6a:	fa21 f004 	lsr.w	r0, r1, r4
 80a1c6e:	4629      	mov	r1, r5
 80a1c70:	bd30      	pop	{r4, r5, pc}
 80a1c72:	f094 0f00 	teq	r4, #0
 80a1c76:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a1c7a:	bf06      	itte	eq
 80a1c7c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a1c80:	3401      	addeq	r4, #1
 80a1c82:	3d01      	subne	r5, #1
 80a1c84:	e74e      	b.n	80a1b24 <__adddf3+0x8c>
 80a1c86:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1c8a:	bf18      	it	ne
 80a1c8c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1c90:	d029      	beq.n	80a1ce6 <__adddf3+0x24e>
 80a1c92:	ea94 0f05 	teq	r4, r5
 80a1c96:	bf08      	it	eq
 80a1c98:	ea90 0f02 	teqeq	r0, r2
 80a1c9c:	d005      	beq.n	80a1caa <__adddf3+0x212>
 80a1c9e:	ea54 0c00 	orrs.w	ip, r4, r0
 80a1ca2:	bf04      	itt	eq
 80a1ca4:	4619      	moveq	r1, r3
 80a1ca6:	4610      	moveq	r0, r2
 80a1ca8:	bd30      	pop	{r4, r5, pc}
 80a1caa:	ea91 0f03 	teq	r1, r3
 80a1cae:	bf1e      	ittt	ne
 80a1cb0:	2100      	movne	r1, #0
 80a1cb2:	2000      	movne	r0, #0
 80a1cb4:	bd30      	popne	{r4, r5, pc}
 80a1cb6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a1cba:	d105      	bne.n	80a1cc8 <__adddf3+0x230>
 80a1cbc:	0040      	lsls	r0, r0, #1
 80a1cbe:	4149      	adcs	r1, r1
 80a1cc0:	bf28      	it	cs
 80a1cc2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a1cc6:	bd30      	pop	{r4, r5, pc}
 80a1cc8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a1ccc:	bf3c      	itt	cc
 80a1cce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a1cd2:	bd30      	popcc	{r4, r5, pc}
 80a1cd4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1cd8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a1cdc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a1ce0:	f04f 0000 	mov.w	r0, #0
 80a1ce4:	bd30      	pop	{r4, r5, pc}
 80a1ce6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1cea:	bf1a      	itte	ne
 80a1cec:	4619      	movne	r1, r3
 80a1cee:	4610      	movne	r0, r2
 80a1cf0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a1cf4:	bf1c      	itt	ne
 80a1cf6:	460b      	movne	r3, r1
 80a1cf8:	4602      	movne	r2, r0
 80a1cfa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a1cfe:	bf06      	itte	eq
 80a1d00:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a1d04:	ea91 0f03 	teqeq	r1, r3
 80a1d08:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a1d0c:	bd30      	pop	{r4, r5, pc}
 80a1d0e:	bf00      	nop

080a1d10 <__aeabi_ui2d>:
 80a1d10:	f090 0f00 	teq	r0, #0
 80a1d14:	bf04      	itt	eq
 80a1d16:	2100      	moveq	r1, #0
 80a1d18:	4770      	bxeq	lr
 80a1d1a:	b530      	push	{r4, r5, lr}
 80a1d1c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1d20:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1d24:	f04f 0500 	mov.w	r5, #0
 80a1d28:	f04f 0100 	mov.w	r1, #0
 80a1d2c:	e750      	b.n	80a1bd0 <__adddf3+0x138>
 80a1d2e:	bf00      	nop

080a1d30 <__aeabi_i2d>:
 80a1d30:	f090 0f00 	teq	r0, #0
 80a1d34:	bf04      	itt	eq
 80a1d36:	2100      	moveq	r1, #0
 80a1d38:	4770      	bxeq	lr
 80a1d3a:	b530      	push	{r4, r5, lr}
 80a1d3c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1d40:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1d44:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a1d48:	bf48      	it	mi
 80a1d4a:	4240      	negmi	r0, r0
 80a1d4c:	f04f 0100 	mov.w	r1, #0
 80a1d50:	e73e      	b.n	80a1bd0 <__adddf3+0x138>
 80a1d52:	bf00      	nop

080a1d54 <__aeabi_f2d>:
 80a1d54:	0042      	lsls	r2, r0, #1
 80a1d56:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a1d5a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a1d5e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a1d62:	bf1f      	itttt	ne
 80a1d64:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a1d68:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1d6c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a1d70:	4770      	bxne	lr
 80a1d72:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a1d76:	bf08      	it	eq
 80a1d78:	4770      	bxeq	lr
 80a1d7a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a1d7e:	bf04      	itt	eq
 80a1d80:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a1d84:	4770      	bxeq	lr
 80a1d86:	b530      	push	{r4, r5, lr}
 80a1d88:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a1d8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1d90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1d94:	e71c      	b.n	80a1bd0 <__adddf3+0x138>
 80a1d96:	bf00      	nop

080a1d98 <__aeabi_ul2d>:
 80a1d98:	ea50 0201 	orrs.w	r2, r0, r1
 80a1d9c:	bf08      	it	eq
 80a1d9e:	4770      	bxeq	lr
 80a1da0:	b530      	push	{r4, r5, lr}
 80a1da2:	f04f 0500 	mov.w	r5, #0
 80a1da6:	e00a      	b.n	80a1dbe <__aeabi_l2d+0x16>

080a1da8 <__aeabi_l2d>:
 80a1da8:	ea50 0201 	orrs.w	r2, r0, r1
 80a1dac:	bf08      	it	eq
 80a1dae:	4770      	bxeq	lr
 80a1db0:	b530      	push	{r4, r5, lr}
 80a1db2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a1db6:	d502      	bpl.n	80a1dbe <__aeabi_l2d+0x16>
 80a1db8:	4240      	negs	r0, r0
 80a1dba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1dbe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1dc2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1dc6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a1dca:	f43f aed8 	beq.w	80a1b7e <__adddf3+0xe6>
 80a1dce:	f04f 0203 	mov.w	r2, #3
 80a1dd2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1dd6:	bf18      	it	ne
 80a1dd8:	3203      	addne	r2, #3
 80a1dda:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1dde:	bf18      	it	ne
 80a1de0:	3203      	addne	r2, #3
 80a1de2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a1de6:	f1c2 0320 	rsb	r3, r2, #32
 80a1dea:	fa00 fc03 	lsl.w	ip, r0, r3
 80a1dee:	fa20 f002 	lsr.w	r0, r0, r2
 80a1df2:	fa01 fe03 	lsl.w	lr, r1, r3
 80a1df6:	ea40 000e 	orr.w	r0, r0, lr
 80a1dfa:	fa21 f102 	lsr.w	r1, r1, r2
 80a1dfe:	4414      	add	r4, r2
 80a1e00:	e6bd      	b.n	80a1b7e <__adddf3+0xe6>
 80a1e02:	bf00      	nop

080a1e04 <__aeabi_dmul>:
 80a1e04:	b570      	push	{r4, r5, r6, lr}
 80a1e06:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1e0a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a1e0e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a1e12:	bf1d      	ittte	ne
 80a1e14:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a1e18:	ea94 0f0c 	teqne	r4, ip
 80a1e1c:	ea95 0f0c 	teqne	r5, ip
 80a1e20:	f000 f8de 	bleq	80a1fe0 <__aeabi_dmul+0x1dc>
 80a1e24:	442c      	add	r4, r5
 80a1e26:	ea81 0603 	eor.w	r6, r1, r3
 80a1e2a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a1e2e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a1e32:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a1e36:	bf18      	it	ne
 80a1e38:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a1e3c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1e40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a1e44:	d038      	beq.n	80a1eb8 <__aeabi_dmul+0xb4>
 80a1e46:	fba0 ce02 	umull	ip, lr, r0, r2
 80a1e4a:	f04f 0500 	mov.w	r5, #0
 80a1e4e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a1e52:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a1e56:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a1e5a:	f04f 0600 	mov.w	r6, #0
 80a1e5e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a1e62:	f09c 0f00 	teq	ip, #0
 80a1e66:	bf18      	it	ne
 80a1e68:	f04e 0e01 	orrne.w	lr, lr, #1
 80a1e6c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a1e70:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a1e74:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a1e78:	d204      	bcs.n	80a1e84 <__aeabi_dmul+0x80>
 80a1e7a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a1e7e:	416d      	adcs	r5, r5
 80a1e80:	eb46 0606 	adc.w	r6, r6, r6
 80a1e84:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a1e88:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a1e8c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a1e90:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a1e94:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a1e98:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a1e9c:	bf88      	it	hi
 80a1e9e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a1ea2:	d81e      	bhi.n	80a1ee2 <__aeabi_dmul+0xde>
 80a1ea4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a1ea8:	bf08      	it	eq
 80a1eaa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a1eae:	f150 0000 	adcs.w	r0, r0, #0
 80a1eb2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1eb6:	bd70      	pop	{r4, r5, r6, pc}
 80a1eb8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a1ebc:	ea46 0101 	orr.w	r1, r6, r1
 80a1ec0:	ea40 0002 	orr.w	r0, r0, r2
 80a1ec4:	ea81 0103 	eor.w	r1, r1, r3
 80a1ec8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a1ecc:	bfc2      	ittt	gt
 80a1ece:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a1ed2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a1ed6:	bd70      	popgt	{r4, r5, r6, pc}
 80a1ed8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1edc:	f04f 0e00 	mov.w	lr, #0
 80a1ee0:	3c01      	subs	r4, #1
 80a1ee2:	f300 80ab 	bgt.w	80a203c <__aeabi_dmul+0x238>
 80a1ee6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a1eea:	bfde      	ittt	le
 80a1eec:	2000      	movle	r0, #0
 80a1eee:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a1ef2:	bd70      	pople	{r4, r5, r6, pc}
 80a1ef4:	f1c4 0400 	rsb	r4, r4, #0
 80a1ef8:	3c20      	subs	r4, #32
 80a1efa:	da35      	bge.n	80a1f68 <__aeabi_dmul+0x164>
 80a1efc:	340c      	adds	r4, #12
 80a1efe:	dc1b      	bgt.n	80a1f38 <__aeabi_dmul+0x134>
 80a1f00:	f104 0414 	add.w	r4, r4, #20
 80a1f04:	f1c4 0520 	rsb	r5, r4, #32
 80a1f08:	fa00 f305 	lsl.w	r3, r0, r5
 80a1f0c:	fa20 f004 	lsr.w	r0, r0, r4
 80a1f10:	fa01 f205 	lsl.w	r2, r1, r5
 80a1f14:	ea40 0002 	orr.w	r0, r0, r2
 80a1f18:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a1f1c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1f20:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a1f24:	fa21 f604 	lsr.w	r6, r1, r4
 80a1f28:	eb42 0106 	adc.w	r1, r2, r6
 80a1f2c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1f30:	bf08      	it	eq
 80a1f32:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1f36:	bd70      	pop	{r4, r5, r6, pc}
 80a1f38:	f1c4 040c 	rsb	r4, r4, #12
 80a1f3c:	f1c4 0520 	rsb	r5, r4, #32
 80a1f40:	fa00 f304 	lsl.w	r3, r0, r4
 80a1f44:	fa20 f005 	lsr.w	r0, r0, r5
 80a1f48:	fa01 f204 	lsl.w	r2, r1, r4
 80a1f4c:	ea40 0002 	orr.w	r0, r0, r2
 80a1f50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1f54:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a1f58:	f141 0100 	adc.w	r1, r1, #0
 80a1f5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1f60:	bf08      	it	eq
 80a1f62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1f66:	bd70      	pop	{r4, r5, r6, pc}
 80a1f68:	f1c4 0520 	rsb	r5, r4, #32
 80a1f6c:	fa00 f205 	lsl.w	r2, r0, r5
 80a1f70:	ea4e 0e02 	orr.w	lr, lr, r2
 80a1f74:	fa20 f304 	lsr.w	r3, r0, r4
 80a1f78:	fa01 f205 	lsl.w	r2, r1, r5
 80a1f7c:	ea43 0302 	orr.w	r3, r3, r2
 80a1f80:	fa21 f004 	lsr.w	r0, r1, r4
 80a1f84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1f88:	fa21 f204 	lsr.w	r2, r1, r4
 80a1f8c:	ea20 0002 	bic.w	r0, r0, r2
 80a1f90:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a1f94:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1f98:	bf08      	it	eq
 80a1f9a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1f9e:	bd70      	pop	{r4, r5, r6, pc}
 80a1fa0:	f094 0f00 	teq	r4, #0
 80a1fa4:	d10f      	bne.n	80a1fc6 <__aeabi_dmul+0x1c2>
 80a1fa6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a1faa:	0040      	lsls	r0, r0, #1
 80a1fac:	eb41 0101 	adc.w	r1, r1, r1
 80a1fb0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1fb4:	bf08      	it	eq
 80a1fb6:	3c01      	subeq	r4, #1
 80a1fb8:	d0f7      	beq.n	80a1faa <__aeabi_dmul+0x1a6>
 80a1fba:	ea41 0106 	orr.w	r1, r1, r6
 80a1fbe:	f095 0f00 	teq	r5, #0
 80a1fc2:	bf18      	it	ne
 80a1fc4:	4770      	bxne	lr
 80a1fc6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a1fca:	0052      	lsls	r2, r2, #1
 80a1fcc:	eb43 0303 	adc.w	r3, r3, r3
 80a1fd0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a1fd4:	bf08      	it	eq
 80a1fd6:	3d01      	subeq	r5, #1
 80a1fd8:	d0f7      	beq.n	80a1fca <__aeabi_dmul+0x1c6>
 80a1fda:	ea43 0306 	orr.w	r3, r3, r6
 80a1fde:	4770      	bx	lr
 80a1fe0:	ea94 0f0c 	teq	r4, ip
 80a1fe4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a1fe8:	bf18      	it	ne
 80a1fea:	ea95 0f0c 	teqne	r5, ip
 80a1fee:	d00c      	beq.n	80a200a <__aeabi_dmul+0x206>
 80a1ff0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a1ff4:	bf18      	it	ne
 80a1ff6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a1ffa:	d1d1      	bne.n	80a1fa0 <__aeabi_dmul+0x19c>
 80a1ffc:	ea81 0103 	eor.w	r1, r1, r3
 80a2000:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2004:	f04f 0000 	mov.w	r0, #0
 80a2008:	bd70      	pop	{r4, r5, r6, pc}
 80a200a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a200e:	bf06      	itte	eq
 80a2010:	4610      	moveq	r0, r2
 80a2012:	4619      	moveq	r1, r3
 80a2014:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2018:	d019      	beq.n	80a204e <__aeabi_dmul+0x24a>
 80a201a:	ea94 0f0c 	teq	r4, ip
 80a201e:	d102      	bne.n	80a2026 <__aeabi_dmul+0x222>
 80a2020:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a2024:	d113      	bne.n	80a204e <__aeabi_dmul+0x24a>
 80a2026:	ea95 0f0c 	teq	r5, ip
 80a202a:	d105      	bne.n	80a2038 <__aeabi_dmul+0x234>
 80a202c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a2030:	bf1c      	itt	ne
 80a2032:	4610      	movne	r0, r2
 80a2034:	4619      	movne	r1, r3
 80a2036:	d10a      	bne.n	80a204e <__aeabi_dmul+0x24a>
 80a2038:	ea81 0103 	eor.w	r1, r1, r3
 80a203c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2040:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2044:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2048:	f04f 0000 	mov.w	r0, #0
 80a204c:	bd70      	pop	{r4, r5, r6, pc}
 80a204e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2052:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a2056:	bd70      	pop	{r4, r5, r6, pc}

080a2058 <__aeabi_ddiv>:
 80a2058:	b570      	push	{r4, r5, r6, lr}
 80a205a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a205e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2062:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2066:	bf1d      	ittte	ne
 80a2068:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a206c:	ea94 0f0c 	teqne	r4, ip
 80a2070:	ea95 0f0c 	teqne	r5, ip
 80a2074:	f000 f8a7 	bleq	80a21c6 <__aeabi_ddiv+0x16e>
 80a2078:	eba4 0405 	sub.w	r4, r4, r5
 80a207c:	ea81 0e03 	eor.w	lr, r1, r3
 80a2080:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2084:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2088:	f000 8088 	beq.w	80a219c <__aeabi_ddiv+0x144>
 80a208c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2090:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a2094:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a2098:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a209c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a20a0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a20a4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a20a8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a20ac:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a20b0:	429d      	cmp	r5, r3
 80a20b2:	bf08      	it	eq
 80a20b4:	4296      	cmpeq	r6, r2
 80a20b6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a20ba:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a20be:	d202      	bcs.n	80a20c6 <__aeabi_ddiv+0x6e>
 80a20c0:	085b      	lsrs	r3, r3, #1
 80a20c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a20c6:	1ab6      	subs	r6, r6, r2
 80a20c8:	eb65 0503 	sbc.w	r5, r5, r3
 80a20cc:	085b      	lsrs	r3, r3, #1
 80a20ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80a20d2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a20d6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a20da:	ebb6 0e02 	subs.w	lr, r6, r2
 80a20de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a20e2:	bf22      	ittt	cs
 80a20e4:	1ab6      	subcs	r6, r6, r2
 80a20e6:	4675      	movcs	r5, lr
 80a20e8:	ea40 000c 	orrcs.w	r0, r0, ip
 80a20ec:	085b      	lsrs	r3, r3, #1
 80a20ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80a20f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a20f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a20fa:	bf22      	ittt	cs
 80a20fc:	1ab6      	subcs	r6, r6, r2
 80a20fe:	4675      	movcs	r5, lr
 80a2100:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2104:	085b      	lsrs	r3, r3, #1
 80a2106:	ea4f 0232 	mov.w	r2, r2, rrx
 80a210a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a210e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2112:	bf22      	ittt	cs
 80a2114:	1ab6      	subcs	r6, r6, r2
 80a2116:	4675      	movcs	r5, lr
 80a2118:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a211c:	085b      	lsrs	r3, r3, #1
 80a211e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2122:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2126:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a212a:	bf22      	ittt	cs
 80a212c:	1ab6      	subcs	r6, r6, r2
 80a212e:	4675      	movcs	r5, lr
 80a2130:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2134:	ea55 0e06 	orrs.w	lr, r5, r6
 80a2138:	d018      	beq.n	80a216c <__aeabi_ddiv+0x114>
 80a213a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a213e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a2142:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a2146:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a214a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a214e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a2152:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a2156:	d1c0      	bne.n	80a20da <__aeabi_ddiv+0x82>
 80a2158:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a215c:	d10b      	bne.n	80a2176 <__aeabi_ddiv+0x11e>
 80a215e:	ea41 0100 	orr.w	r1, r1, r0
 80a2162:	f04f 0000 	mov.w	r0, #0
 80a2166:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a216a:	e7b6      	b.n	80a20da <__aeabi_ddiv+0x82>
 80a216c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2170:	bf04      	itt	eq
 80a2172:	4301      	orreq	r1, r0
 80a2174:	2000      	moveq	r0, #0
 80a2176:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a217a:	bf88      	it	hi
 80a217c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2180:	f63f aeaf 	bhi.w	80a1ee2 <__aeabi_dmul+0xde>
 80a2184:	ebb5 0c03 	subs.w	ip, r5, r3
 80a2188:	bf04      	itt	eq
 80a218a:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a218e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2192:	f150 0000 	adcs.w	r0, r0, #0
 80a2196:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a219a:	bd70      	pop	{r4, r5, r6, pc}
 80a219c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a21a0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a21a4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a21a8:	bfc2      	ittt	gt
 80a21aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a21ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a21b2:	bd70      	popgt	{r4, r5, r6, pc}
 80a21b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a21b8:	f04f 0e00 	mov.w	lr, #0
 80a21bc:	3c01      	subs	r4, #1
 80a21be:	e690      	b.n	80a1ee2 <__aeabi_dmul+0xde>
 80a21c0:	ea45 0e06 	orr.w	lr, r5, r6
 80a21c4:	e68d      	b.n	80a1ee2 <__aeabi_dmul+0xde>
 80a21c6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a21ca:	ea94 0f0c 	teq	r4, ip
 80a21ce:	bf08      	it	eq
 80a21d0:	ea95 0f0c 	teqeq	r5, ip
 80a21d4:	f43f af3b 	beq.w	80a204e <__aeabi_dmul+0x24a>
 80a21d8:	ea94 0f0c 	teq	r4, ip
 80a21dc:	d10a      	bne.n	80a21f4 <__aeabi_ddiv+0x19c>
 80a21de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a21e2:	f47f af34 	bne.w	80a204e <__aeabi_dmul+0x24a>
 80a21e6:	ea95 0f0c 	teq	r5, ip
 80a21ea:	f47f af25 	bne.w	80a2038 <__aeabi_dmul+0x234>
 80a21ee:	4610      	mov	r0, r2
 80a21f0:	4619      	mov	r1, r3
 80a21f2:	e72c      	b.n	80a204e <__aeabi_dmul+0x24a>
 80a21f4:	ea95 0f0c 	teq	r5, ip
 80a21f8:	d106      	bne.n	80a2208 <__aeabi_ddiv+0x1b0>
 80a21fa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a21fe:	f43f aefd 	beq.w	80a1ffc <__aeabi_dmul+0x1f8>
 80a2202:	4610      	mov	r0, r2
 80a2204:	4619      	mov	r1, r3
 80a2206:	e722      	b.n	80a204e <__aeabi_dmul+0x24a>
 80a2208:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a220c:	bf18      	it	ne
 80a220e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2212:	f47f aec5 	bne.w	80a1fa0 <__aeabi_dmul+0x19c>
 80a2216:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a221a:	f47f af0d 	bne.w	80a2038 <__aeabi_dmul+0x234>
 80a221e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a2222:	f47f aeeb 	bne.w	80a1ffc <__aeabi_dmul+0x1f8>
 80a2226:	e712      	b.n	80a204e <__aeabi_dmul+0x24a>

080a2228 <__gedf2>:
 80a2228:	f04f 3cff 	mov.w	ip, #4294967295
 80a222c:	e006      	b.n	80a223c <__cmpdf2+0x4>
 80a222e:	bf00      	nop

080a2230 <__ledf2>:
 80a2230:	f04f 0c01 	mov.w	ip, #1
 80a2234:	e002      	b.n	80a223c <__cmpdf2+0x4>
 80a2236:	bf00      	nop

080a2238 <__cmpdf2>:
 80a2238:	f04f 0c01 	mov.w	ip, #1
 80a223c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2240:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2244:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2248:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a224c:	bf18      	it	ne
 80a224e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a2252:	d01b      	beq.n	80a228c <__cmpdf2+0x54>
 80a2254:	b001      	add	sp, #4
 80a2256:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a225a:	bf0c      	ite	eq
 80a225c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a2260:	ea91 0f03 	teqne	r1, r3
 80a2264:	bf02      	ittt	eq
 80a2266:	ea90 0f02 	teqeq	r0, r2
 80a226a:	2000      	moveq	r0, #0
 80a226c:	4770      	bxeq	lr
 80a226e:	f110 0f00 	cmn.w	r0, #0
 80a2272:	ea91 0f03 	teq	r1, r3
 80a2276:	bf58      	it	pl
 80a2278:	4299      	cmppl	r1, r3
 80a227a:	bf08      	it	eq
 80a227c:	4290      	cmpeq	r0, r2
 80a227e:	bf2c      	ite	cs
 80a2280:	17d8      	asrcs	r0, r3, #31
 80a2282:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a2286:	f040 0001 	orr.w	r0, r0, #1
 80a228a:	4770      	bx	lr
 80a228c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2290:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2294:	d102      	bne.n	80a229c <__cmpdf2+0x64>
 80a2296:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a229a:	d107      	bne.n	80a22ac <__cmpdf2+0x74>
 80a229c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a22a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a22a4:	d1d6      	bne.n	80a2254 <__cmpdf2+0x1c>
 80a22a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a22aa:	d0d3      	beq.n	80a2254 <__cmpdf2+0x1c>
 80a22ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a22b0:	4770      	bx	lr
 80a22b2:	bf00      	nop

080a22b4 <__aeabi_cdrcmple>:
 80a22b4:	4684      	mov	ip, r0
 80a22b6:	4610      	mov	r0, r2
 80a22b8:	4662      	mov	r2, ip
 80a22ba:	468c      	mov	ip, r1
 80a22bc:	4619      	mov	r1, r3
 80a22be:	4663      	mov	r3, ip
 80a22c0:	e000      	b.n	80a22c4 <__aeabi_cdcmpeq>
 80a22c2:	bf00      	nop

080a22c4 <__aeabi_cdcmpeq>:
 80a22c4:	b501      	push	{r0, lr}
 80a22c6:	f7ff ffb7 	bl	80a2238 <__cmpdf2>
 80a22ca:	2800      	cmp	r0, #0
 80a22cc:	bf48      	it	mi
 80a22ce:	f110 0f00 	cmnmi.w	r0, #0
 80a22d2:	bd01      	pop	{r0, pc}

080a22d4 <__aeabi_dcmpeq>:
 80a22d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a22d8:	f7ff fff4 	bl	80a22c4 <__aeabi_cdcmpeq>
 80a22dc:	bf0c      	ite	eq
 80a22de:	2001      	moveq	r0, #1
 80a22e0:	2000      	movne	r0, #0
 80a22e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a22e6:	bf00      	nop

080a22e8 <__aeabi_dcmplt>:
 80a22e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a22ec:	f7ff ffea 	bl	80a22c4 <__aeabi_cdcmpeq>
 80a22f0:	bf34      	ite	cc
 80a22f2:	2001      	movcc	r0, #1
 80a22f4:	2000      	movcs	r0, #0
 80a22f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a22fa:	bf00      	nop

080a22fc <__aeabi_dcmple>:
 80a22fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2300:	f7ff ffe0 	bl	80a22c4 <__aeabi_cdcmpeq>
 80a2304:	bf94      	ite	ls
 80a2306:	2001      	movls	r0, #1
 80a2308:	2000      	movhi	r0, #0
 80a230a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a230e:	bf00      	nop

080a2310 <__aeabi_dcmpge>:
 80a2310:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2314:	f7ff ffce 	bl	80a22b4 <__aeabi_cdrcmple>
 80a2318:	bf94      	ite	ls
 80a231a:	2001      	movls	r0, #1
 80a231c:	2000      	movhi	r0, #0
 80a231e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2322:	bf00      	nop

080a2324 <__aeabi_dcmpgt>:
 80a2324:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2328:	f7ff ffc4 	bl	80a22b4 <__aeabi_cdrcmple>
 80a232c:	bf34      	ite	cc
 80a232e:	2001      	movcc	r0, #1
 80a2330:	2000      	movcs	r0, #0
 80a2332:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2336:	bf00      	nop

080a2338 <__aeabi_dcmpun>:
 80a2338:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a233c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2340:	d102      	bne.n	80a2348 <__aeabi_dcmpun+0x10>
 80a2342:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a2346:	d10a      	bne.n	80a235e <__aeabi_dcmpun+0x26>
 80a2348:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a234c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2350:	d102      	bne.n	80a2358 <__aeabi_dcmpun+0x20>
 80a2352:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a2356:	d102      	bne.n	80a235e <__aeabi_dcmpun+0x26>
 80a2358:	f04f 0000 	mov.w	r0, #0
 80a235c:	4770      	bx	lr
 80a235e:	f04f 0001 	mov.w	r0, #1
 80a2362:	4770      	bx	lr

080a2364 <__aeabi_d2iz>:
 80a2364:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a2368:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a236c:	d215      	bcs.n	80a239a <__aeabi_d2iz+0x36>
 80a236e:	d511      	bpl.n	80a2394 <__aeabi_d2iz+0x30>
 80a2370:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a2374:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a2378:	d912      	bls.n	80a23a0 <__aeabi_d2iz+0x3c>
 80a237a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a237e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a2382:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a2386:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a238a:	fa23 f002 	lsr.w	r0, r3, r2
 80a238e:	bf18      	it	ne
 80a2390:	4240      	negne	r0, r0
 80a2392:	4770      	bx	lr
 80a2394:	f04f 0000 	mov.w	r0, #0
 80a2398:	4770      	bx	lr
 80a239a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a239e:	d105      	bne.n	80a23ac <__aeabi_d2iz+0x48>
 80a23a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a23a4:	bf08      	it	eq
 80a23a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a23aa:	4770      	bx	lr
 80a23ac:	f04f 0000 	mov.w	r0, #0
 80a23b0:	4770      	bx	lr
 80a23b2:	bf00      	nop

080a23b4 <__aeabi_d2uiz>:
 80a23b4:	004a      	lsls	r2, r1, #1
 80a23b6:	d211      	bcs.n	80a23dc <__aeabi_d2uiz+0x28>
 80a23b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a23bc:	d211      	bcs.n	80a23e2 <__aeabi_d2uiz+0x2e>
 80a23be:	d50d      	bpl.n	80a23dc <__aeabi_d2uiz+0x28>
 80a23c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a23c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a23c8:	d40e      	bmi.n	80a23e8 <__aeabi_d2uiz+0x34>
 80a23ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a23ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a23d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a23d6:	fa23 f002 	lsr.w	r0, r3, r2
 80a23da:	4770      	bx	lr
 80a23dc:	f04f 0000 	mov.w	r0, #0
 80a23e0:	4770      	bx	lr
 80a23e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a23e6:	d102      	bne.n	80a23ee <__aeabi_d2uiz+0x3a>
 80a23e8:	f04f 30ff 	mov.w	r0, #4294967295
 80a23ec:	4770      	bx	lr
 80a23ee:	f04f 0000 	mov.w	r0, #0
 80a23f2:	4770      	bx	lr

080a23f4 <__cxa_atexit>:
 80a23f4:	b510      	push	{r4, lr}
 80a23f6:	4604      	mov	r4, r0
 80a23f8:	4804      	ldr	r0, [pc, #16]	; (80a240c <__cxa_atexit+0x18>)
 80a23fa:	4613      	mov	r3, r2
 80a23fc:	b120      	cbz	r0, 80a2408 <__cxa_atexit+0x14>
 80a23fe:	460a      	mov	r2, r1
 80a2400:	2002      	movs	r0, #2
 80a2402:	4621      	mov	r1, r4
 80a2404:	f3af 8000 	nop.w
 80a2408:	bd10      	pop	{r4, pc}
 80a240a:	bf00      	nop
 80a240c:	00000000 	.word	0x00000000

080a2410 <memcpy>:
 80a2410:	440a      	add	r2, r1
 80a2412:	4291      	cmp	r1, r2
 80a2414:	f100 33ff 	add.w	r3, r0, #4294967295
 80a2418:	d100      	bne.n	80a241c <memcpy+0xc>
 80a241a:	4770      	bx	lr
 80a241c:	b510      	push	{r4, lr}
 80a241e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2422:	4291      	cmp	r1, r2
 80a2424:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2428:	d1f9      	bne.n	80a241e <memcpy+0xe>
 80a242a:	bd10      	pop	{r4, pc}

080a242c <memset>:
 80a242c:	4603      	mov	r3, r0
 80a242e:	4402      	add	r2, r0
 80a2430:	4293      	cmp	r3, r2
 80a2432:	d100      	bne.n	80a2436 <memset+0xa>
 80a2434:	4770      	bx	lr
 80a2436:	f803 1b01 	strb.w	r1, [r3], #1
 80a243a:	e7f9      	b.n	80a2430 <memset+0x4>

080a243c <srand>:
 80a243c:	b538      	push	{r3, r4, r5, lr}
 80a243e:	4b0d      	ldr	r3, [pc, #52]	; (80a2474 <srand+0x38>)
 80a2440:	4604      	mov	r4, r0
 80a2442:	681d      	ldr	r5, [r3, #0]
 80a2444:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a2446:	b97b      	cbnz	r3, 80a2468 <srand+0x2c>
 80a2448:	2018      	movs	r0, #24
 80a244a:	f7fe fa83 	bl	80a0954 <malloc>
 80a244e:	4a0a      	ldr	r2, [pc, #40]	; (80a2478 <srand+0x3c>)
 80a2450:	4b0a      	ldr	r3, [pc, #40]	; (80a247c <srand+0x40>)
 80a2452:	63a8      	str	r0, [r5, #56]	; 0x38
 80a2454:	e9c0 2300 	strd	r2, r3, [r0]
 80a2458:	4b09      	ldr	r3, [pc, #36]	; (80a2480 <srand+0x44>)
 80a245a:	2201      	movs	r2, #1
 80a245c:	6083      	str	r3, [r0, #8]
 80a245e:	230b      	movs	r3, #11
 80a2460:	8183      	strh	r3, [r0, #12]
 80a2462:	2300      	movs	r3, #0
 80a2464:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2468:	2200      	movs	r2, #0
 80a246a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a246c:	611c      	str	r4, [r3, #16]
 80a246e:	615a      	str	r2, [r3, #20]
 80a2470:	bd38      	pop	{r3, r4, r5, pc}
 80a2472:	bf00      	nop
 80a2474:	20000010 	.word	0x20000010
 80a2478:	abcd330e 	.word	0xabcd330e
 80a247c:	e66d1234 	.word	0xe66d1234
 80a2480:	0005deec 	.word	0x0005deec

080a2484 <strlen>:
 80a2484:	4603      	mov	r3, r0
 80a2486:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a248a:	2a00      	cmp	r2, #0
 80a248c:	d1fb      	bne.n	80a2486 <strlen+0x2>
 80a248e:	1a18      	subs	r0, r3, r0
 80a2490:	3801      	subs	r0, #1
 80a2492:	4770      	bx	lr

080a2494 <dynalib_user>:
 80a2494:	0021 080a 0061 080a 0089 080a 008d 080a     !...a...........
 80a24a4:	0000 0000 504d 3655 3530 2030 6f63 6e6e     ....MPU6050 conn
 80a24b4:	6365 6974 6e6f 7320 6375 6563 7373 7566     ection successfu
 80a24c4:	006c 504d 3655 3530 2030 6f63 6e6e 6365     l.MPU6050 connec
 80a24d4:	6974 6e6f 6620 6961 656c 0064 6e49 7469     tion failed.Init
 80a24e4:	4920 4332 6420 7665 6369 2e65 2e2e 7400      I2C device....t
 80a24f4:	7365 6974 676e 4d20 5550 3036 3035 6320     esting MPU6050 c
 80a2504:	6e6f 656e 7463 6f69 2e6e 2e2e 4100 676e     onnection....Ang
 80a2514:	656c 3d58 0020 6e41 6c67 5965 203d 4100     leX= .AngleY= .A
 80a2524:	676e 656c 3d5a 0020 2d2d 2d2d 2d2d 2d2d     ngleZ= .--------
 80a2534:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
 80a2544:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
 80a2554:	002d 616e 006e 6e69 0066 766f 0066 7061     -.nan.inf.ovf.ap
 80a2564:	0070 5925 252d 2d6d 6425 2554 3a48 4d25     p.%Y-%m-%dT%H:%M
 80a2574:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

080a2584 <_ZTV9IPAddress>:
	...
 80a258c:	0e3d 080a 0e2d 080a 0e2f 080a               =...-.../...

080a2598 <_ZTV9USBSerial>:
	...
 80a25a0:	0ef9 080a 0f5f 080a 0f37 080a 09fd 080a     ...._...7.......
 80a25b0:	0f29 080a 0efb 080a 0f0b 080a 0f59 080a     )...........Y...
 80a25c0:	0f1b 080a 0ef5 080a                         ........

080a25c8 <_ZTV11USARTSerial>:
	...
 80a25d0:	1095 080a 10fd 080a 10d9 080a 09fd 080a     ................
 80a25e0:	10a9 080a 10c5 080a 10b7 080a 10d3 080a     ................
 80a25f0:	1097 080a 109b 080a                         ........

080a25f8 <_ZTV7TwoWire>:
	...
 80a2600:	1189 080a 11d3 080a 11ab 080a 118b 080a     ................
 80a2610:	11b3 080a 11bb 080a 11c3 080a 11cb 080a     ................

080a2620 <_ZTVN5spark9WiFiClassE>:
	...
 80a2628:	1315 080a 130b 080a 1301 080a 127f 080a     ................
 80a2638:	0c59 080a 12f5 080a 1375 080a 137d 080a     Y.......u...}...
 80a2648:	12e9 080a 12e1 080a 12d7 080a 12cd 080a     ................
 80a2658:	1289 080a                                   ....

080a265c <_ZTVN5spark12NetworkClassE>:
	...
 80a2664:	1335 080a 133f 080a 1349 080a 1353 080a     5...?...I...S...
 80a2674:	135d 080a 1369 080a 1375 080a 137d 080a     ]...i...u...}...
 80a2684:	1385 080a 1391 080a 1399 080a 13a3 080a     ................
 80a2694:	13ad 080a                                   ....

080a2698 <_ZSt7nothrow>:
	...

080a26a0 <CSWTCH.8>:
 80a26a0:	2d18 5444 21fb bfe9 21d2 7f33 d97c 4002     .-DT.!...!3.|..@
 80a26b0:	21d2 7f33 d97c c002                         .!3.|...

080a26b8 <CSWTCH.9>:
 80a26b8:	0000 0000 0000 8000 2d18 5444 21fb 4009     .........-DT.!.@
 80a26c8:	2d18 5444 21fb c009                         .-DT.!..

080a26d0 <atanhi>:
 80a26d0:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
 80a26e0:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

080a26f0 <atanlo>:
 80a26f0:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
 80a2700:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

080a2710 <link_const_variable_data_end>:
 80a2710:	080a02f5 	.word	0x080a02f5
 80a2714:	080a09c1 	.word	0x080a09c1
 80a2718:	080a0c65 	.word	0x080a0c65
 80a271c:	080a0c75 	.word	0x080a0c75
 80a2720:	080a0cc5 	.word	0x080a0cc5
 80a2724:	080a1321 	.word	0x080a1321
 80a2728:	080a13fd 	.word	0x080a13fd
 80a272c:	080a14d1 	.word	0x080a14d1
